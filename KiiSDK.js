// generated by build.sh for running on Node.js
if (typeof jQuery === 'undefined') { // jQuery is defined in server code env.
    if (typeof process === 'object' && typeof process.versions === 'object') {
        var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
    }
}
;(function () {
var ctor = (function() {  // generated by build.sh for running on Node.js
// Added to SDK by build script.
// Object.keys() is defined in Javascript 1.8.5
// This code will be used when the environment doen't support Object.keys()
// For details refer to:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
if (!Object.keys) {
  Object.keys = (function () {
    var hasOwnProperty = Object.prototype.hasOwnProperty,
        hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
        dontEnums = [
          'toString',
          'toLocaleString',
          'valueOf',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'constructor'
        ],
        dontEnumsLength = dontEnums.length

    return function (obj) {
      if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) throw new TypeError('Object.keys called on non-object')

      var result = []

      for (var prop in obj) {
        if (hasOwnProperty.call(obj, prop)) result.push(prop)
      }

      if (hasDontEnumBug) {
        for (var i=0; i < dontEnumsLength; i++) {
          if (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i])
        }
      }
      return result
    }
  })()
};
/**@license MIT-promiscuous library-©2013 Ruben Verborgh*/
if(typeof Promise === 'undefined') {
  /**@license MIT-promiscuous-©Ruben Verborgh*/
  !function(n,t){function c(n,t){return(typeof t)[0]==n}function u(i,o){return o=function f(e,h,l,a,s,p){function y(n){return function(t){s&&(s=0,f(c,n,t))}}if(a=f.q,e!=c)return u(function(n,t){a.push({p:this,r:n,j:t,1:e,0:h})});if(l&&c(n,l)|c(t,l))try{s=l.then}catch(j){h=0,l=j}if(c(n,s))try{s.call(l,y(1),h=y(0))}catch(j){h(j)}else for(o=function(t,o){return c(n,t=h?t:o)?u(function(n,c){r(this,n,c,l,t)}):i},p=0;p<a.length;)s=a[p++],c(n,e=s[h])?r(s.p,s.r,s.j,l,e):(h?s.r:s.j)(l)},o.q=[],i.call(i={then:function(n,t){return o(n,t)},"catch":function(n){return o(0,n)}},function(n){o(c,1,n)},function(n){o(c,0,n)}),i}function r(u,r,i,o,f){setTimeout(function(){try{o=f(o),f=o&&c(t,o)|c(n,o)&&o.then,c(n,f)?o==u?i(TypeError()):f.call(o,r,i):r(o)}catch(e){i(e)}})}function i(n){return u(function(t){t(n)})}Promise=u,u.resolve=i,u.reject=function(n){return u(function(t,c){c(n)})},u.all=function(n){return u(function(t,c,u,r){r=[],u=n.length||t(r),n.map(function(n,o){i(n).then(function(n){r[o]=n,--u||t(r)},c)})})}}("f","o");
}
// Generated by CoffeeScript 1.8.0
var KiiAnalyticsJQXHRWrapper, KiiAnalyticsTiXHRWrapper, KiiAnalyticsXHRWrapper, KiiAnalyticsXHRWrapperFactory, KiiJQXHRWrapper, KiiJQueryHttpRequest, KiiRequest, KiiTiXHRWrapper, KiiTitaniumHttpRequest, KiiUtilities, KiiXHRWrapper, KiiXHRWrapperFactory, KiiXMLHttpRequest, root, _Kii, _KiiAnalytics, _KiiSocialConnect,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

root = ((typeof exports) !== "undefined") && (exports !== null) ? new Object() : this;

root.KiiSocialNetworkName = {
  FACEBOOK: 1,
  TWITTER: 2,
  QQ: 3,
  GOOGLEPLUS: 4,
  RENREN: 5
};

root.KiiSite = {
  US: "https://api.kii.com/api",
  JP: "https://api-jp.kii.com/api",
  CN: "https://api-cn2.kii.com/api",
  SG: "https://api-sg.kii.com/api",
  CN3: "https://api-cn3.kii.com/api",
  EU: "https://api-eu.kii.com/api"
};

root.KiiServerCodeEnvironmentVersion = {
  V0: "0",
  V6: "6"
};


/**
    @class The main SDK class
    @exports root.Kii as Kii

    This class must be initialized before any Kii SDK functions are performed. This class also allows the application to make some high-level user calls and access some application-wide data at any time using static methods.
 */

root.Kii = (function() {
  var _additionalHeaders, _instance;

  function Kii() {}

  _instance = null;

  _additionalHeaders = null;


  /**
      Kii SDK Build Number
      @returns {String} current build number of the SDK
   */

  Kii.getBuildNumber = function() {
    return "1";
  };


  /**
      Kii SDK Version Number
      @returns {String} current version number of the SDK
   */

  Kii.getSDKVersion = function() {
    return "2.4.13";
  };

  Kii.getBaseURL = function() {
    return _instance._baseURL;
  };


  /**
      Retrieve the current app ID
      @returns {String} The current app ID
   */

  Kii.getAppID = function() {
    return _instance._appID;
  };

  Kii.getAdditionalHeaders = function() {
    return _additionalHeaders;
  };

  Kii.setAdditionalHeaders = function(additionalHeaders) {
    return _additionalHeaders = additionalHeaders;
  };


  /**
      Retrieve the current app key
      @returns {String} The current app key
   */

  Kii.getAppKey = function() {
    return _instance._appKey;
  };

  Kii.isLogging = function() {
    return _instance._logging;
  };

  Kii.setLogging = function(logging) {
    _instance._logging = logging;
    root.Kii.logger("Setting logging: " + logging);
    return root.Kii.logger("Base URL: " + _instance._baseURL);
  };


  /** Set the access token lifetime in seconds.
  
  If you don't call this method or call it with 0, token won't be expired.
  Call this method if you like the access token to be expired
  after a certain period. Once called, token retrieved
  by each future authentication will have the specified lifetime.
  Note that, it will not update the lifetime of token received prior
  calling this method. Once expired, you have to login again to renew the token.
  @param expiresIn The life time of access token in seconds.
  @throws {InvalidArgumentException} If specified expiresIn is negative.
  @throws {IllegalStateException} If Kii has not been initialized
  @example
  Kii.setAccessTokenExpiration(3600);
   */

  Kii.setAccessTokenExpiration = function(expiresIn) {
    if (!_instance) {
      throw new root.IllegalStateException('Kii is not initialized');
    }
    if (isNaN(parseInt(expiresIn, 10))) {
      throw new root.InvalidArgumentException('expiresIn should be a number');
    }
    if (expiresIn < 0) {
      throw new root.InvalidArgumentException('expiresIn should not negative number');
    }
    if (_instance) {
      return _instance._expiresIn = expiresIn;
    }
  };


  /** Returns access token lifetime in seconds.
  
  If access token lifetime has not set explicitly by {@link Kii.setAccessTokenExpiration(expiresIn)}, returns 0.
  @return access token lifetime in seconds.
  @throws {IllegalStateException} If Kii has not been initialized
   */

  Kii.getAccessTokenExpiration = function() {
    if (!_instance) {
      throw new root.IllegalStateException('Kii is not initialized');
    }
    return _instance._expiresIn;
  };


  /** Initialize the Kii SDK with a specific URL
  
  Should be the first Kii SDK action your application makes.
  @param String appID The application ID found in your Kii developer console
  @param String appKey The application key found in your Kii developer console
  @param KiiSite site Can be one of the constants KiiSite.US, KiiSite.JP, KiiSite.CN or KiiSite.SG depending on your location.
  @param [analyticsOption] An object used for initializing KiiAnalytics, If not provided or invalid object provided, KiiAnalytics won't be initialized. If provided, it can be empty object or with analyticsOption.deviceId.<br> If provided, but deviceId is not provided, SDK generates a new deviceId and use it when upload events. It can be retrieved by {@link KiiAnalytics.getDeviceId()}. It is recommended to retrieve the deviceId and store it to identify the device properly.
  @example
  // Disable KiiAnalytics
  Kii.initializeWithSite("my-app-id", "my-app-key", KiiSite.JP);
  
  // Enable KiiAnalytics with deviceId
  var analyticsOption = { deviceId: "my-device-id" };
  Kii.initializeWithSite("my-app-id", "my-app-key", KiiSite.JP, analyticsOption);
  
  // Enable KiiAnalytics without deviceId
  Kii.initializeWithSite("my-app-id", "my-app-key", KiiSite.JP, {});
   */

  Kii.initializeWithSite = function(appID, appKey, site, analyticsOption) {
    _instance = new _Kii(appID, appKey, site);
    root.Kii.logger("Initialized " + appID + ", " + appKey + ", " + site);
    if (KiiUtilities._type(analyticsOption) === "object") {
      return root.KiiAnalytics._initializeWithSite(appID, appKey, site, analyticsOption.deviceId);
    }
  };


  /** Initialize the Kii SDK
  
  Should be the first Kii SDK action your application makes.
  Meanwhile, Kii Analytics is initialized.
  @param String appID The application ID found in your Kii developer console
  @param String appKey The application key found in your Kii developer console
  @param [analyticsOption] An object used for initializing KiiAnalytics, If not provided or invalid object provided, KiiAnalytics won't be initialized. If provided, it can be empty object or with analyticsOption.deviceId. <br> If provided, but deviceId is not provided, SDK generates a new deviceId and use it when upload events. It can be retrieved by {@link KiiAnalytics.getDeviceId()}. It is recommended to retrieve the deviceId and store it to identify the device properly.
  @example
  // Disable KiiAnalytics
  Kii.initialize("my-app-id", "my-app-key");
  
  // Enable KiiAnalytics with deviceId
  var analyticsOption = { deviceId: "my-device-id" };
  Kii.initialize("my-app-id", "my-app-key", analyticsOption);
  
  // Enable KiiAnalytics without deviceId
  Kii.initialize("my-app-id", "my-app-key", {});
   */

  Kii.initialize = function(appID, appKey, analyticsOption) {
    return root.Kii.initializeWithSite(appID, appKey, root.KiiSite.US, analyticsOption);
  };

  Kii.logger = function(message) {
    if (_instance._logging) {
      return console.log(message);
    }
  };


  /**
      Creates a reference to a bucket for this app
  
      <br><br>The bucket will be created/accessed within this app's scope
      @param String bucketName The name of the bucket the app should create/access
      @returns {KiiBucket} A working KiiBucket object
      @example
      var bucket = Kii.bucketWithName("myBucket");
   */

  Kii.bucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiBucket(bucketName, null);
    return bucket;
  };


  /**
      Creates a reference to a　encrypted bucket for this app
  
      <br><br>The bucket will be created/accessed within this app's scope
      @param String bucketName The name of the bucket the app should create/access
      @returns {KiiEncryptedBucket} A working KiiEncryptedBucket object
      @example
      var bucket = Kii.encryptedBucketWithName("myBucket");
   */

  Kii.encryptedBucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiEncryptedBucket(bucketName, null);
    return bucket;
  };


  /**
      Creates a reference to a group with the given name
  
      @param {String} groupName An application-specific group name
      @returns {KiiGroup} A new KiiGroup reference
      @example
      var group = new Kii.groupWithName("myGroup");
   */

  Kii.groupWithName = function(groupName) {
    return new root.Kii.groupWithNameAndMembers(groupName, null);
  };


  /**
      Creates a reference to a group with the given name and a list of default members
  
      @param {String} groupName An application-specific group name
      @param {Array} members An array of KiiUser objects to add to the group
      @returns {KiiGroup} A new KiiGroup reference
      @example
      var group = new KiiGroup.groupWithName("myGroup", members);
   */

  Kii.groupWithNameAndMembers = function(groupName, members) {
    return new root.KiiGroup.groupWithNameAndMembers(groupName, members);
  };

  Kii.logOut = function() {
    _instance._currentUser = null;
    return root.KiiSocialConnect.logOutAll();
  };

  Kii.loggedIn = function() {
    return _instance._currentUser != null;
  };

  Kii.getCurrentUser = function() {
    var user;
    if (_instance._currentUser != null) {
      user = KiiUtilities._clone(_instance._currentUser);
      root.Kii.logger("my instance:");
      root.Kii.logger(user);
      return user;
    } else {
      return null;
    }
  };

  Kii.setCurrentUser = function(user) {
    _instance._currentUser = KiiUtilities._clone(user);
    root.Kii.logger("my instance:");
    return root.Kii.logger(_instance._currentUser);
  };


  /** Authenticate as app admin.
  <br><br>
  <b>This api call must not placed on code which can be accessed by browser.
  This api is intended to be used by server side code like Node.js.
  If you use this api in code accessible by browser, your application id and application secret could be stolen.
  Attacker will be act as appadmin and all the data in your application will be suffered.
  </b>
  @param {String} clientId assigned to your application.
  @param {String} clientSecret assigned to your application.
  @param {Object} [callbacks] The callback methods called when authentication succeeded/failed.
  @param {Method} callbacks.success The callback method called when authentication succeeded.
  @param {Method} callbacks.failure The callback method called when authentication failed.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(adminContext). adminContext is a KiiAppAdminContext instance.</li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  Kii.authenticateAsAppAdmin("your client id", "your client secret", {
      success: function(adminContext) {
          // adminContext : KiiAppAdminContext instance
          // Operate entities with adminContext.
      },
      failure: function(error, statusCode) {
          // Authentication failed.
      }
  );
  
  // example to use Promise
  Kii.authenticateAsAppAdmin("your client id", "your client secret").then(
      function(adminContext) {　// fulfill callback function
          // adminContext : KiiAppAdminContext instance
          // Operate entities with adminContext.
  
      },
      function(error) { // reject callback function
          // Authentication failed.
          var errorString = error.message;
      }
  );
   */

  Kii.authenticateAsAppAdmin = function(clientId, clientSecret, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var authenticateAsAppAdminCallbacks;
        authenticateAsAppAdminCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[0]));
          }
        };
        return _this._authenticateAsAppAdminUsingCallbacks(clientId, clientSecret, authenticateAsAppAdminCallbacks);
      };
    })(this));
  };

  Kii._authenticateAsAppAdminUsingCallbacks = function(clientId, clientSecret, callbacks) {
    var authCallbacks, request;
    request = new KiiRequest("/oauth2/token", false);
    request.setAnonymous(true);
    request.setMethod("POST");
    request.setData({
      'client_id': clientId,
      'client_secret': clientSecret
    });
    authCallbacks = {
      success: (function(_this) {
        return function(data) {
          var admin, id, token;
          token = data.access_token;
          id = data.id;
          root.Kii.logger("token: " + token);
          root.Kii.logger("id: " + id);
          admin = new root.KiiAppAdminContext({
            token: token,
            id: id
          });
          if (callbacks != null) {
            return callbacks.success(admin);
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          root.Kii.logger("error: " + error);
          root.Kii.logger("statusCode: " + statusCode);
          if (callbacks != null) {
            return callbacks.failure(error, statusCode);
          }
        };
      })(this)
    };
    return request.execute(authCallbacks, false);
  };

  Kii.authenticateAsAdminWithToken = function(token) {
    return new root.KiiAppAdminContext({
      token: token
    });
  };


  /**
  Instantiate KiiServerCodeEntry.
  @param {String} entryName Name of the entry.
  @param {String} [version] Version of the entry.
  @param {KiiServerCodeEnvironmentVersion} [environmentVersion] Version of the Node.js. Currently, supported versions are 0 and 6.
  @returns {KiiServerCodeEntry} KiiServerCodeEntry instance.
  @throws {InvalidArgumentException} Thrown in the following cases: <br>
  <li>entryName or version is not type of string </li>
  <li>entryName or version is empty string </li>
  <li>entryName is invalid string. Valid entryName pattern is "[a-zA-Z][_a-zA-Z0-9]*$".</li>
  
  @example
      var entry = Kii.serverCodeEntryWithVersion("main", "gulsdf6ful8jvf8uq6fe7vjy6", KiiServerCodeEnvironmentVersion.V0);
   */

  Kii.serverCodeEntry = function(entryName, version, environmentVersion) {
    if (!KiiUtilities._validateServerCodeEntryName(entryName)) {
      throw new root.InvalidArgumentException('entryName is invalid');
    }
    if (version && !KiiUtilities._validateServerCodeEnryVersion(version)) {
      throw new root.InvalidArgumentException('version is invalid');
    }
    return new root.KiiServerCodeEntry(entryName, version, environmentVersion);
  };


  /**
  @deprecated Use {@link Kii.serverCodeEntry} instead. Instantiate serverCodeEntryWithVersion with specified entry name and version.
  @param {String} entryName Name of the entry.
  @param {String} version Version of the entry.
  @returns {KiiServerCodeEntry} KiiServerCodeEntry instance.
  @throws {InvalidArgumentException} Thrown in the following cases: <br>
  <li>entryName or version is not type of string </li>
  <li>entryName or version is empty string </li>
  <li>entryName is invalid string. Valid entryName pattern is "[a-zA-Z][_a-zA-Z0-9]*$".</li>
  
  @example
      var entry = Kii.serverCodeEntryWithVersion("main", "gulsdf6ful8jvf8uq6fe7vjy6");
   */

  Kii.serverCodeEntryWithVersion = function(entryName, version) {
    if (!KiiUtilities._validateServerCodeEntryName(entryName)) {
      throw new root.InvalidArgumentException('entryName is invalid');
    }
    if (!KiiUtilities._validateServerCodeEnryVersion(version)) {
      throw new root.InvalidArgumentException('version is invalid');
    }
    return new root.KiiServerCodeEntry(entryName, version);
  };

  Kii._setHttpRequestType = function(requestType) {
    root.Kii.logger("Set http request as " + requestType);
    return _instance._httpRequestType = requestType;
  };

  Kii._getHttpRequestType = function() {
    return _instance._httpRequestType;
  };

  Kii._getKiiUtilities = function() {
    return KiiUtilities;
  };


  /**
  Instantiate topic belongs to application.
  @param {String} topicName name of the topic. Must be a not empty string.
  @return {KiiTopic} topic instance.
   */

  Kii.topicWithName = function(topicName) {
    var puri;
    if (typeof topicName !== "string" || topicName === "") {
      throw new root.InvalidArgumentException('topicName should not null or empty');
    }
    puri = "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID());
    return new root.KiiTopic(puri, topicName);
  };


  /** Gets a list of topics in app scope
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful list request
  @param {Method} callbacks.failure The callback method to call on a failed list request
  @param {String} [paginationKey] You can specify the pagination key with the nextPaginationKey passed by callbacks.success or fullfill callback of promise. If empty string or no string object is provided, this API regards no paginationKey specified.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(params). params is Array instance.
          <ul>
            <li>params[0] is array of KiiTopic instances.</li>
            <li>params[1] is string of nextPaginationKey.</li>
          </ul>
        </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  Kii.listTopics({
      success: function(topicList, nextPaginationKey) {
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              Kii.listTopics({
                  success: function(topicList, nextPaginationKey) {...},
                  failure: function(anErrorString) {...}
              }, nextPaginationKey);
          }
      },
      failure: function(anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use promise
  Kii.listTopics().then(
      function(params) {
          var topicList = params[0];
          var nextPaginationKey = params[1];
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              Kii.listTopics(null, nextPaginationKey).then(
                  function(params) {...},
                  function(error) {...}
              );
          }
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  Kii.listTopics = function(callbacks, paginationKey) {
    return Kii._listTopics(callbacks, paginationKey);
  };

  Kii._listTopics = function(callbacks, paginationKey, context) {
    return new Promise(function(resolve, reject) {
      var listTopicsCallbacks;
      listTopicsCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success.apply(callbacks, arguments);
          }
          return resolve(arguments);
        },
        failure: function() {
          if (callbacks != null) {
            callbacks.failure.apply(callbacks, arguments);
          }
          return reject(arguments[0]);
        }
      };
      return Kii._listTopicsUsingCallbacks(listTopicsCallbacks, paginationKey, context);
    });
  };

  Kii._listTopicsUsingCallbacks = function(callbacks, paginationKey, context) {
    var listCallbacks, uri, wrapper;
    uri = "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/topics";
    if (typeof paginationKey === "string" && paginationKey !== "") {
      uri = uri + "?paginationKey=" + encodeURIComponent(paginationKey);
    }
    wrapper = KiiXHRWrapperFactory.createXHRWrapper('GET', uri);
    wrapper.setKiiHeaders();
    if (context != null) {
      wrapper.setAuthToken(context._getToken());
    } else {
      wrapper.setCurrentUserToken();
    }
    listCallbacks = {
      success: function() {
        var json, topic, topics, _i, _len, _ref;
        json = JSON.parse(wrapper.xhr.responseText);
        topics = [];
        _ref = json.topics;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          topic = _ref[_i];
          topics.push(Kii.topicWithName(topic.topicID));
        }
        return callbacks != null ? callbacks.success(topics, (json.paginationKey === void 0 ? null : json.paginationKey)) : void 0;
      },
      failure: function() {
        var errObj, errString;
        errString = wrapper.getErrorString("list topics");
        errObj = KiiUtilities._Error(errString, Kii);
        return callbacks != null ? callbacks.failure(errObj) : void 0;
      }
    };
    return wrapper.send(listCallbacks);
  };


  /** Authenticate as Thing.
  <br><br>
  <b>This api is intended to be used in a Thing device, where the user
  credentials or app admin context is not configured. This Thing must be
  already registered in Kii Cloud.
  </b>
  @param {String} vendorThingID vendorThingID of a registered Thing.
  @param {String} password password for the registered Thing.
  @param {Object} [callbacks] The callback methods called when authentication succeeded/failed.
  @param {Method} callbacks.success The callback method called when authentication succeeded.
  @param {Method} callbacks.failure The callback method called when authentication failed.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(thingAuthContext). thingAuthContext is a KiiThingContext instance.</li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  Kii.authenticateAsThing("vendor thing id", "password of this thing", {
      success: function(thingAuthContext) {
          // thingAuthContext : KiiThingContext instance
          // Operate entities with thingAuthContext.
      },
      failure: function(error) {
          // Authentication failed.
      }
  );
  
  // example to use Promise
  Kii.authenticateAsThing("vendor thing id", "password of this thing").then(
      function(thingAuthContext) {　// fulfill callback function
          // thingAuthContext : KiiThingContext instance
          // Operate entities with thingAuthContext.
  
      },
      function(error) { // reject callback function
          // Authentication failed.
          var errorString = error.message;
      }
  );
   */

  Kii.authenticateAsThing = function(vendorThingID, password, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, sendCallbacks, wrapper;
        if (!KiiUtilities._isNonEmptyString(vendorThingID) || !KiiUtilities._isNonEmptyString(password)) {
          errObj = KiiUtilities._Error("vendorThingID or password is invalid");
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
          return;
        }
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('POST', "" + (root.Kii.getBaseURL()) + "/oauth2/token");
        wrapper.setKiiHeaders();
        wrapper.setContentType("application/vnd.kii.OauthTokenRequest+json");
        sendCallbacks = {
          success: function() {
            var accessToken, errString, respJson, thingAuthContext, thingID;
            respJson = JSON.parse(decodeURIComponent(wrapper.xhr.responseText));
            thingID = respJson.id;
            accessToken = respJson.access_token;
            if ((thingID != null) && (accessToken != null)) {
              thingAuthContext = new root.KiiThingContext({
                thingId: thingID,
                token: accessToken,
                vendorThingID: vendorThingID
              });
              if (callbacks != null) {
                callbacks.success(thingAuthContext);
              }
              return resolve(thingAuthContext);
            } else {
              errString = wrapper.getErrorString("invalid format response when authenticate thing ");
              errObj = KiiUtilities._Error(errString);
              if (callbacks != null) {
                callbacks.failure(errObj);
              }
              return reject(errObj);
            }
          },
          failure: function() {
            var errString;
            errString = wrapper.getErrorString("authenticate as thing");
            errObj = KiiUtilities._Error(errString);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.sendData(JSON.stringify({
          username: "VENDOR_THING_ID:" + vendorThingID,
          password: password
        }), sendCallbacks);
      };
    })(this));
  };


  /** Create a KiiThingContext reference
  <br><br>
  <b>This api is intended to be used in a Thing device, where the user
  credentials or app admin context is not configured. This Thing must be
  already registered in Kii Cloud.
  </b>
  @param {String} thingID thingID of a registered Thing.
  @param {String} token token for the registered Thing.
  @param {Object} [callbacks] The callback methods called when creation succeeded/failed.
  @param {Method} callbacks.success The callback method called when creation succeeded.
  @param {Method} callbacks.failure The callback method called when creation failed.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(thingContext). thingContext is a KiiThingContext instance.</li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  Kii.authenticateAsThingWithToken("thing_id", "thing_token", {
      success: function(thingContext) {
          // thingContext : KiiThingContext instance
          // Operate entities with thingContext.
      },
      failure: function(error) {
          // Creation failed.
      }
  );
  
  // example to use Promise
  Kii.authenticateAsThingWithToken("thing_id", "thing_token").then(
      function(thingContext) {　// fulfill callback function
          // thingContext : KiiThingContext instance
          // Operate entities with thingContext.
  
      },
      function(error) { // reject callback function
          // Creation failed.
          var errorString = error.message;
      }
  );
   */

  Kii.authenticateAsThingWithToken = function(thingID, token, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, thingAuthContext;
        if (!KiiUtilities._isNonEmptyString(thingID) || !KiiUtilities._isNonEmptyString(token)) {
          errObj = KiiUtilities._Error("thingID or token is invalid");
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        } else {
          thingAuthContext = new root.KiiThingContext({
            thingId: thingID,
            token: token
          });
          if (callbacks != null) {
            callbacks.success(thingAuthContext);
          }
          return resolve(thingAuthContext);
        }
      };
    })(this));
  };

  return Kii;

})();

root._KiiHttpRequestType = {
  jQuery: "jQuery",
  XMLHttpRequest: "XMLHttpRequest",
  Titanium: "Titanium"
};

_Kii = (function() {
  _Kii.prototype._logging = false;

  _Kii.prototype._baseURL = null;

  _Kii.prototype._currentUser = null;

  _Kii.prototype._httpRequestType = null;

  function _Kii(appID, appKey, site) {
    this._appKey = appKey;
    this._appID = appID;
    this._baseURL = site;
    this._expiresIn = 0;
  }

  return _Kii;

})();


/**
    @class Represents a KiiACL object
    @exports root.KiiACL as KiiACL
 */

root.KiiACL = (function() {
  function KiiACL() {
    this._thingWithID = __bind(this._thingWithID, this);
    this._userWithID = __bind(this._userWithID, this);
    this._groupWithID = __bind(this._groupWithID, this);
    this._getRequest = __bind(this._getRequest, this);
    this._saveItr = __bind(this._saveItr, this);
    this._saveUsingCallbacks = __bind(this._saveUsingCallbacks, this);
    this.save = __bind(this.save, this);
    this._getKeyOfEntry = __bind(this._getKeyOfEntry, this);
    this.removeACLEntry = __bind(this.removeACLEntry, this);
    this.putACLEntry = __bind(this.putACLEntry, this);
    this._listACLEntriesUsingCallbacks = __bind(this._listACLEntriesUsingCallbacks, this);
    this.listACLEntries = __bind(this.listACLEntries, this);
    this.aclPath = __bind(this.aclPath, this);
    this._setParent = __bind(this._setParent, this);
    this._entriesMap = {};
  }

  KiiACL.prototype._setParent = function(_parent) {
    this._parent = _parent;
  };

  KiiACL.prototype.aclPath = function() {
    var bucket, bucketName, group, object, objectId, path, stringToRemove, thing, topic, user;
    if (this._parent instanceof root.KiiObject) {
      object = this._parent;
      if (object.getBucket().getUser() != null) {
        user = object.getBucket().getUser();
      } else if (object.getBucket().getGroup() != null) {
        group = object.getBucket().getGroup();
      } else if (object.getBucket().getThing() != null) {
        thing = object.getBucket().getThing();
      }
      bucketName = object.getBucket()._getQualifiedBucketName();
      objectId = object.getUUID();
    } else if (this._parent instanceof root.KiiBucket) {
      bucket = this._parent;
      if (bucket.getUser() != null) {
        user = bucket.getUser();
      } else if (bucket.getGroup() != null) {
        group = bucket.getGroup();
      } else if (bucket.getThing() != null) {
        thing = bucket.getThing();
      }
      bucketName = bucket._getQualifiedBucketName();
    } else if (this._parent instanceof root.KiiTopic) {
      topic = this._parent;
    } else {
      root.Kii.logger("Invalid ACL parent. Must belong to a KiiObject");
    }
    path = "/";
    if (group != null) {
      path += "groups/" + (group.getUUID()) + "/";
    } else if (user != null) {
      path += "users/" + (user.getUUID()) + "/";
    } else if (thing != null) {
      path += "things/" + (thing.getThingID()) + "/";
    }
    if (topic) {
      stringToRemove = "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/";
      if (topic._uri.indexOf(stringToRemove) !== 0) {
        path = null;
      } else {
        path += topic._uri.substr(stringToRemove.length) + "/acl";
      }
    } else {
      if (objectId != null) {
        path += "buckets/" + bucketName + "/objects/" + objectId + "/acl";
      } else {
        path += "buckets/" + bucketName + "/acl";
      }
    }
    return path;
  };


  /** Get the list of active ACLs associated with this object from the server
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful list request
  @param {Method} callbacks.failure The callback method to call on a failed list request
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(params). params is Array instance.
          <ul>
            <li>params[0] is the KiiACL instance which this method was called on.</li>
            <li>params[1] is array of KiiACLEntry instances.</li>
          </ul>
        </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.target is the KiiACL instance which this method was called on.</li>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  var acl = . . .; // a KiiACL object
  acl.listACLEntries({
  	success: function(theACL, theEntries) {
  		// do something
  	},
  
  	failure: function(theACL, anErrorString) {
  		// do something with the error response
  	}
  });
  
  // example to use Promise
  var acl = . . .; // a KiiACL object
  acl.listACLEntries().then(
      function(params) { // fulfill callback function
          var theACL = params[0];
          var theEntries = params[1];
          // do something
      },
      function(error) { // reject callback function
          var theACL = error.target;
          var anErrorString = error.message;
      		// do something with the error response
  });
   */

  KiiACL.prototype.listACLEntries = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var listACLEntriesCallbacks;
        listACLEntriesCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._listACLEntriesUsingCallbacks(listACLEntriesCallbacks);
      };
    })(this));
  };

  KiiACL.prototype._listACLEntriesUsingCallbacks = function(callbacks) {
    var listCallbacks, request;
    root.Kii.logger("Listing ACL entries");
    request = this._getRequest({
      path: this.aclPath(),
      withApp: true
    });
    listCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          var action, entity, key, results, subject, value, _i, _len;
          if (statusCode < 300 && statusCode >= 200) {
            results = [];
            for (key in data) {
              value = data[key];
              if (key === "WRITE_EXISTING_OBJECT") {
                action = root.KiiACLAction.KiiACLObjectActionWrite;
              } else if (key === "READ_EXISTING_OBJECT") {
                action = root.KiiACLAction.KiiACLObjectActionRead;
              } else if (key === "QUERY_OBJECTS_IN_BUCKET") {
                action = root.KiiACLAction.KiiACLBucketActionQueryObjects;
              } else if (key === "CREATE_OBJECTS_IN_BUCKET") {
                action = root.KiiACLAction.KiiACLBucketActionCreateObjects;
              } else if (key === "DROP_BUCKET_WITH_ALL_CONTENT") {
                action = root.KiiACLAction.KiiACLBucketActionDropBucket;
              } else if (key === "READ_OBJECTS_IN_BUCKET") {
                action = root.KiiACLAction.KiiACLBucketActionReadObjects;
              } else if (key === "SUBSCRIBE_TO_TOPIC") {
                action = root.KiiACLAction.KiiACLSubscribeToTopic;
              } else if (key === "SEND_MESSAGE_TO_TOPIC") {
                action = root.KiiACLAction.KiiACLSendMessageToTopic;
              } else {
                continue;
              }
              for (_i = 0, _len = value.length; _i < _len; _i++) {
                entity = value[_i];
                if (entity.groupID != null) {
                  subject = _this._groupWithID(entity.groupID);
                } else if (entity.userID != null) {
                  subject = _this._userWithID(entity.userID);
                } else if (entity.thingID != null) {
                  subject = _this._thingWithID(entity.thingID);
                } else {
                  continue;
                }
                results.push(root.KiiACLEntry.entryWithSubject(subject, action));
              }
            }
            return callbacks.success(_this, results);
          } else {
            return callbacks.failure(_this, "Unable to retrieve ACL list");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          return callbacks.failure(_this, error);
        };
      })(this)
    };
    return request.execute(listCallbacks, false);
  };


  /** Add a KiiACLEntry to the local object, if not already present. This does not explicitly grant any permissions, which should be done through the KiiACLEntry itself. This method simply adds the entry to the local ACL object so it can be saved to the server.
  @param {KiiACLEntry} entry The KiiACLEntry to add
  @throws {InvalidArgumentException} If specified entry is not an instance of KiiACLEntry.
  @example
  var aclEntry = . . .; // a KiiACLEntry object
  var acl = . . .; // a KiiACL object
  acl.putACLEntry(aclEntry);
   */

  KiiACL.prototype.putACLEntry = function(entry) {
    var key;
    if (!(entry instanceof root.KiiACLEntry)) {
      throw new root.InvalidArgumentException('invalid entry');
    }
    key = this._getKeyOfEntry(entry);
    return this._entriesMap[key] = entry;
  };


  /** Remove a KiiACLEntry to the local object. This does not explicitly revoke any permissions, which should be done through the KiiACLEntry itself. This method simply removes the entry from the local ACL object and will not be saved to the server.
  @param {KiiACLEntry} entry The KiiACLEntry to remove
  @throws {InvalidArgumentException} If specified entry is not an instance of KiiACLEntry.
  @example
  var aclEntry = . . .; // a KiiACLEntry object
  var acl = . . .; // a KiiACL object
  acl.removeACLEntry(aclEntry);
   */

  KiiACL.prototype.removeACLEntry = function(entry) {
    var key;
    if (!(entry instanceof root.KiiACLEntry)) {
      throw new root.InvalidArgumentException('invalid entry');
    }
    key = this._getKeyOfEntry(entry);
    return delete this._entriesMap[key];
  };

  KiiACL.prototype._getKeyOfEntry = function(entry) {
    var key1, key2, key3;
    key1 = entry.getActionString();
    key2 = entry.getEntityString();
    key3 = entry.getGrant();
    return "" + key1 + "/" + key2 + ":" + key3;
  };


  /** Save the list of ACLEntry objects associated with this ACL object to the server
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful save request
  @param {Method} callbacks.failure The callback method to call on a failed save request
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(theSavedACL). theSavedACL is KiiACL instance.</li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.target is the KiiACL instance which this method was called on.</li>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  var acl = . . .; // a KiiACL object
  acl.save({
      success: function(theSavedACL) {
          // do something with the saved acl
      },
  
      failure: function(theACL, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var acl = . . .; // a KiiACL object
  acl.save().then(
      function(theSavedACL) { // fulfill callback function
          // do something with the saved acl
      },
      function(error) { // reject callback function
          var theACL = error.target;
          var anErrorString = error.message;
          // do something with the error response
  });
   */

  KiiACL.prototype.save = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var saveCallbacks;
        saveCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._saveUsingCallbacks(saveCallbacks);
      };
    })(this));
  };

  KiiACL.prototype._saveUsingCallbacks = function(callbacks) {
    var keys;
    root.Kii.logger("SAving acl");
    if (!this._entriesMap) {
      callbacks.failure(this, "There is no entry to save.");
      return;
    }
    keys = Object.keys(this._entriesMap);
    root.Kii.logger("Saving total entries : " + keys.length);
    if (keys.length < 1) {
      callbacks.failure(this, "There is no entry to save.");
      return;
    }
    return this._saveItr(keys, 0, callbacks);
  };

  KiiACL.prototype._saveItr = function(keys, idx, callbacks) {
    var aclEntry, path, request, _errorStr;
    aclEntry = this._entriesMap[keys[idx]];
    path = "" + (this.aclPath()) + "/" + (aclEntry.getActionString()) + "/" + (aclEntry.getEntityString());
    root.Kii.logger("Saving single @path: " + path);
    root.Kii.logger("Saving  entries index : " + idx);
    request = this._getRequest({
      path: path,
      withApp: true
    });
    request.setMethod(aclEntry.getGrant() === true ? "PUT" : "DELETE");
    _errorStr = null;
    return request.execute({
      success: (function(_this) {
        return function(data, status, xhr) {
          _this.removeACLEntry(aclEntry);
          if (idx < keys.length - 1) {
            return _this._saveItr(keys, idx + 1, callbacks);
          } else {
            return callbacks.success(_this);
          }
        };
      })(this),
      failure: (function(_this) {
        return function(errorStr, statusCode, errorCode) {
          return callbacks.failure(_this, errorStr);
        };
      })(this)
    }, false);
  };

  KiiACL.aclWithParent = function(parent) {
    var acl;
    acl = new root.KiiACL();
    acl._setParent(parent);
    return acl;
  };

  KiiACL.prototype._getRequest = function(spec) {
    var path, request, withApp;
    path = spec.path;
    withApp = spec.withApp;
    request = new KiiRequest(path, withApp);
    return request;
  };

  KiiACL.prototype._groupWithID = function(id) {
    var group;
    group = root.KiiGroup.groupWithID(id);
    return group;
  };

  KiiACL.prototype._userWithID = function(id) {
    if (id === 'ANONYMOUS_USER') {
      return new root.KiiAnonymousUser();
    } else if (id === 'ANY_AUTHENTICATED_USER') {
      return new root.KiiAnyAuthenticatedUser();
    } else {
      return root.KiiUser.userWithID(id);
    }
  };

  KiiACL.prototype._thingWithID = function(id) {
    return root.KiiThing.thingWithID(id);
  };

  return KiiACL;

})();

root.KiiACLAction = {
  KiiACLActionStart: -1,
  KiiACLBucketActionCreateObjects: 0,
  KiiACLBucketActionQueryObjects: 1,
  KiiACLBucketActionDropBucket: 2,
  KiiACLBucketActionReadObjects: 3,
  KiiACLObjectActionRead: 4,
  KiiACLObjectActionWrite: 5,
  KiiACLSubscribeToTopic: 6,
  KiiACLSendMessageToTopic: 7,
  KiiACLActionEnd: 8
};


/**
    @class Represents a KiiACLEntry object
    @exports root.KiiACLEntry as KiiACLEntry
 */

root.KiiACLEntry = (function() {
  function KiiACLEntry() {
    this.getEntityString = __bind(this.getEntityString, this);
    this.getActionString = __bind(this.getActionString, this);
    this.getGrant = __bind(this.getGrant, this);
    this.setGrant = __bind(this.setGrant, this);
    this.getSubject = __bind(this.getSubject, this);
    this.setSubject = __bind(this.setSubject, this);
    this.getAction = __bind(this.getAction, this);
    this.setAction = __bind(this.setAction, this);
    this._action = -1;
    this._grant = true;
  }


  /** The action that is being permitted/restricted. Possible values:
  <br><br>
  KiiACLAction.KiiACLBucketActionCreateObjects,<br>
  KiiACLAction.KiiACLBucketActionQueryObjects,  <br>
  KiiACLAction.KiiACLBucketActionDropBucket,<br>
  KiiACLAction.KiiACLBucketActionReadObjects,<br>
  KiiACLAction.KiiACLObjectActionRead,<br>
  KiiACLAction.KiiACLObjectActionWrite,<br>
  KiiACLAction.KiiACLSubscribeToTopic,<br>
  KiiACLAction.KiiACLSendMessageToTopic
  
  @param {KiiACLAction} value The action being permitted/restricted
  @throws {InvalidACLAction} If the value is not one of the permitted values
   */

  KiiACLEntry.prototype.setAction = function(value) {
    if (value > root.KiiACLAction.KiiACLActionStart && value < root.KiiACLAction.KiiACLActionEnd) {
      return this._action = value;
    } else {
      throw new root.InvalidACLAction;
    }
  };


  /** Get the action that is being permitted/restricted in this entry
  @returns {KiiACLAction}
   */

  KiiACLEntry.prototype.getAction = function() {
    return this._action;
  };


  /** Set the subject to which the action/grant is being applied
  @param {KiiGroup|KiiUser|KiiAnyAuthenticatedUser|KiiAnonymousUser|KiiThing} subject instance.
  @throws {InvalidACLSubject} If the value is not one of the permitted values
   */

  KiiACLEntry.prototype.setSubject = function(value) {
    if ((value instanceof root.KiiGroup && (value.getID() != null)) || (value instanceof root.KiiUser && (value.getID() != null)) || value instanceof root.KiiAnyAuthenticatedUser || value instanceof root.KiiAnonymousUser || (value instanceof root.KiiThing && (value.getThingID() != null))) {
      return this._subject = value;
    } else {
      throw new root.InvalidACLSubject;
    }
  };


  /** Get the subject that is being permitted/restricted in this entry
  @returns {KiiUser|KiiGroup|KiiThing}
   */

  KiiACLEntry.prototype.getSubject = function() {
    return this._subject;
  };


  /** Set whether or not the action is being permitted to the subject
  @param {Boolean} value true if the action is permitted, false otherwise
  @throws {InvalidACLGrant} If the value is not a boolean type
   */

  KiiACLEntry.prototype.setGrant = function(value) {
    if (value === true || value === false) {
      return this._grant = value;
    } else {
      throw new root.InvalidACLGrant;
    }
  };


  /** Get whether or not the action is being permitted to the subject
  @returns {Boolean}
   */

  KiiACLEntry.prototype.getGrant = function() {
    return this._grant;
  };


  /** Create a KiiACLEntry object with a subject and action
  
  The entry will not be applied on the server until the KiiACL object is
  explicitly saved. This method simply returns a working KiiACLEntry with
  a specified subject and action.
  @param {KiiGroup|KiiUser|KiiAnyAuthenticatedUser|KiiAnonymousUser|KiiThing} Subject
  to which the action/grant is being applied
  @param {KiiACLAction} action One of the specified KiiACLAction values the
  permissions is being applied to
  @return A KiiACLEntry object with the specified attributes
  @throws {InvalidACLSubject} If specified subject is invalid.
  @throws {InvalidACLAction} If the specified action is invalid.
   */

  KiiACLEntry.entryWithSubject = function(subject, action) {
    var entry;
    root.Kii.logger("EWS: " + subject + ", " + action);
    entry = new root.KiiACLEntry();
    entry.setSubject(subject);
    entry.setAction(action);
    return entry;
  };

  KiiACLEntry.prototype.getActionString = function() {
    var retString;
    root.Kii.logger("Action: " + this.action);
    switch (this._action) {
      case root.KiiACLAction.KiiACLBucketActionCreateObjects:
        retString = "CREATE_OBJECTS_IN_BUCKET";
        break;
      case root.KiiACLAction.KiiACLBucketActionQueryObjects:
        retString = "QUERY_OBJECTS_IN_BUCKET";
        break;
      case root.KiiACLAction.KiiACLBucketActionDropBucket:
        retString = "DROP_BUCKET_WITH_ALL_CONTENT";
        break;
      case root.KiiACLAction.KiiACLBucketActionReadObjects:
        retString = "READ_OBJECTS_IN_BUCKET";
        break;
      case root.KiiACLAction.KiiACLObjectActionRead:
        retString = "READ_EXISTING_OBJECT";
        break;
      case root.KiiACLAction.KiiACLObjectActionWrite:
        retString = "WRITE_EXISTING_OBJECT";
        break;
      case root.KiiACLAction.KiiACLSubscribeToTopic:
        retString = "SUBSCRIBE_TO_TOPIC";
        break;
      case root.KiiACLAction.KiiACLSendMessageToTopic:
        retString = "SEND_MESSAGE_TO_TOPIC";
        break;
      default:
        return retString;
    }
    return retString;
  };

  KiiACLEntry.prototype.getEntityString = function() {
    var entityId, type;
    if (this._subject instanceof root.KiiGroup) {
      entityId = this._subject.getUUID();
      type = "GroupID";
    } else if (this._subject instanceof root.KiiUser) {
      entityId = this._subject.getUUID();
      type = "UserID";
    } else if (this._subject instanceof root.KiiAnyAuthenticatedUser) {
      type = "UserID";
      entityId = "ANY_AUTHENTICATED_USER";
    } else if (this._subject instanceof root.KiiAnonymousUser) {
      type = "UserID";
      entityId = "ANONYMOUS_USER";
    } else if (this._subject instanceof root.KiiThing) {
      type = "ThingID";
      entityId = this._subject.getThingID();
    }
    return "" + type + ":" + entityId;
  };

  return KiiACLEntry;

})();


/**
    @class Represents a KiiBucket object
    @exports root.KiiBucket as KiiBucket
 */

root.KiiBucket = (function() {
  KiiBucket.prototype._className = "KiiBucket";

  KiiBucket.prototype.getUser = function() {
    return this._user;
  };

  KiiBucket.prototype.getGroup = function() {
    return this._group;
  };

  KiiBucket.prototype.getThing = function() {
    return this._thing;
  };


  /** The name of this bucket
  @returns {String}
   */

  KiiBucket.prototype.getBucketName = function() {
    return this._bucketName;
  };

  KiiBucket.prototype._setBucketName = function(_bucketName) {
    this._bucketName = _bucketName;
  };

  KiiBucket.prototype._getQualifiedBucketName = function() {
    return this._bucketName;
  };


  /** Create a KiiObject within the current bucket
  
  <br><br>The object will not be created on the server until the KiiObject is explicitly saved. This method simply returns an empty working KiiObject.
  @returns {KiiObject} An empty KiiObject with no specific type
  @example
  var bucket = . . .; // a KiiBucket
  var object = bucket.createObject();
   */

  KiiBucket.prototype.createObject = function() {
    return root.KiiObject.objectWithBucket(this, null);
  };


  /** Create a KiiObject within the current bucket, with type
  
  <br><br>The object will not be created on the server until the KiiObject is explicitly saved. This method simply returns an empty working KiiObject with a specified type. The type allows for better indexing and improved query results. It is recommended to use this method - but for lazy creation, the createObject method is also available.
  @param String type A string representing the desired object type
  @returns An empty KiiObject with specified type
  @example
  var bucket = . . .; // a KiiBucket
  var object = bucket.createObjectWithType("scores");
   */

  KiiBucket.prototype.createObjectWithType = function(type) {
    return root.KiiObject.objectWithBucket(this, type);
  };


  /** Create a KiiObject within the current bucket, specifying its ID.
  
  <br><br> If the object has not exist on KiiCloud, {@link KiiObject#saveAllFields(callback)}
    will create new Object which has ID specified in the argument.
    If the object exist in KiiCloud, references the existing object which has
    specified ID. use {@link KiiObject#refresh(callback)} to retrieve the contents of
    KiiObject.
   @param String objectID ID of the obeject you want to instantiate.
   @returns {KiiObject} KiiObject instance.
   @throws {InvalidArgumentException} objectID is not acceptable.
   Refer to {@link KiiObject.isValidObjectID(string)} for details of acceptable string.
   @example
   var bucket = . . .; // KiiBucket
   var object = bucket.createObjectWithID('__OBJECT_ID_');
   */

  KiiBucket.prototype.createObjectWithID = function(objectID) {
    if (!root.KiiObject.isValidObjectID(objectID)) {
      throw root.InvalidArgumentException('Specified obejctID is invalid.');
    }
    return root.KiiObject.objectWithID(this, objectID);
  };


  /** Get the ACL handle for this bucket
  
  <br><br>Any KiiACLEntry objects added or revoked from this ACL object will be appended to/removed from the server on ACL save.
  	@returns {KiiACL} A KiiACL object associated with this KiiObject
  	@example
  	var bucket = . . .; // a KiiBucket
  	var acl = bucket.acl();
   */

  KiiBucket.prototype.acl = function() {
    return root.KiiACL.aclWithParent(this);
  };


  /** Perform a query on the given bucket
  
  <br><br>The query will be executed against the server, returning a result set.
  @param KiiQuery query An object with callback methods defined
  @param Object callbacks An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful query request
  @param {Method} callbacks.failure The callback method to call on a failed query request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a performed KiiQuery instance.</li>
          <li>params[1] is resultSet Array instance. Could be KiiObject, KiiGroup, KiiUser, etc.</li>
          <li>params[2] is a KiiQuery instance for next query. If there are no more results to be retrieved, it will be null.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiBucket instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var bucket = . . .; // a KiiBucket
  var queryObject = . . .; // a KiiQuery
  
  // define the callbacks (stored in a variable for reusability)
  var queryCallbacks = {
      success: function(queryPerformed, resultSet, nextQuery) {
          // do something with the results
          for(var i=0; i&lt;resultSet.length; i++) {
              // do something with the object
              // resultSet[i]; // could be KiiObject, KiiGroup, KiiUser, etc
          }
  
          // if there are more results to be retrieved
          if(nextQuery != null) {
  
              // get them and repeat recursively until no results remain
              bucket.executeQuery(nextQuery, queryCallbacks);
          }
      },
  
      failure: function(bucket, anErrorString) {
          // do something with the error response
      }
  };
  bucket.executeQuery(queryObject, queryCallbacks);
  
  // example to use Promise
  var bucket = . . .; // a KiiBucket
  var queryObject = . . .; // a KiiQuery
  bucket.executeQuery(queryObject).then(
      function(params) {
          var queryPerformed = params[0];
          var resultSet = params[1];
          var nextQuery = params[2];
          // do something with the results
          for(var i=0; i&lt;resultSet.length; i++) {
              // do something with the object
              // resultSet[i]; // could be KiiObject, KiiGroup, KiiUser, etc
          }
  
          // if there are more results to be retrieved
          if(nextQuery != null) {
  
              // get them and repeat recursively until no results remain
              bucket.executeQuery(nextQuery).then(
                  function(params) {
                      // next query success
                  },
                  function(error) {
                      // next query failed, please handle the error
                  }
              );
          }
  
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiBucket.prototype.executeQuery = function(query, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var executeQueryCallbacks;
        executeQueryCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._executeQueryUsingCallbacks(query, executeQueryCallbacks);
      };
    })(this));
  };

  KiiBucket.prototype._executeQueryUsingCallbacks = function(query, callbacks) {
    var data, error, executeCallbacks, path, request;
    try {
      path = this._generatePath() + "/query";
      data = {};
      if (query != null) {
        data = query._dictValue();
      } else {
        data.bucketQuery = {
          "clause": root.KiiQuery._emptyDictValue()
        };
      }
      request = this._getRequest({
        path: path,
        withApp: true
      });
      request.setMethod("POST");
      request.setContentType("application/vnd.kii.QueryRequest+json");
      request.setData(data);
      executeCallbacks = {
        success: (function(_this) {
          return function(data, statusCode) {
            var nextQuery, result, resultSet, _i, _len, _ref;
            if (statusCode < 300 && statusCode >= 200) {
              resultSet = [];
              _ref = data.results;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                result = _ref[_i];
                resultSet.push(_this.objectWithJSON(result));
              }
              if (data.nextPaginationKey != null) {
                nextQuery = new root.KiiQuery(query);
                nextQuery.setPaginationKey(data.nextPaginationKey);
              } else {
                nextQuery = null;
              }
              if (callbacks != null) {
                return callbacks.success(query, resultSet, nextQuery);
              }
            } else if (callbacks != null) {
              return callbacks.failure(_this, "Unable to parse response");
            }
          };
        })(this),
        failure: (function(_this) {
          return function(error, statusCode) {
            if (callbacks != null) {
              return callbacks.failure(_this, error);
            }
          };
        })(this)
      };
      return request.execute(executeCallbacks, false);
    } catch (_error) {
      error = _error;
      return callbacks.failure(this, error);
    }
  };


  /** Execute count aggregation of specified query on current bucket.
  Query that passed as nextQuery in success callback of {@link #executeQuery}, is not
  supported, callbacks.failure will be fired in this case.
  
  @param {KiiQuery} query to be executed. If null, the operation will be same as {@link #count}.
  @param {Object} [callbacks] An object with callback methods defined.
  @param {Method} callbacks.success The callback method to call on a successful query request.
  @param {Method} callbacks.failure The callback method to call on a failed query request.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a KiiBucket instance which this method was called on.</li>
          <li>params[1] is a KiiQuery instance.</li>
          <li>params[2] is an integer count result. </li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiBucket instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var bucket = . . .; // a KiiBucket
  var queryObject = . . .; // a KiiQuery
  
  // define the callbacks
  var callbacks = {
      success: function(bucket, query, count) {
          // do something with the results
      },
  
      failure: function(bucket, errorString) {
          // error happened.
      }
  };
  
  bucket.countWithQuery(queryObject, callbacks);
  
  // example to use Promise
  var bucket = . . .; // a KiiBucket
  var queryObject = . . .; // a KiiQuery
  
  bucket.countWithQuery(queryObject, callbacks).then(
      function(params) {
          var bucket = params[0];
          var query = params[1];
          var count = params[2];
          // do something with the results
      },
      function(error) {
          var bucket = error.target;
          var errorString = error.message;
          // error happened.
      }
  );
   */

  KiiBucket.prototype.countWithQuery = function(query, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var countWithQueryCallbacks;
        countWithQueryCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._countWithQueryUsingCallbacks(query, countWithQueryCallbacks);
      };
    })(this));
  };

  KiiBucket.prototype._countWithQueryUsingCallbacks = function(query, callbacks) {
    var data, executeCallbacks, path, request;
    path = this._generatePath() + "/query";
    data = {};
    if (query != null) {
      data = query._dictValue();
    } else {
      data.bucketQuery = {
        "clause": root.KiiQuery._emptyDictValue()
      };
      query = root.KiiQuery.queryWithClause();
    }
    data.bucketQuery.aggregations = [
      {
        "type": "COUNT",
        "putAggregationInto": "count_field"
      }
    ];
    request = this._getRequest({
      path: path,
      withApp: true
    });
    request.setMethod("POST");
    request.setContentType("application/vnd.kii.QueryRequest+json");
    request.setData(data);
    executeCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          var count;
          if (statusCode < 300 && statusCode >= 200) {
            count = data.aggregations.count_field;
            if (callbacks != null) {
              return callbacks.success(_this, query, count);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(executeCallbacks, false);
  };


  /** Execute count aggregation of all clause query on current bucket.
  @param {Object} [callbacks] An object with callback methods defined.
  @param {Method} callbacks.success The callback method to call on a successful query request.
  @param {Method} callbacks.failure The callback method to call on a failed query request.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a KiiBucket instance which this method was called on.</li>
          <li>params[1] is a KiiQuery instance.</li>
          <li>params[2] is an integer count result. </li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiBucket instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var bucket = . . .; // a KiiBucket
  // define the callbacks
  var callbacks = {
      success: function(bucket, query, count) {
          // do something with the results
      },
  
      failure: function(bucket, errorString) {
          // error happened.
      }
  };
  
  bucket.count(callbacks);
  
  // example to use Promise
  var bucket = . . .; // a KiiBucket
  var queryObject = . . .; // a KiiQuery
  
  bucket.count().then(
      function(params) {
          var bucket = params[0];
          var count = params[2];
          // do something with the results
      },
      function(error) {
          var bucket = error.target;
          var errorString = error.message;
          // error happened.
      }
  );
   */

  KiiBucket.prototype.count = function(callbacks) {
    var all_query;
    all_query = root.KiiQuery.queryWithClause();
    return this.countWithQuery(all_query, callbacks);
  };


  /** Delete the given bucket from the server
  @name delete
  @memberOf root.KiiBucket#
  @function
  @param Object callbacks An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful query request
  @param {Method} callbacks.failure The callback method to call on a failed query request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(deletedBucket). deletedBucket is KiiBucket instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiBucket instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var bucket = . . .; // a KiiBucket
  bucket.delete({
      success: function(deletedBucket) {
          // do something with the result
      },
  
      failure: function(bucketToDelete, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var bucket = . . .; // a KiiBucket
  bucket.delete({
      success: function(deletedBucket) {
          // do something with the result
      },
  
      failure: function(bucketToDelete, anErrorString) {
          // do something with the error response
      }
  }).then(
      function(deletedBucket) {
        // do something with the result
      },
      function(error) {
        // do something with the error response
      }
  );
   */

  KiiBucket.prototype["delete"] = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var deleteCallbacks;
        deleteCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._deleteUsingCallbacks(deleteCallbacks);
      };
    })(this));
  };

  KiiBucket.prototype._deleteUsingCallbacks = function(callbacks) {
    var executeCallbacks, request;
    request = this._getRequest({
      path: this._generatePath(),
      withApp: true
    });
    request.setMethod("DELETE");
    executeCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (callbacks != null) {
            return callbacks.success(_this);
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(executeCallbacks, true);
  };

  function KiiBucket(bucketName, parent) {
    this.objectWithJSON = __bind(this.objectWithJSON, this);
    this._getHttpUri = __bind(this._getHttpUri, this);
    this._generatePath = __bind(this._generatePath, this);
    this._getRequest = __bind(this._getRequest, this);
    this._deleteUsingCallbacks = __bind(this._deleteUsingCallbacks, this);
    this["delete"] = __bind(this["delete"], this);
    this.count = __bind(this.count, this);
    this._countWithQueryUsingCallbacks = __bind(this._countWithQueryUsingCallbacks, this);
    this.countWithQuery = __bind(this.countWithQuery, this);
    this._executeQueryUsingCallbacks = __bind(this._executeQueryUsingCallbacks, this);
    this.executeQuery = __bind(this.executeQuery, this);
    this.acl = __bind(this.acl, this);
    this.createObjectWithID = __bind(this.createObjectWithID, this);
    this.createObjectWithType = __bind(this.createObjectWithType, this);
    this.createObject = __bind(this.createObject, this);
    this._getQualifiedBucketName = __bind(this._getQualifiedBucketName, this);
    this._setBucketName = __bind(this._setBucketName, this);
    this.getBucketName = __bind(this.getBucketName, this);
    this.getThing = __bind(this.getThing, this);
    this.getGroup = __bind(this.getGroup, this);
    this.getUser = __bind(this.getUser, this);
    if (!KiiUtilities._isNonEmptyString(bucketName)) {
      throw root.InvalidArgumentException('Specified bucket name is null or empty.');
    }
    this._bucketName = bucketName;
    if (parent != null) {
      if (parent instanceof root.KiiGroup) {
        this._group = parent;
      } else if (parent instanceof root.KiiUser) {
        this._user = parent;
      } else if (parent instanceof root.KiiThing) {
        this._thing = parent;
      }
    }
  }

  KiiBucket._bucketWithName = function(bucketName, parent) {
    var bucket;
    bucket = new root.KiiBucket(bucketName, parent);
    return bucket;
  };

  KiiBucket.prototype._getRequest = function(spec) {
    var path, request, withApp;
    path = spec.path;
    withApp = spec.withApp;
    request = new KiiRequest(path, withApp);
    return request;
  };

  KiiBucket.prototype._generatePath = function() {
    var path;
    if (this._user != null) {
      path = "/users/" + (this._user.getUUID()) + "/buckets/" + (this._getQualifiedBucketName());
    } else if (this._group != null) {
      path = "/groups/" + (this._group.getUUID()) + "/buckets/" + (this._getQualifiedBucketName());
    } else if (this._thing != null) {
      path = "/things/" + (this._thing.getThingID()) + "/buckets/" + (this._getQualifiedBucketName());
    } else {
      path = "/buckets/" + (this._getQualifiedBucketName());
    }
    return path;
  };

  KiiBucket.prototype._getHttpUri = function() {
    return "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/" + (this._generatePath());
  };

  KiiBucket.prototype.objectWithJSON = function(json) {
    var newobject;
    newobject = this.createObject();
    newobject._updateWithJSON(json);
    return newobject;
  };

  return KiiBucket;

})();

root.KiiEncryptedBucket = (function(_super) {
  __extends(KiiEncryptedBucket, _super);

  function KiiEncryptedBucket(bucketName, parent) {
    this._getQualifiedBucketName = __bind(this._getQualifiedBucketName, this);
    if (!KiiUtilities._isNonEmptyString(bucketName)) {
      throw root.InvalidArgumentException('Specified bucket name is null or empty.');
    }
    if (root.KiiEncryptedBucket._isEncrypted(bucketName)) {
      KiiEncryptedBucket.__super__.constructor.call(this, bucketName.replace("CRYPTO:", ""), parent);
    } else {
      KiiEncryptedBucket.__super__.constructor.call(this, bucketName, parent);
    }
  }

  KiiEncryptedBucket.prototype._getQualifiedBucketName = function() {
    return "CRYPTO:" + this._bucketName;
  };

  KiiEncryptedBucket._bucketWithName = function(bucketName, parent) {
    var bucket;
    bucket = new root.KiiEncryptedBucket(bucketName, parent);
    return bucket;
  };

  KiiEncryptedBucket._isEncrypted = function(bucketName) {
    var isEncrypted;
    isEncrypted = bucketName.indexOf("CRYPTO:") === 0;
    return isEncrypted;
  };

  return KiiEncryptedBucket;

})(root.KiiBucket);

root.KiiEncryptedBucketWithToken = (function(_super) {
  __extends(KiiEncryptedBucketWithToken, _super);

  function KiiEncryptedBucketWithToken(bucketName, parent, token) {
    this.acl = __bind(this.acl, this);
    this.createObjectWithID = __bind(this.createObjectWithID, this);
    this.createObjectWithType = __bind(this.createObjectWithType, this);
    this.createObject = __bind(this.createObject, this);
    this._getRequest = __bind(this._getRequest, this);
    KiiEncryptedBucketWithToken.__super__.constructor.call(this, bucketName, parent);
    this._authToken = token;
  }

  KiiEncryptedBucketWithToken.prototype._getRequest = function(spec) {
    var request;
    request = KiiEncryptedBucketWithToken.__super__._getRequest.call(this, spec);
    request.setAdminToken(this._authToken);
    return request;
  };

  KiiEncryptedBucketWithToken.prototype.createObject = function() {
    return root.KiiObjectWithToken.objectWithBucket(this, null, this._authToken);
  };

  KiiEncryptedBucketWithToken.prototype.createObjectWithType = function(type) {
    return root.KiiObjectWithToken.objectWithBucket(this, type, this._authToken);
  };

  KiiEncryptedBucketWithToken.prototype.createObjectWithID = function(id) {
    return root.KiiObjectWithToken.objectWithID(this, id, this._authToken);
  };

  KiiEncryptedBucketWithToken.prototype.acl = function() {
    var acl;
    acl = new root.KiiACLWithToken(this, this._authToken);
    return acl;
  };

  return KiiEncryptedBucketWithToken;

})(root.KiiEncryptedBucket);

root.KiiBucketWithToken = (function(_super) {
  __extends(KiiBucketWithToken, _super);

  function KiiBucketWithToken(bucketName, parent, token) {
    this.acl = __bind(this.acl, this);
    this.createObjectWithID = __bind(this.createObjectWithID, this);
    this.createObjectWithType = __bind(this.createObjectWithType, this);
    this.createObject = __bind(this.createObject, this);
    this._getRequest = __bind(this._getRequest, this);
    KiiBucketWithToken.__super__.constructor.call(this, bucketName, parent);
    this._authToken = token;
  }

  KiiBucketWithToken.prototype._getRequest = function(spec) {
    var request;
    request = KiiBucketWithToken.__super__._getRequest.call(this, spec);
    request.setAdminToken(this._authToken);
    return request;
  };

  KiiBucketWithToken.prototype.createObject = function() {
    return root.KiiObjectWithToken.objectWithBucket(this, null, this._authToken);
  };

  KiiBucketWithToken.prototype.createObjectWithType = function(type) {
    return root.KiiObjectWithToken.objectWithBucket(this, type, this._authToken);
  };

  KiiBucketWithToken.prototype.createObjectWithID = function(id) {
    return root.KiiObjectWithToken.objectWithID(this, id, this._authToken);
  };

  KiiBucketWithToken.prototype.acl = function() {
    var acl;
    acl = new root.KiiACLWithToken(this, this._authToken);
    return acl;
  };

  return KiiBucketWithToken;

})(root.KiiBucket);


/**
    @class Represents a KiiGroup object
    @exports root.KiiGroup as KiiGroup
 */

root.KiiGroup = (function() {
  KiiGroup.prototype._getAddMembers = function() {
    return this._addMembers;
  };

  KiiGroup.prototype._getRemoveMembers = function() {
    return this._removeMembers;
  };

  function KiiGroup() {
    this._setAuthToken = __bind(this._setAuthToken, this);
    this._getHttpURI = __bind(this._getHttpURI, this);
    this._listTopicsUsingCallbacks = __bind(this._listTopicsUsingCallbacks, this);
    this.listTopics = __bind(this.listTopics, this);
    this.topicWithName = __bind(this.topicWithName, this);
    this._setOwnerFromContext = __bind(this._setOwnerFromContext, this);
    this._userWithID = __bind(this._userWithID, this);
    this._getRequest = __bind(this._getRequest, this);
    this._updateWithJSON = __bind(this._updateWithJSON, this);
    this._getOwnerUsingCallbacks = __bind(this._getOwnerUsingCallbacks, this);
    this.getOwner = __bind(this.getOwner, this);
    this._deleteUsingCallbacks = __bind(this._deleteUsingCallbacks, this);
    this["delete"] = __bind(this["delete"], this);
    this._refreshUsingCallbacks = __bind(this._refreshUsingCallbacks, this);
    this.refresh = __bind(this.refresh, this);
    this._saveWithOwnerUsingCallbacks = __bind(this._saveWithOwnerUsingCallbacks, this);
    this.saveWithOwner = __bind(this.saveWithOwner, this);
    this._saveUsingCallbacks = __bind(this._saveUsingCallbacks, this);
    this.save = __bind(this.save, this);
    this._changeGroupNameUsingCallbacks = __bind(this._changeGroupNameUsingCallbacks, this);
    this.changeGroupName = __bind(this.changeGroupName, this);
    this._changeOwner = __bind(this._changeOwner, this);
    this._saveMembers = __bind(this._saveMembers, this);
    this._getMemberListUsingCallbacks = __bind(this._getMemberListUsingCallbacks, this);
    this.getMemberList = __bind(this.getMemberList, this);
    this._removeMember = __bind(this._removeMember, this);
    this._addMember = __bind(this._addMember, this);
    this.removeUser = __bind(this.removeUser, this);
    this.addUser = __bind(this.addUser, this);
    this.encryptedBucketWithName = __bind(this.encryptedBucketWithName, this);
    this.bucketWithName = __bind(this.bucketWithName, this);
    this.objectURI = __bind(this.objectURI, this);
    this._setOwner = __bind(this._setOwner, this);
    this.getCachedOwner = __bind(this.getCachedOwner, this);
    this._setName = __bind(this._setName, this);
    this.getName = __bind(this.getName, this);
    this.getID = __bind(this.getID, this);
    this._setUUID = __bind(this._setUUID, this);
    this.getUUID = __bind(this.getUUID, this);
    this._setAddMembers = __bind(this._setAddMembers, this);
    this._getRemoveMembers = __bind(this._getRemoveMembers, this);
    this._getAddMembers = __bind(this._getAddMembers, this);
    this._addMembers = {};
    this._removeMembers = {};
  }

  KiiGroup.prototype._setAddMembers = function(members) {
    var member, _i, _len, _results;
    if (members != null) {
      _results = [];
      for (_i = 0, _len = members.length; _i < _len; _i++) {
        member = members[_i];
        _results.push(this.addUser(member));
      }
      return _results;
    }
  };


  /** @deprecated Use {@link KiiGroup.getId} instead.
  Get the UUID of the given group, assigned by the server
  @returns {String}
   */

  KiiGroup.prototype.getUUID = function() {
    return this._uuid;
  };

  KiiGroup.prototype._setUUID = function(_uuid) {
    this._uuid = _uuid;
  };


  /** Get the ID of the current KiiGroup instance.
  @returns {String} Id of the group or null if the group has not saved to cloud.
   */

  KiiGroup.prototype.getID = function() {
    return this._uuid;
  };


  /** The name of this group
  @returns {String}
   */

  KiiGroup.prototype.getName = function() {
    return this._groupName;
  };

  KiiGroup.prototype._setName = function(_groupName) {
    this._groupName = _groupName;
  };


  /** Returns the owner of this group if this group holds the information of owner.
  
  Group will holds the information of owner when "saving group on cloud" or "retrieving group info/owner from cloud".
  The cache will not be shared among the different instances of KiiGroup.
  <UL>
  <LI>This API will not access to server.
  To update the group owner information on cloud, please call {@link KiiGroup#refresh} or {@link KiiGroup#getOwner}.
  </LI>
  <LI>This API does not return all the properties of the owner.
  To get all owner properties, {@link KiiUser#refresh} is necessary.</LI>
  </UL>
  @returns {KiiUser} KiiUser who owns this group, undefined if this group doesn't hold the information of owner yet.
  @link KiiGroup#getOwner
   */

  KiiGroup.prototype.getCachedOwner = function() {
    return this._owner;
  };

  KiiGroup.prototype._setOwner = function(_owner) {
    this._owner = _owner;
  };


  /** Get a specifically formatted string referencing the group
  
  <br><br>The group must exist in the cloud (have a valid UUID).
  @returns {String} A URI string based on the current group. null if a URI couldn't be generated.
  @example
  var group = . . .; // a KiiGroup
  var uri = group.objectURI();
   */

  KiiGroup.prototype.objectURI = function() {
    if (this._uuid != null) {
      return "kiicloud://groups/" + this._uuid;
    } else {
      return null;
    }
  };


  /** Register new group own by current user on Kii Cloud with specified ID.
  
  <br><br>If the group that has specified id already exists, registration will be failed.
  
  @param {String} groupID ID of the KiiGroup
  @param {String} groupName Name of the KiiGroup
  @param {Array} members An array of KiiUser objects to add to the group
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful register request
  @param {Method} callbacks.failure The callback method to call on a failed register request
  @return {Promise} return promise object.
        <ul>
          <li>fulfill callback function: function(theSavedGroup). theSavedGroup is KiiGroup instance.</li>
          <li>reject callback function: function(error). error is an Error instance.
            <ul>
              <li>error.target is the KiiGroup instance which this method was called on.</li>
              <li>error.message</li>
              <li>error.addMembersArray is array of KiiUser to be added as memebers of this group.</li>
              <li>error.removeMembersArray is array of KiiUser to be removed from the memebers list of this group.</li>
            </ul>
          </li>
        </ul>
  @example
  // example to use callbacks directly
  var members = [];
  members.push(KiiUser.userWithID("Member User Id"));
  KiiGroup.registerGroupWithID("Group ID", "Group Name", members, {
      success: function(theSavedGroup) {
          // do something with the saved group
      },
      failure: function(theGroup, anErrorString, addMembersArray, removeMembersArray) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var members = [];
  members.push(KiiUser.userWithID("Member User Id"));
  KiiGroup.registerGroupWithID("Group ID", "Group Name", members).then(
      function(theSavedGroup) {
          // do something with the saved group
      },
      function(error) {
          var theGroup = error.target;
          var anErrorString = error.message;
          var addMembersArray = error.addMembersArray;
          // do something with the error response
  });
   */

  KiiGroup.registerGroupWithID = function(groupID, groupName, members, callbacks) {
    return new Promise(function(resolve, reject) {
      var registerGroupWithIDCallbacks, _ref, _ref1;
      registerGroupWithIDCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success.apply(callbacks, arguments);
          }
          return resolve(arguments[0]);
        },
        failure: function() {
          var error;
          if (callbacks != null) {
            callbacks.failure.apply(callbacks, arguments);
          }
          error = KiiUtilities._Error(arguments[1], arguments[0]);
          error.addMembersArray = arguments[2];
          error.removeMembersArray = arguments[3];
          return reject(error);
        }
      };
      return KiiGroup._registerGroupWithIDUsingCallbacks((_ref = root.KiiUser.getCurrentUser()) != null ? _ref.getAccessToken() : void 0, groupID, groupName, (_ref1 = root.Kii.getCurrentUser()) != null ? _ref1.getID() : void 0, members, registerGroupWithIDCallbacks);
    });
  };

  KiiGroup._registerGroupWithIDUsingCallbacks = function(token, groupID, groupName, owner, members, callbacks) {
    var data, i, member, memberIDs, requestCallbacks, url, wrapper, xhr, _i, _len;
    if (!KiiUtilities._isNonEmptyString(groupID)) {
      callbacks.failure(null, "groupID is null or empty", members, null);
      return;
    }
    if (!KiiUtilities._validateGroupID(groupID)) {
      callbacks.failure(null, "invalid groupID : " + groupID, members, null);
      return;
    }
    if (!KiiUtilities._isNonEmptyString(groupName)) {
      callbacks.failure(null, "groupName is null or empty", members, null);
      return;
    }
    if (owner == null) {
      callbacks.failure(null, "owner is null", members, null);
      return;
    }
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + "/groups/" + groupID;
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("PUT", url);
    xhr = wrapper.xhr;
    wrapper.setKiiHeaders();
    wrapper.setAuthToken(token);
    wrapper.setContentType("application/vnd.kii.GroupCreationRequest+json");
    data = {};
    data.name = groupName;
    data.owner = owner;
    if ((members != null) && members.length > 0) {
      memberIDs = [];
      for (i = _i = 0, _len = members.length; _i < _len; i = ++_i) {
        member = members[i];
        memberIDs.push(member.getID());
      }
      data.members = memberIDs;
    }
    requestCallbacks = {
      success: function() {
        var group;
        try {
          group = KiiGroup.groupWithNameAndMembers(groupName, members);
          group._setUUID(groupID);
          return callbacks.success(group);
        } catch (_error) {
          return callbacks.failure(null, wrapper.getErrorString("failed to register group."));
        }
      },
      failure: function() {
        var errString;
        errString = wrapper.getErrorString("failed to register group.");
        return callbacks.failure(null, errString, members, null);
      }
    };
    return wrapper.sendData(JSON.stringify(data), requestCallbacks);
  };


  /** Creates a reference to a bucket for this group
  
  <br><br>The bucket will be created/accessed within this group's scope
  @param {String} bucketName The name of the bucket the user should create/access
  @returns {KiiBucket} A working KiiBucket object
  @example
  var group = . . .; // a KiiGroup
  var bucket = group.bucketWithName("myBucket");
   */

  KiiGroup.prototype.bucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiBucket(bucketName, this);
    return bucket;
  };


  /** Creates a reference to a encrypted bucket for this group
  
  <br><br>The bucket will be created/accessed within this group's scope
  @param {String} bucketName The name of the bucket the user should create/access
  @returns {KiiEncryptedBucket} A working KiiEncryptedBucket object
  @example
  var group = . . .; // a KiiGroup
  var bucket = group.encryptedBucketWithName("myBucket");
   */

  KiiGroup.prototype.encryptedBucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiEncryptedBucket(bucketName, this);
    return bucket;
  };


  /** Adds a user to the given group
  
  <br><br>This method will NOT access the server immediately. You must call save to add the user on the server. This allows multiple users to be added/removed before calling save.
  @param {KiiUser} member The user to be added to the group
  @example
  var user = . . .; // a KiiUser
  var group = . . .; // a KiiGroup
  group.addUser(user);
  group.save(callbacks);
   */

  KiiGroup.prototype.addUser = function(member) {
    var userID;
    if (member == null) {
      root.Kii.logger("Passed member is null");
      return;
    }
    if (member.getUUID() == null) {
      root.Kii.logger("Passed member ID is null");
      return;
    }
    userID = member.getUUID();
    if (!(userID in this._addMembers)) {
      this._addMembers[userID] = member;
    }
    if (userID in this._removeMembers) {
      return delete this._removeMembers[userID];
    }
  };


  /** Removes a user from the given group
  
  <br><br>This method will NOT access the server immediately. You must call save to remove the user on the server. This allows multiple users to be added/removed before calling save.
  @param {KiiUser} member The user to be added to the group
  @example
  var user = . . .; // a KiiUser
  var group = . . .; // a KiiGroup
  group.removeUser(user);
  group.save(callbacks);
   */

  KiiGroup.prototype.removeUser = function(member) {
    var userID;
    if (member == null) {
      root.Kii.logger("Passed member is null");
      return;
    }
    if (member.getUUID() == null) {
      root.Kii.logger("Passed member uuid is null");
      return;
    }
    userID = member.getUUID();
    if (!(userID in this._removeMembers)) {
      this._removeMembers[userID] = member;
    }
    if (userID in this._addMembers) {
      return delete this._addMembers[userID];
    }
  };

  KiiGroup.prototype._addMember = function(member, callback) {
    var memberCallbacks, request;
    root.Kii.logger("Adding member " + (member.getUUID()) + " to group " + this._groupName);
    request = this._getRequest({
      path: "/groups/" + this._uuid + "/members/" + (member.getUUID()),
      withApp: true
    });
    request.setMethod("PUT");
    memberCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          delete _this._addMembers[member.getUUID()];
          return _this._saveMembers(callback);
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          var addMembersArray, removeMembersArray, userID;
          addMembersArray = (function() {
            var _ref, _results;
            _ref = this._addMembers;
            _results = [];
            for (userID in _ref) {
              member = _ref[userID];
              _results.push(member);
            }
            return _results;
          }).call(_this);
          removeMembersArray = (function() {
            var _ref, _results;
            _ref = this._removeMembers;
            _results = [];
            for (userID in _ref) {
              member = _ref[userID];
              _results.push(member);
            }
            return _results;
          }).call(_this);
          return callback.failure(_this, error, addMembersArray, removeMembersArray);
        };
      })(this)
    };
    return request.execute(memberCallbacks, false);
  };

  KiiGroup.prototype._removeMember = function(member, callback) {
    var removeCallbacks, request;
    root.Kii.logger("Removing member " + (member.getUUID()) + " to group " + this._groupName);
    request = this._getRequest({
      path: "/groups/" + this._uuid + "/members/" + (member.getUUID()),
      withApp: true
    });
    request.setMethod("DELETE");
    removeCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          delete _this._getRemoveMembers()[member.getUUID()];
          return _this._saveMembers(callback);
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          var addMembersArray, removeMembersArray, userID;
          addMembersArray = (function() {
            var _ref, _results;
            _ref = this._addMembers;
            _results = [];
            for (userID in _ref) {
              member = _ref[userID];
              _results.push(member);
            }
            return _results;
          }).call(_this);
          removeMembersArray = (function() {
            var _ref, _results;
            _ref = this._removeMembers;
            _results = [];
            for (userID in _ref) {
              member = _ref[userID];
              _results.push(member);
            }
            return _results;
          }).call(_this);
          return callback.failure(_this, error, addMembersArray, removeMembersArray);
        };
      })(this)
    };
    return request.execute(removeCallbacks, false);
  };


  /** Gets a list of all current members of a group
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful list request
  @param {Method} callbacks.failure The callback method to call on a failed list request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a KiiGroup instance which this method was called on.</li>
          <li>params[1] is array of memeber KiiUser instances.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiGroup instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var group = . . .; // a KiiGroup
  group.getMemberList({
      success: function(theGroup, memberList) {
          // do something with the result
          for(var i=0; i&lt;memberList.length; i++){
              var u = memberList[i]; // a KiiUser within the group
          }
      },
  
      failure: function(theGroup, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var group = . . .; // a KiiGroup
  group.getMemberList().then(
      function(params) {
          var theGroup = params[0];
          var memberlist = params[1];
          // do something with the result
          for(var i=0; i&lt;memberList.length; i++){
              var u = memberList[i]; // a KiiUser within the group
          }
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiGroup.prototype.getMemberList = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var getMemberListCallbacks;
        getMemberListCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._getMemberListUsingCallbacks(getMemberListCallbacks);
      };
    })(this));
  };

  KiiGroup.prototype._getMemberListUsingCallbacks = function(callbacks) {
    var listCallbacks, request;
    root.Kii.logger("Getting member list for group " + this._groupName);
    request = this._getRequest({
      path: "/groups/" + this._uuid + "/members",
      withApp: true
    });
    request.setAccept("application/vnd.kii.MembersRetrievalResponse+json");
    listCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          var member, memberList, members, _i, _len;
          if (statusCode < 300 && statusCode >= 200) {
            memberList = [];
            members = data['members'];
            for (_i = 0, _len = members.length; _i < _len; _i++) {
              member = members[_i];
              memberList.push(_this._userWithID(member.userID));
            }
            if (callbacks != null) {
              return callbacks.success(_this, memberList);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to get member list of group");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(listCallbacks, false);
  };

  KiiGroup.prototype._saveMembers = function(callbacks) {
    var addMemberKeys, removeMemberKeys;
    addMemberKeys = Object.keys(this._addMembers);
    removeMemberKeys = Object.keys(this._removeMembers);
    if (addMemberKeys.length === 0 && removeMemberKeys.length === 0) {
      callbacks.success(this);
    }
    if (addMemberKeys.length > 0) {
      this._addMember(this._addMembers[addMemberKeys[0]], callbacks);
      return;
    }
    if (removeMemberKeys.length > 0) {
      this._removeMember(this._removeMembers[removeMemberKeys[0]], callbacks);
    }
  };

  KiiGroup.prototype._changeOwner = function(owner, callbacks) {
    var data, request, saveCallbacks;
    request = this._getRequest({
      path: "/groups/" + this._uuid + "/owner",
      withApp: true
    });
    request.setContentType("application/vnd.kii.GroupOwnerChangeRequest+json");
    request.setMethod("PUT");
    data = {};
    data.owner = owner;
    request.setData(data);
    saveCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            return callbacks.success(_this);
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(saveCallbacks, false);
  };


  /** Updates the group name on the server
  
  @param {String} newName A String of the desired group name
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful save request
  @param {Method} callbacks.failure The callback method to call on a failed save request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theRenamedGroup). theRenamedGroup is KiiGroup instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiGroup instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var group = . . .; // a KiiGroup
  group.changeGroupName("myNewName", {
      success: function(theRenamedGroup) {
          // do something with the group
      },
  
      failure: function(theGroup, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var group = . . .; // a KiiGroup
  group.changeGroupName("myNewName").then(
      function(theRenamedGroup) {
          // do something with the group
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiGroup.prototype.changeGroupName = function(newName, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var changeGroupNameCallbacks;
        changeGroupNameCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._changeGroupNameUsingCallbacks(newName, changeGroupNameCallbacks);
      };
    })(this));
  };

  KiiGroup.prototype._changeGroupNameUsingCallbacks = function(newName, callbacks) {
    var request, saveCallbacks;
    root.Kii.logger("Saving group: " + this.name);
    if (this._uuid != null) {
      request = this._getRequest({
        path: "/groups/" + this._uuid + "/name",
        withApp: true
      });
      request.setContentType("text/plain");
      request.setMethod("PUT");
      request.setData(newName);
      saveCallbacks = {
        success: (function(_this) {
          return function(data, statusCode) {
            if (statusCode < 300 && statusCode >= 200) {
              _this._setName(newName);
              if (callbacks != null) {
                return callbacks.success(_this);
              }
            } else if (callbacks != null) {
              return callbacks.failure(_this, "Unable to change group name - invalid response");
            }
          };
        })(this),
        failure: (function(_this) {
          return function(error, statusCode) {
            if (callbacks != null) {
              return callbacks.failure(_this, error);
            }
          };
        })(this)
      };
      return request.execute(saveCallbacks, true);
    } else {
      return callbacks.failure(this, "Invalid group. Save the group on the server before updating the name.");
    }
  };


  /** Saves the latest group values to the server
  
  <br><br>If the group does not yet exist, it will be created. If the group already exists, the members that have changed will be updated accordingly. If the group already exists and there is no updates of members, it will allways succeed but does not execute update. To change the name of group, use {@link #changeGroupName}.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful save request
  @param {Method} callbacks.failure The callback method to call on a failed save request
  @return {Promise} return promise object.
        <ul>
          <li>fulfill callback function: function(theSavedGroup). theSavedGroup is KiiGroup instance.</li>
          <li>reject callback function: function(error). error is an Error instance.
            <ul>
              <li>error.target is the KiiGroup instance which this method was called on.</li>
              <li>error.message</li>
              <li>error.addMembersArray is array of KiiUser to be added as memebers of this group.</li>
              <li>error.removeMembersArray is array of KiiUser to be removed from the memebers list of this group.</li>
            </ul>
          </li>
        </ul>
  @example
  // example to use callbacks directly
  var group = . . .; // a KiiGroup
  group.save({
      success: function(theSavedGroup) {
          // do something with the saved group
      },
  
      failure: function(theGroup, anErrorString, addMembersArray, removeMembersArray) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var group = . . .; // a KiiGroup
  group.save().then(
      function(theSavedGroup) {
          // do something with the saved group
      },
      function(error) {
          var theGroup = error.target;
          var anErrorString = error.message;
          var addMembersArray = error.addMembersArray;
          var removeMembersArray = error.removeMembersArray;
          // do something with the error response
  });
   */

  KiiGroup.prototype.save = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var saveCallbacks;
        saveCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            var error;
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            error = KiiUtilities._Error(arguments[1], _this);
            error.addMembersArray = arguments[2];
            error.removeMembersArray = arguments[3];
            return reject(error);
          }
        };
        return _this._saveUsingCallbacks(saveCallbacks);
      };
    })(this));
  };

  KiiGroup.prototype._saveUsingCallbacks = function(callbacks) {
    var data, request, saveCallbacks;
    root.Kii.logger("Saving group: " + this.name);
    if (this._uuid == null) {
      request = this._getRequest({
        path: "/groups",
        withApp: true
      });
      request.setContentType("application/vnd.kii.GroupCreationRequest+json");
      request.setMethod("POST");
      data = {};
      if (this._groupName != null) {
        data.name = this._groupName;
      }
      this._setOwnerFromContext(data);
      request.setData(data);
      saveCallbacks = {
        success: (function(_this) {
          return function(data, statusCode) {
            if (statusCode < 300 && statusCode >= 200) {
              _this._setUUID(data.groupID);
              return _this._saveMembers(callbacks);
            }
          };
        })(this),
        failure: (function(_this) {
          return function(error, statusCode) {
            var addMembersArray, member, removeMembersArray, userID;
            if (callbacks != null) {
              addMembersArray = (function() {
                var _ref, _results;
                _ref = this._addMembers;
                _results = [];
                for (userID in _ref) {
                  member = _ref[userID];
                  _results.push(member);
                }
                return _results;
              }).call(_this);
              removeMembersArray = (function() {
                var _ref, _results;
                _ref = this._removeMembers;
                _results = [];
                for (userID in _ref) {
                  member = _ref[userID];
                  _results.push(member);
                }
                return _results;
              }).call(_this);
              return callbacks.failure(_this, error, addMembersArray, removeMembersArray);
            }
          };
        })(this)
      };
      return request.execute(saveCallbacks, false);
    } else {
      return this._saveMembers(callbacks);
    }
  };


  /** Saves the latest group values to the server with specified owner.
  This method can be used only by the group owner or app admin.
  
  <br><br>If the group does not yet exist, it will be created. If the group already exists, the members and owner that have changed will be updated accordingly. If the group already exists and there is no updates of members and owner, it will allways succeed but does not execute update. To change the name of group, use {@link #changeGroupName}.
  @param {String} user id of owner
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful save request
  @param {Method} callbacks.failure The callback method to call on a failed save request
  @return {Promise} return promise object.
        <ul>
          <li>fulfill callback function: function(theSavedGroup). theSavedGroup is KiiGroup instance.</li>
          <li>reject callback function: function(error). error is an Error instance.
            <ul>
              <li>error.target is the KiiGroup instance which this method was called on.</li>
              <li>error.message</li>
              <li>error.addMembersArray is array of KiiUser to be added as memebers of this group.</li>
              <li>error.removeMembersArray is array of KiiUser to be removed from the memebers list of this group.</li>
            </ul>
          </li>
        </ul>
  @example
  // example to use callbacks directly
  var group = . . .; // a KiiGroup
  group.saveWithOwner("UserID of owner", {
      success: function(theSavedGroup) {
          // do something with the saved group
      },
  
      failure: function(theGroup, anErrorString, addMembersArray, removeMembersArray) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var group = . . .; // a KiiGroup
  group.saveWithOwner("UserID of owner").then(
      function(theSavedGroup) {
          // do something with the saved group
      },
      function(error) {
          var theGroup = error.target;
          var anErrorString = error.message;
          var addMembersArray = error.addMembersArray;
          var removeMembersArray = error.removeMembersArray;
          // do something with the error response
  });
   */

  KiiGroup.prototype.saveWithOwner = function(owner, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var saveCallbacks;
        saveCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            var error;
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            error = KiiUtilities._Error(arguments[1], _this);
            error.addMembersArray = arguments[2];
            error.removeMembersArray = arguments[3];
            return reject(error);
          }
        };
        return _this._saveWithOwnerUsingCallbacks(owner, saveCallbacks);
      };
    })(this));
  };

  KiiGroup.prototype._saveWithOwnerUsingCallbacks = function(owner, callbacks) {
    var data, request, saveCallbacks, saveMemberCallbacks;
    if (this._uuid == null) {
      request = this._getRequest({
        path: "/groups",
        withApp: true
      });
      request.setContentType("application/vnd.kii.GroupCreationRequest+json");
      request.setMethod("POST");
      data = {};
      if (this._groupName != null) {
        data.name = this._groupName;
      }
      data.owner = owner;
      request.setData(data);
      saveCallbacks = {
        success: (function(_this) {
          return function(data, statusCode) {
            if (statusCode < 300 && statusCode >= 200) {
              _this._setUUID(data.groupID);
              return _this._saveMembers(callbacks);
            }
          };
        })(this),
        failure: (function(_this) {
          return function(error, statusCode) {
            var addMembersArray, member, removeMembersArray, userID;
            if (callbacks != null) {
              addMembersArray = (function() {
                var _ref, _results;
                _ref = this._addMembers;
                _results = [];
                for (userID in _ref) {
                  member = _ref[userID];
                  _results.push(member);
                }
                return _results;
              }).call(_this);
              removeMembersArray = (function() {
                var _ref, _results;
                _ref = this._removeMembers;
                _results = [];
                for (userID in _ref) {
                  member = _ref[userID];
                  _results.push(member);
                }
                return _results;
              }).call(_this);
              return callbacks.failure(_this, error, addMembersArray, removeMembersArray);
            }
          };
        })(this)
      };
      return request.execute(saveCallbacks, false);
    } else {
      saveMemberCallbacks = {
        success: (function(_this) {
          return function(group) {
            return _this._changeOwner(owner, callbacks);
          };
        })(this),
        failure: (function(_this) {
          return function(group, error) {
            var addMembersArray, member, removeMembersArray, userID;
            addMembersArray = (function() {
              var _ref, _results;
              _ref = this._addMembers;
              _results = [];
              for (userID in _ref) {
                member = _ref[userID];
                _results.push(member);
              }
              return _results;
            }).call(_this);
            removeMembersArray = (function() {
              var _ref, _results;
              _ref = this._removeMembers;
              _results = [];
              for (userID in _ref) {
                member = _ref[userID];
                _results.push(member);
              }
              return _results;
            }).call(_this);
            return callbacks.failure(_this, error, addMembersArray, removeMembersArray);
          };
        })(this)
      };
      return this._saveMembers(saveMemberCallbacks);
    }
  };


  /** Updates the local group's data with the group data on the server
  
  <br><br>The group must exist on the server. Local data will be overwritten.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful refresh request
  @param {Method} callbacks.failure The callback method to call on a failed refresh request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theRefreshedGroup). theRefreshedGroup is KiiGroup instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiGroup instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var group = . . .; // a KiiGroup
  group.refresh({
      success: function(theRefreshedGroup) {
          // do something with the refreshed group
      },
  
      failure: function(theGroup, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var group = . . .; // a KiiGroup
  group.refresh().then(
      function(theRefreshedGroup) {
          // do something with the refreshed group
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiGroup.prototype.refresh = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var refreshCallbacks;
        refreshCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._refreshUsingCallbacks(refreshCallbacks);
      };
    })(this));
  };

  KiiGroup.prototype._refreshUsingCallbacks = function(callbacks) {
    var refreshCallbacks, request;
    root.Kii.logger("Refreshing group: " + this._groupName);
    request = new this._getRequest({
      path: "/groups/" + this._uuid,
      withApp: true
    });
    request.setAccept("application/vnd.kii.GroupRetrievalResponse+json");
    refreshCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          _this._updateWithJSON(data);
          if (callbacks != null) {
            return callbacks.success(_this);
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(refreshCallbacks, false);
  };


  /** Delete the group from the server
  @name delete
  @memberOf root.KiiGroup#
  @function
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful delete request
  @param {Method} callbacks.failure The callback method to call on a failed delete request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theDeletedGroup). theDeletedGroup is KiiGroup instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiGroup instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var group = . . .; // a KiiGroup
  group.delete({
      success: function(theDeletedGroup) {
          // do something
      },
  
      failure: function(theGroup, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var group = . . .; // a KiiGroup
  group.delete({
      success: function(theDeletedGroup) {
      },
  
      failure: function(theGroup, anErrorString) {
      }
  }).then(
      function(theDeletedGroup) {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiGroup.prototype["delete"] = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var deleteCallbacks;
        deleteCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._deleteUsingCallbacks(deleteCallbacks);
      };
    })(this));
  };

  KiiGroup.prototype._deleteUsingCallbacks = function(callbacks) {
    var deleteCallbacks, request;
    root.Kii.logger("Deleting group: " + this._groupName);
    request = this._getRequest({
      path: "/groups/" + this._uuid,
      withApp: true
    });
    request.setMethod("DELETE");
    deleteCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_this);
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(deleteCallbacks, true);
  };


  /** Gets the owner of the associated group
  
  This API does not return all the properties of the owner.
  To get all owner properties, {@link KiiUser#refresh} is necessary.
  
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful add request
  @param {Method} callbacks.failure The callback method to call on a failed add request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is the KiiGroup instance which this method was called on.</li>
          <li>params[1] is an group owner KiiUser instances.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiGroup instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var group = . . .; // a KiiGroup
  group.getOwner({
      success: function(theGroup, theOwner) {
          // do something
      },
      failure: function(theGroup, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var group = . . .; // a KiiGroup
  group.getOwner().then(
      function(params) {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiGroup.prototype.getOwner = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var getOwnerCallbacks;
        getOwnerCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._getOwnerUsingCallbacks(getOwnerCallbacks);
      };
    })(this));
  };

  KiiGroup.prototype._getOwnerUsingCallbacks = function(callbacks) {
    root.Kii.logger("Getting owner of group " + this._groupName);
    return this.refresh({
      success: (function(_this) {
        return function(group) {
          if (callbacks != null) {
            return callbacks.success(group, group.getCachedOwner());
          }
        };
      })(this),
      failure: (function(_this) {
        return function(group, error) {
          if (callbacks != null) {
            return callbacks.failure(group, error);
          }
        };
      })(this)
    });
  };


  /** Creates a reference to a group with the given name
  <br><br>
  <b>Note:</b>
  Returned instance from this API can not operate existing KiiGroup.<br>
  If you want to operate existing KiiGroup, please use {@link KiiGroup.groupWithURI}.
  
  @param {String} groupName An application-specific group name
  @returns {KiiGroup} A new KiiGroup reference
  @example
  var group = new KiiGroup.groupWithName("myGroup");
   */

  KiiGroup.groupWithName = function(groupName) {
    return root.KiiGroup.groupWithNameAndMembers(groupName, null);
  };


  /** Creates a reference to a group with the given name and a list of default members
  <br><br>
  <b>Note:</b>
  Returned instance from this API can not operate existing KiiGroup.<br>
  If you want to operate existing KiiGroup, please use {@link KiiGroup.groupWithURI}.
  
  @param {String} groupName An application-specific group name
  @param {Array} members An array of KiiUser objects to add to the group
  @returns {KiiGroup} A new KiiGroup reference
  @example
  var group = new KiiGroup.groupWithName("myGroup", members);
   */

  KiiGroup.groupWithNameAndMembers = function(groupName, members) {
    var group;
    group = new root.KiiGroup();
    group._setName(groupName);
    group._setAddMembers(members);
    return group;
  };


  /** Instantiate KiiGroup that refers to existing group which has specified ID.
  You have to specify the ID of existing KiiGroup. Unlike KiiObject,
  you can not assign ID in the client side.<br>
  <b>NOTE</b>: This API does not access to the server.
  After instantiation, call {@link KiiGroup#refresh} to fetch the properties.
  @param groupId ID of the KiiGroup to instantiate.
  @return instance of KiiGroup.
  @throws {InvalidArgumentException} when passed groupID is empty or null.
  @example
  var group = new KiiUser.groupWithID("__GROUP_ID__");
   */

  KiiGroup.groupWithID = function(groupID) {
    var group;
    if ((groupID == null) || groupID === "") {
      throw new root.InvalidArgumentException('groupID should not null or empty');
    }
    group = new root.KiiGroup();
    group._setUUID(groupID);
    return group;
  };


  /** Generate a new KiiGroup based on a given URI
  <br><br>
  <b>Note:</b>
  Returned instance from this API can operate existing KiiGroup.<br>
  If you want to create a new KiiGroup, please use {@link KiiGroup.groupWithName}.
  
  @param {String} uri The URI of the group to be represented
  @returns {KiiGroup} A new KiiGroup with its parameters filled in from the URI
  @throws {InvalidURIException} If the URI given is invalid
  @example
  var group = new KiiGroup.groupWithURI("kiicloud://myuri");
   */

  KiiGroup.groupWithURI = function(uri) {
    var compLength, components, group, newURI;
    group = null;
    newURI = uri.substr("kiicloud://".length);
    components = newURI.split("/");
    compLength = components.length;
    if (compLength > 0) {
      group = new root.KiiGroup();
      group._setUUID(components[compLength - 1]);
    } else {
      throw new root.InvalidURIException;
    }
    return group;
  };

  KiiGroup._groupWithJSON = function(json) {
    var group;
    group = new root.KiiGroup();
    if (json.groupID != null) {
      group._setUUID(json.groupID);
    }
    if (json.name != null) {
      group._setName(json.name);
    }
    if (json.owner != null) {
      group._setOwner(root.KiiUser.userWithID(json.owner));
    }
    return group;
  };

  KiiGroup.prototype._updateWithJSON = function(json) {
    if (json.groupID != null) {
      this._setUUID(json.groupID);
    }
    if (json.name != null) {
      this._setName(json.name);
    } else {
      this._setName(null);
    }
    if (json.owner != null) {
      return this._setOwner(this._userWithID(json.owner));
    } else {
      return this._setOwner(null);
    }
  };

  KiiGroup.prototype._getRequest = function(spec) {
    var path, request, withApp;
    path = spec.path;
    withApp = spec.withApp;
    request = new KiiRequest(path, withApp);
    return request;
  };

  KiiGroup.prototype._userWithID = function(id) {
    var user;
    user = root.KiiUser.userWithID(id);
    return user;
  };

  KiiGroup.prototype._setOwnerFromContext = function(data) {
    if (root.Kii.getCurrentUser() != null) {
      this._owner = root.Kii.getCurrentUser();
      return data.owner = this._owner.getUUID();
    }
  };


  /**
  Instantiate topic belongs to this group.
  @param {String} topicName name of the topic. Must be a not empty string.
  @return {KiiTopic} topic instance.
   */

  KiiGroup.prototype.topicWithName = function(topicName) {
    var id, puri;
    if (typeof topicName !== "string" || topicName === "") {
      throw new root.InvalidArgumentException('topicName should not null or empty');
    }
    id = this.getID();
    if (!id) {
      throw 'can not instantiate topic from instance which doesn\'t have ID';
    }
    puri = this._getHttpURI();
    return new root.KiiTopic(puri, topicName);
  };


  /** Gets a list of topics in this group scope
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful list request
  @param {Method} callbacks.failure The callback method to call on a failed list request
  @param {String} [paginationKey] You can specify the pagination key with the nextPaginationKey passed by callbacks.success. If empty string or no string object is provided, this API regards no paginationKey specified.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(params). params is Array instance.
          <ul>
            <li>params[0] is array of KiiTopic instances.</li>
            <li>params[1] is string of nextPaginationKey.</li>
          </ul>
        </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.target is the KiiGroup instance which this method was called on. </li>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  var group = . . .; // a KiiGroup
  group.listTopics({
      success: function(topicList, nextPaginationKey) {
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              group.listTopics({
                  success: function(topicList, nextPaginationKey) {...},
                  failure: function(anErrorString) {...}
              }, nextPaginationKey);
          }
      },
      failure: function(anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use promise
  var group = . . .; // a KiiGroup
  group.listTopics().then(
      function(params) {
          var topicList = params[0];
          var nextPaginationKey = params[1];
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              group.listTopics(null, nextPaginationKey).then(
                  function(params) {...},
                  function(error) {...}
              );
          }
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiGroup.prototype.listTopics = function(callbacks, paginationKey) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var listTopicsCallbacks;
        listTopicsCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(arguments[0]);
          }
        };
        return _this._listTopicsUsingCallbacks(listTopicsCallbacks, paginationKey);
      };
    })(this));
  };

  KiiGroup.prototype._listTopicsUsingCallbacks = function(callbacks, paginationKey) {
    var listCallbacks, uri, wrapper;
    uri = "" + (this._getHttpURI()) + "/topics";
    if (typeof paginationKey === "string" && paginationKey !== "") {
      uri = uri + "?paginationKey=" + encodeURIComponent(paginationKey);
    }
    wrapper = KiiXHRWrapperFactory.createXHRWrapper('GET', uri);
    wrapper.setKiiHeaders();
    this._setAuthToken(wrapper);
    listCallbacks = {
      success: (function(_this) {
        return function() {
          var json, topic, topics, _i, _len, _ref;
          json = JSON.parse(wrapper.xhr.responseText);
          topics = [];
          _ref = json.topics;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            topic = _ref[_i];
            topics.push(_this.topicWithName(topic.topicID));
          }
          return callbacks != null ? callbacks.success(topics, (json.paginationKey === void 0 ? null : json.paginationKey)) : void 0;
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errObj, errString;
          errString = wrapper.getErrorString("list topics");
          errObj = KiiUtilities._Error(errString, _this);
          return callbacks != null ? callbacks.failure(errObj) : void 0;
        };
      })(this)
    };
    return wrapper.send(listCallbacks);
  };

  KiiGroup.prototype._getHttpURI = function() {
    return "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/groups/" + (this.getID());
  };

  KiiGroup.prototype._setAuthToken = function(wrapper) {
    return wrapper.setCurrentUserToken();
  };

  return KiiGroup;

})();


/**
    @class Represents a KiiObject object
    @exports root.KiiObject as KiiObject
 */

root.KiiObject = (function() {

  /** Get the UUID of the given object, assigned by the server
  @returns {String}
   */
  KiiObject.prototype.getUUID = function() {
    return this._uuid;
  };

  KiiObject.prototype._setUUID = function(_uuid) {
    this._uuid = _uuid;
  };


  /** Get Id of the object or null if the object ID hasn't been assigned.
  @returns {String}
   */

  KiiObject.prototype.getID = function() {
    return this._uuid;
  };


  /** Get the server's creation date of this object
  @returns {String}
   */

  KiiObject.prototype.getCreated = function() {
    return this._created;
  };

  KiiObject.prototype._setCreated = function(_created) {
    this._created = _created;
  };


  /** Get the modified date of the given object, assigned by the server
  @returns {String}
   */

  KiiObject.prototype.getModified = function() {
    return this._modified;
  };

  KiiObject.prototype._setModified = function(_modified) {
    this._modified = _modified;
  };


  /** Get the application-defined type name of the object
  @returns {String} type of this object. null or undefined if none exists
   */

  KiiObject.prototype.getObjectType = function() {
    return this._objectType;
  };

  KiiObject.prototype._setObjectType = function(_objectType) {
    this._objectType = _objectType;
  };

  KiiObject.prototype.getBucket = function() {
    root.Kii.logger("GEtting bucket " + this._bucket);
    return this._bucket;
  };

  KiiObject.prototype._setBucket = function(_bucket) {
    this._bucket = _bucket;
  };


  /** Get the body content-type.
  It will be updated after the success of {@link KiiObject#uploadBody} and {@link KiiObject#downloadBody}
  returns null or undefined when this object doesn't have body content-type information.
  @returns {String} content-type of object body
   */

  KiiObject.prototype.getBodyContentType = function() {
    return this._bodyContentType;
  };

  KiiObject.prototype._setBodyContentType = function(_bodyContentType) {
    this._bodyContentType = _bodyContentType;
  };

  function KiiObject() {
    this._deleteBodyUsingCallbacks = __bind(this._deleteBodyUsingCallbacks, this);
    this.deleteBody = __bind(this.deleteBody, this);
    this._publishBodyExpiresInUsingCallbacks = __bind(this._publishBodyExpiresInUsingCallbacks, this);
    this.publishBodyExpiresIn = __bind(this.publishBodyExpiresIn, this);
    this._publishBodyExpiresAtUsingCallbacks = __bind(this._publishBodyExpiresAtUsingCallbacks, this);
    this.publishBodyExpiresAt = __bind(this.publishBodyExpiresAt, this);
    this._publishBodyUsingCallbacks = __bind(this._publishBodyUsingCallbacks, this);
    this.publishBody = __bind(this.publishBody, this);
    this._downloadBodyUsingCallbacks = __bind(this._downloadBodyUsingCallbacks, this);
    this.downloadBody = __bind(this.downloadBody, this);
    this._uploadBodyUsingCallbacks = __bind(this._uploadBodyUsingCallbacks, this);
    this.uploadBody = __bind(this.uploadBody, this);
    this._moveBodyUsingCallbacks = __bind(this._moveBodyUsingCallbacks, this);
    this.moveBody = __bind(this.moveBody, this);
    this._parseObjectUri = __bind(this._parseObjectUri, this);
    this._userWithID = __bind(this._userWithID, this);
    this._setAuthorizationHeader = __bind(this._setAuthorizationHeader, this);
    this._getToken = __bind(this._getToken, this);
    this._getRequest = __bind(this._getRequest, this);
    this._setETag = __bind(this._setETag, this);
    this._deleteUsingCallbacks = __bind(this._deleteUsingCallbacks, this);
    this["delete"] = __bind(this["delete"], this);
    this._refreshUsingCallbacks = __bind(this._refreshUsingCallbacks, this);
    this.refresh = __bind(this.refresh, this);
    this._saveUsingCallbacks = __bind(this._saveUsingCallbacks, this);
    this.save = __bind(this.save, this);
    this._saveAllFieldsUsingCallbacks = __bind(this._saveAllFieldsUsingCallbacks, this);
    this.saveAllFields = __bind(this.saveAllFields, this);
    this._performUpdate = __bind(this._performUpdate, this);
    this._performSave = __bind(this._performSave, this);
    this._updateWithJSON = __bind(this._updateWithJSON, this);
    this._convertToObjectType = __bind(this._convertToObjectType, this);
    this.objectURI = __bind(this.objectURI, this);
    this.objectACL = __bind(this.objectACL, this);
    this.getGeoPoint = __bind(this.getGeoPoint, this);
    this.setGeoPoint = __bind(this.setGeoPoint, this);
    this.remove = __bind(this.remove, this);
    this.getKeys = __bind(this.getKeys, this);
    this.get = __bind(this.get, this);
    this.set = __bind(this.set, this);
    this._getPath = __bind(this._getPath, this);
    this._setBodyContentType = __bind(this._setBodyContentType, this);
    this.getBodyContentType = __bind(this.getBodyContentType, this);
    this._setBucket = __bind(this._setBucket, this);
    this.getBucket = __bind(this.getBucket, this);
    this._setObjectType = __bind(this._setObjectType, this);
    this.getObjectType = __bind(this.getObjectType, this);
    this._setModified = __bind(this._setModified, this);
    this.getModified = __bind(this.getModified, this);
    this._setCreated = __bind(this._setCreated, this);
    this.getCreated = __bind(this.getCreated, this);
    this.getID = __bind(this.getID, this);
    this._setUUID = __bind(this._setUUID, this);
    this.getUUID = __bind(this.getUUID, this);
    this._customInfo = {};
    this._alteredFields = [];
  }

  KiiObject.prototype._getPath = function() {
    var path;
    if (this._bucket.getUser() != null) {
      path = "/users/" + (this._bucket.getUser().getUUID()) + "/buckets/" + (this._bucket._getQualifiedBucketName()) + "/objects/";
    } else if (this._bucket.getGroup() != null) {
      path = "/groups/" + (this._bucket.getGroup().getUUID()) + "/buckets/" + (this._bucket._getQualifiedBucketName()) + "/objects/";
    } else if (this._bucket.getThing() != null) {
      path = "/things/" + (this._bucket.getThing().getThingID()) + "/buckets/" + (this._bucket._getQualifiedBucketName()) + "/objects/";
    } else {
      path = "/buckets/" + (this._bucket._getQualifiedBucketName()) + "/objects/";
    }
    if (this._uuid != null) {
      path += this._uuid;
    }
    return path;
  };


  /** Sets a key/value pair to a KiiObject
  
  <br><br>If the key already exists, its value will be written over.
  <br><b>NOTE: Before involving floating point value, please consider using integer instead. For example, use percentage, permil, ppm, etc.</br></b>
  The reason is:
   <li>Will dramatically improve the performance of bucket query.</li>
   <li>Bucket query does not support the mixed result of integer and floating point.
   ex.) If you use same key for integer and floating point and inquire object with the integer value, objects which has floating point value with the key would not be evaluated in the query. (and vice versa)</li>
  @param {String} key The key to set.
  if null, empty string or string prefixed with '_' is specified, silently ignored and have no effect.
  We don't check if actual type is String or not. If non-string type is specified, it will be encoded as key by JSON.stringify()
  @param {Object} value The value to be set. Object must be JSON-encodable type (dictionary, array, string, number, boolean)
  We don't check actual type of the value. It will be encoded as value by JSON.stringify()
  @example
  var obj = . . .; // a KiiObject
  obj.set("score", 4298);
   */

  KiiObject.prototype.set = function(key, value) {
    if (!KiiUtilities._isNonEmptyString(key) || key.indexOf("_") === 0) {
      root.Kii.logger("[WARN] Reserved key is used for custom field. key=" + key);
      return;
    }
    this._customInfo[key] = value;
    return this._alteredFields.push(key);
  };


  /** Gets the value associated with the given key
  @param {String} key The key to retrieve
  @returns {Object} The object associated with the key. null or undefined if none exists
  @example
  var obj = . . .; // a KiiObject
  var score = obj.get("score");
   */

  KiiObject.prototype.get = function(key) {
    return this._customInfo[key];
  };


  /** Gets the array object that contains all keys of custom field.
  The array of keys from local cache will be returned.
  To get the latest array of keys from cloud, calling refresh() is necessary prior calling this method.
  The returned array object does not include reserved keys such as _created, _modified, etc.
  @returns {Array} keys An array of all keys of custom field.
  @example
  var obj = . . .; // a KiiObject
  for(var key of obj.keys()) {
  }
   */

  KiiObject.prototype.getKeys = function() {
    var key, keys;
    keys = [];
    for (key in this._customInfo) {
      keys.push(key);
    }
    return keys;
  };


  /** Removes a pair of key/value from this object.
  This pair is also removed from server when saveAllFields() is succeeded. 
  @param {String} key The key to be removed
  @example
  var obj = . . .; // a KiiObject
  obj.remove("score");
   */

  KiiObject.prototype.remove = function(key) {
    var index;
    delete this._customInfo[key];
    index = this._alteredFields.indexOf(key);
    if (index >= 0) {
      return this._alteredFields.splice(index, 1);
    }
  };


  /**
      Set Geo point to this object with the specified key.
      @param {String} key The key to set.
      @param {KiiGeoPoint} KiiGeoPoint to be tied to the specified key.
      @throws {String}  Specified kiiGeoPint is not an instance of KiiGeoPoint.
   */

  KiiObject.prototype.setGeoPoint = function(key, kiiGeoPoint) {
    if (!(kiiGeoPoint instanceof root.KiiGeoPoint)) {
      throw root.InvalidArgumentException("Specified kiiGeoPoint is not an instance of KiiGeoPoint");
    }
    this._customInfo[key] = kiiGeoPoint._toDict();
    return this._alteredFields.push(key);
  };


  /**
      Gets the geo point associated with the given key.
      @param {String} key The key of the geo point to retrieve.
      @returns {KiiGeoPoint} KiiGeoPoint tied to the key. null if null exists.
   */

  KiiObject.prototype.getGeoPoint = function(key) {
    var lat, lon, point;
    point = this._customInfo[key];
    lat = point.lat;
    lon = point.lon;
    return root.KiiGeoPoint.geoPoint(lat, lon);
  };


  /** Get the ACL handle for this file
  
  <br><br>Any KiiACLEntry objects added or revoked from this ACL object will be appended to/removed from the server on ACL save.
  	@returns {KiiACL} A KiiACL object associated with this KiiObject
  	@example
  	var obj = . . .; // a KiiObject
  	var acl = obj.objectACL();
   */

  KiiObject.prototype.objectACL = function() {
    return root.KiiACL.aclWithParent(this);
  };


  /** Get a specifically formatted string referencing the object
  
  <br><br>The object must exist in the cloud (have a valid UUID).
  @returns {String} A URI string based on the current object. null if a URI couldn't be generated.
  @example
  var obj = . . .; // a KiiObject
  var uri = obj.objectURI();
   */

  KiiObject.prototype.objectURI = function() {
    var base, uri;
    base = "kiicloud://";
    if ((this._bucket != null) && (this._uuid != null)) {
      uri = base;
      if (this._bucket.getGroup() != null) {
        uri += "groups/" + (this._bucket.getGroup().getUUID()) + "/";
      } else if (this._bucket.getUser() != null) {
        uri += "users/" + (this._bucket.getUser().getUUID()) + "/";
      } else if (this._bucket.getThing() != null) {
        uri += "things/" + (this._bucket.getThing().getThingID()) + "/";
      }
      uri += "buckets/" + (this._bucket._getQualifiedBucketName()) + "/objects/" + this._uuid;
    }
    return uri;
  };

  KiiObject.prototype._convertToObjectType = function(contentType) {
    var result;
    if ('application/json' === contentType) {
      return {
        'success': true,
        'type': null
      };
    }
    result = contentType.match(RegExp("$application/vnd\\." + (root.Kii.getAppID()) + "\\.([^\\.])+\\+json"));
    if (result != null) {
      return {
        'success': true,
        'type': result
      };
    }
    return {
      'success': false,
      'type': null
    };
  };

  KiiObject.prototype._updateWithJSON = function(json, patch) {
    var key, val, _results;
    if (!patch) {
      this._customInfo = {};
    }
    _results = [];
    for (key in json) {
      val = json[key];
      if (key === "_id") {
        if (this._uuid == null) {
          root.Kii.logger("Setting uuid: " + val);
          _results.push(this._uuid = val);
        } else {
          _results.push(void 0);
        }
      } else if (key === "_created") {
        _results.push(this._created = val);
      } else if (key === "_modified") {
        _results.push(this._modified = val);
      } else if (key === "_owner") {
        _results.push(this._owner = this._userWithID(val));
      } else if (key === "_dataType") {
        _results.push(this._objectType = val);
      } else if (key === "_calculated") {
        _results.push(this._customInfo[key] = val);
      } else if (key[0] !== "_") {
        _results.push(this._customInfo[key] = val);
      } else if (key === "_version") {
        _results.push(this._etag = val);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  KiiObject.prototype._performSave = function(callbacks) {
    var data, path, request, saveCallbacks;
    path = this._getPath();
    path = path.slice(0, +(path.length - 2) + 1 || 9e9);
    request = new this._getRequest({
      path: path,
      withApp: true
    });
    request.setMethod("POST");
    data = this._customInfo;
    request.setData(data);
    if (this._objectType != null) {
      request.setContentType("application/vnd." + (root.Kii.getAppID()) + "." + this._objectType + "+json");
    }
    saveCallbacks = {
      success: (function(_this) {
        return function(data, statusCode, headers) {
          var result;
          if (statusCode < 300 && statusCode >= 200) {
            _this._etag = headers['etag'];
            if (data['objectID'] != null) {
              _this._uuid = data['objectID'];
              if (data['createdAt'] != null) {
                _this._created = data['createdAt'];
              }
              if (data['dataType'] != null) {
                result = _this._convertToObjectType(data['dataType']);
                if (result['success']) {
                  _this._objectType = result['type'];
                }
              }
              _this._modified = _this._created;
              _this._alteredFields = [];
              if (callbacks != null) {
                return callbacks.success(_this);
              }
            } else {
              return callbacks.failure(_this, "No objectID response");
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(saveCallbacks, false);
  };

  KiiObject.prototype._performUpdate = function(patch, callbacks, overwrite) {
    var data, isSaved, key, path, request, updateCallbacks, _i, _len, _ref;
    path = this._getPath();
    request = new this._getRequest({
      path: path,
      withApp: true
    });
    data = {};
    if (patch) {
      request.addHeader("X-HTTP-Method-Override", "PATCH");
      request.setMethod("POST");
      _ref = this._alteredFields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        data[key] = this._customInfo[key];
      }
    } else {
      request.setMethod("PUT");
      data = this._customInfo;
    }
    request.setData(data);
    isSaved = this._created > 0;
    if (!overwrite) {
      if (isSaved) {
        if (this._etag == null) {
          callbacks.failure(this, "IllegalState! Call KiiObject#refresh() prior call this method.");
          return;
        }
        request.addHeader("If-Match", this._etag);
      } else {
        if (patch && (this._etag == null)) {
          callbacks.failure(this, "IllegalState! Call KiiObject#refresh() prior call this method.");
          return;
        }
        request.addHeader("If-None-Match", "*");
      }
    }
    if (this._objectType != null) {
      request.setContentType("application/vnd." + (root.Kii.getAppID()) + "." + this._objectType + "+json");
    }
    updateCallbacks = {
      success: (function(_this) {
        return function(data, statusCode, headers) {
          if (statusCode < 300 && statusCode >= 200) {
            _this._etag = headers['etag'];
            if (patch) {
              _this._updateWithJSON(data, true);
            } else {
              if (data['createdAt'] != null) {
                _this._created = data['createdAt'];
              }
              if (data['modifiedAt'] != null) {
                _this._modified = data['modifiedAt'];
              }
            }
            _this._alteredFields = [];
            if (callbacks != null) {
              return callbacks.success(_this);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(updateCallbacks, false);
  };


  /** Create or update the KiiObject on KiiCloud.
  <br><br>When call this method for the object that has not saved on cloud, will send all fields.
  Call this method for the object that has saved on cloud, Update all field of this object.
  @param {Object} [callbacks] An object with callback methods defined
      sucess: function called when save succeeded.<br>
      failure: function called when save failed.
  @param overwrite optional, true by default.
          <ul>
            <li><b>If overwrite is true:</b>
            <ul>
              <li>If a KiiObject with the same ID exists in cloud, the local copy will overwrite the remote copy, even if the remote copy is newer. </li>
            </ul>
              <li><b>Otherwise:</b>
            <ul>
              <li>If a KiiObject with the same ID exists in cloud and the remote copy is newer, save will fail.</li>
            </ul>
          </ul>
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theSavedObject). theSavedObject is KiiObject instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var obj = . . .; // a KiiObject
  obj.saveAllFields({
      success: function(theSavedObject) {
          // do something with the saved object
      },
  
      failure: function(theObject, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var obj = . . .; // a KiiObject
  obj.saveAllFields().then(
      function(theSavedObject) {
          // do something with the saved object
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiObject.prototype.saveAllFields = function(callbacks, overwrite) {
    if (overwrite == null) {
      overwrite = true;
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var saveCallbacks;
        saveCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._saveAllFieldsUsingCallbacks(saveCallbacks, overwrite);
      };
    })(this));
  };

  KiiObject.prototype._saveAllFieldsUsingCallbacks = function(callbacks, overwrite) {
    if (overwrite == null) {
      overwrite = true;
    }
    if (this._uuid != null) {
      return this._performUpdate(false, callbacks, overwrite);
    } else {
      return this._performSave(callbacks);
    }
  };


  /** Create or update the KiiObject on KiiCloud.
  <br><br>When call this method for the object that has not saved on cloud, will send all fields.
  Call this method for the object that has saved on cloud, Update only updated fields.
  Do not send fields that has not updated locally. To send all fields regardless of updates, call {@link KiiObject#saveAllFields}.
  @param {Object} [callbacks] An object with callback methods defined
      sucess: function called when save succeeded.<br>
      failure: function called when save failed.
  @param overwrite optional, true by default.
          <ul>
            <li><b>If overwrite is true:</b>
            <ul>
              <li>If a KiiObject with the same ID exists in cloud, the local copy will overwrite the remote copy, even if the remote copy is newer. </li>
            </ul>
              <li><b>Otherwise:</b>
            <ul>
              <li>If a KiiObject with the same ID exists in cloud and the remote copy is newer, save will fail.</li>
            </ul>
          </ul>
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theSavedObject). theSavedObject is KiiObject instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var obj = . . .; // a KiiObject
  obj.save({
      success: function(theSavedObject) {
          // do something with the saved object
      },
  
      failure: function(theObject, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var obj = . . .; // a KiiObject
  obj.save().then(
      function(theSavedObject) {
          // do something with the saved object
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiObject.prototype.save = function(callbacks, overwrite) {
    if (overwrite == null) {
      overwrite = true;
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var saveCallbacks;
        saveCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._saveUsingCallbacks(saveCallbacks, overwrite);
      };
    })(this));
  };

  KiiObject.prototype._saveUsingCallbacks = function(callbacks, overwrite) {
    if (overwrite == null) {
      overwrite = true;
    }
    if (this._uuid != null) {
      return this._performUpdate(true, callbacks, overwrite);
    } else {
      return this._performSave(callbacks);
    }
  };


  /** Updates the local object's data with the user data on the server
  
  <br><br>The object must exist on the server. Local data will be overwritten.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful refresh request
  @param {Method} callbacks.failure The callback method to call on a failed refresh request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theRefreshedObject). theRefreshedObject is KiiObject instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var obj = . . .; // a KiiObject
  obj.refresh({
      success: function(theRefreshedObject) {
          // do something with the refreshed object
      },
  
      failure: function(theObject, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var obj = . . .; // a KiiObject
  obj.refresh().then(
      function(theRefreshedObject) {
          // do something with the refreshed object
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiObject.prototype.refresh = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var refreshCallbacks;
        refreshCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._refreshUsingCallbacks(refreshCallbacks);
      };
    })(this));
  };

  KiiObject.prototype._refreshUsingCallbacks = function(callbacks) {
    var path, refreshCallbacks, request;
    path = this._getPath();
    request = new this._getRequest({
      path: path,
      withApp: true
    });
    refreshCallbacks = {
      success: (function(_this) {
        return function(data, statusCode, headers) {
          if (statusCode < 300 && statusCode >= 200) {
            _this._etag = headers['etag'];
            _this._updateWithJSON(data, false);
            if (callbacks != null) {
              return callbacks.success(_this);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(refreshCallbacks, false);
  };


  /** Delete the object from the server
  @name delete
  @memberOf root.KiiObject#
  @function
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful delete request
  @param {Method} callbacks.failure The callback method to call on a failed delete request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theDeletedObject). theDeletedObject is KiiObject instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var obj = . . .; // a KiiObject
  obj.delete({
      success: function(theDeletedObject) {
          // do something
      },
  
      failure: function(theObject, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var obj = . . .; // a KiiObject
  obj.delete().then(
      function(theDeletedObject) {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiObject.prototype["delete"] = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var deleteCallbacks;
        deleteCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._deleteUsingCallbacks(deleteCallbacks);
      };
    })(this));
  };

  KiiObject.prototype._deleteUsingCallbacks = function(callbacks) {
    var path, refreshCallbacks, request;
    path = this._getPath();
    request = new this._getRequest({
      path: path,
      withApp: true
    });
    request.setMethod("DELETE");
    refreshCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_this);
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(refreshCallbacks, true);
  };

  KiiObject.objectWithBucket = function(bucket, type) {
    var obj;
    root.Kii.logger("Creating object w type: " + type);
    obj = new root.KiiObject;
    obj._setBucket(bucket);
    obj._setObjectType(type);
    root.Kii.logger(obj);
    return obj;
  };

  KiiObject.objectWithID = function(bucket, objectID) {
    var obj;
    root.Kii.logger("Creating object with id: " + objectID);
    obj = new root.KiiObject;
    obj._setBucket(bucket);
    obj._setUUID(objectID);
    root.Kii.logger(obj);
    return obj;
  };

  KiiObject.prototype._setETag = function(_etag) {
    this._etag = _etag;
  };


  /** Generate a new KiiObject based on a given URI
  @param {String} uri The URI of the object to be represented
  @returns {KiiObject} A new KiiObject with its parameters filled in from the URI
  @throws {InvalidURIException} If the URI is not in the proper format
  @example
  var group = new KiiObject.objectWithURI("kiicloud://myuri");
   */

  KiiObject.objectWithURI = function(uri) {
    var bucket, bucketIndex, bucketName, compLength, components, newURI, obj, subject;
    newURI = uri.substr("kiicloud://".length);
    components = newURI.split("/");
    compLength = components.length;
    root.Kii.logger(components);
    if (compLength >= 4) {
      bucketIndex = compLength === 4 ? 1 : 3;
      bucketName = components[bucketIndex];
      subject = null;
      if (components[0] === "groups") {
        subject = new root.KiiGroup.groupWithID(components[1]);
      } else if (components[0] === "users") {
        subject = root.KiiUser.userWithID(components[1]);
      } else if (components[0] === "things") {
        subject = root.KiiThing.thingWithID(components[1]);
      }
      bucket = null;
      if (root.KiiEncryptedBucket._isEncrypted(bucketName)) {
        bucket = new root.KiiEncryptedBucket._bucketWithName(bucketName, subject);
      } else {
        bucket = new root.KiiBucket._bucketWithName(bucketName, subject);
      }
      root.Kii.logger(bucket);
      obj = bucket.createObject();
      obj._setUUID(components[compLength - 1]);
      root.Kii.logger(obj);
    } else {
      throw new root.InvalidURIException;
    }
    return obj;
  };

  KiiObject.prototype._getRequest = function(spec) {
    var path, request, withApp;
    path = spec.path;
    withApp = spec.withApp;
    request = new KiiRequest(path, withApp);
    return request;
  };

  KiiObject.prototype._getToken = function() {
    var currUser, token;
    currUser = root.KiiUser.getCurrentUser();
    token = currUser ? currUser.getAccessToken() : null;
    if (token) {
      return token;
    } else {
      return null;
    }
  };

  KiiObject.prototype._setAuthorizationHeader = function(xhr) {
    var token;
    token = this._getToken();
    if (token) {
      return xhr.setRequestHeader("Authorization", "Bearer " + token);
    }
  };

  KiiObject.prototype._userWithID = function(id) {
    var user;
    user = root.KiiUser.userWithID(id);
    return user;
  };

  KiiObject.prototype._parseObjectUri = function(uri) {
    var data, targetData, uriElement, uriPrefix;
    uriElement = uri.replace(/^kiicloud:\/\//g, "").split("/");
    uriPrefix = uriElement[0];
    if (uriPrefix === "users") {
      targetData = {
        'appID': root.Kii.getAppID(),
        'userID': uriElement[1],
        'type': "APP_AND_USER"
      };
      if (root.KiiEncryptedBucket._isEncrypted(uriElement[3])) {
        data = {
          'targetObjectScope': targetData,
          'targetBucketType': "crypto",
          'targetBucketID': uriElement[3].replace("CRYPTO:", ""),
          'targetObjectID': uriElement[5]
        };
      } else {
        data = {
          'targetObjectScope': targetData,
          'targetBucketID': uriElement[3],
          'targetObjectID': uriElement[5]
        };
      }
    } else if (uriPrefix === "groups") {
      targetData = {
        'appID': root.Kii.getAppID(),
        'groupID': uriElement[1],
        'type': "APP_AND_GROUP"
      };
      if (root.KiiEncryptedBucket._isEncrypted(uriElement[3])) {
        data = {
          'targetObjectScope': targetData,
          'targetBucketType': "crypto",
          'targetBucketID': uriElement[3].replace("CRYPTO:", ""),
          'targetObjectID': uriElement[5]
        };
      } else {
        data = {
          'targetObjectScope': targetData,
          'targetBucketID': uriElement[3],
          'targetObjectID': uriElement[5]
        };
      }
    } else if (uriPrefix === "things") {
      throw new root.InvalidURIException;
    } else {
      targetData = {
        'appID': root.Kii.getAppID(),
        'type': "APP"
      };
      if (root.KiiEncryptedBucket._isEncrypted(uriElement[1])) {
        data = {
          'targetObjectScope': targetData,
          'targetBucketType': "crypto",
          'targetBucketID': uriElement[1].replace("CRYPTO:", ""),
          'targetObjectID': uriElement[3]
        };
      } else {
        data = {
          'targetObjectScope': targetData,
          'targetBucketID': uriElement[1],
          'targetObjectID': uriElement[3]
        };
      }
    }
    return data;
  };


  /** Move KiiObject body from an object to another object.
  <br>
  This moving can be allowed under same application, across different scopes
  and source/target KiiObject have a read and write permission (READ_EXISTING_OBJECT and WRITE_EXISTING_OBJECT).
  <br><br>If target KiiObject has a body, it will be overwritten.
  @param {String} targetObjectUri A KiiObject URI which KiiObject body is moved to.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful move request
  @param {Method} callbacks.failure The callback method to call on a failed move request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is the source KiiObject instance which this method was called on.</li>
          <li>params[1] is the target targetObjectUri String.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the source KiiObject instance which this method was called on.</li>
          <li>error.targetObjectUri is the targetObjectUri String.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var sourceObject = ...; // Source KiiObject
  var targetObject = ...; // Target KiiObject
  var targetObjectUri = targetObject.objectURI();
  sourceObject.moveBody(targetObjectUri, {
      success: function(theSrcObject, theTgtObjectUri) {
          // Do something with the objects
      },
  
      failure: function(theSrcObject, theTgtObjectUri, anErrorString) {
          // Do something with the error response
      }
  });
  
  // example to use Promise
  var sourceObject = ...; // Source KiiObject
  var targetObject = ...; // Target KiiObject
  var targetObjectUri = targetObject.objectURI();
  sourceObject.moveBody(targetObjectUri).then(
      function(params) {
          var theSrcObject = params[0];
          var theTgtObjectUri = params[1];
          // Do something with the objects
      },
      function(error) {
          // Do something with the error response
      }
  );
   */

  KiiObject.prototype.moveBody = function(targetObjectUri, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var moveBodyCallbacks;
        moveBodyCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            var error;
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            error = KiiUtilities._Error(arguments[2], _this);
            error.targetObjectUri = arguments[1];
            return reject(error);
          }
        };
        return _this._moveBodyUsingCallbacks(targetObjectUri, moveBodyCallbacks);
      };
    })(this));
  };

  KiiObject.prototype._moveBodyUsingCallbacks = function(targetObjectUri, callbacks) {
    var errorMessage, moveCallbacks, path, request;
    if (targetObjectUri == null) {
      return callbacks.failure(this, null, root.InvalidArgumentException('targetObjectUri is required'));
    }
    if (this.getUUID() == null) {
      return callbacks.failure(this, targetObjectUri, root.InvalidArgumentException('Source object is not saved on the cloud'));
    }
    path = this._getPath() + "/body/move";
    request = new this._getRequest({
      path: path,
      withApp: true
    });
    request.setMethod("POST");
    request.setContentType("application/vnd.kii.ObjectBodyMoveRequest+json");
    try {
      request.setData(this._parseObjectUri(targetObjectUri));
    } catch (_error) {
      errorMessage = _error;
      return callbacks.failure(this, targetObjectUri, "Not support to move body of thing scope object.");
    }
    moveCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_this, targetObjectUri);
          } else if (callbacks != null) {
            return callbacks.failure(_this, targetObjectUri, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, targetObjectUri, error);
          }
        };
      })(this)
    };
    return request.execute(moveCallbacks, true);
  };


  /** Upload body data of this object.<br>
  If the KiiObject has not saved on the cloud or deleted,
  request will be failed.
  <br>NOTE: this requires XMLHttpRequest Level 2, FileReader and Blob supports. Do not use it in server code.<br>
  @param {Blob} srcDataBlob data to be uploaded.
  type is used to determin content-type managed in Kii Cloud.
  If type was not specified in the Blob,
  'application/octet-stream' will be used.
  @param {Object} [callbacks]
      progress: function called on XMLHttpRequest 'progress' event listener.<br>
      sucess: function called when upload succeeded.<br>
      failure: function called when upload failed.
  @return {Promise} return promise object.
  <br>NOTE: Promise will not handle progress event. Please pass callbacks with progress function to handle progress.
    <ul>
      <li>fulfill callback function: function(theObject). theObject is a KiiObject instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var myObject = Kii.bucketWithName('myBucket').createObject();
  myObject.save({
      success: function(obj) {
          var srcData = new Blob(['Hello Blob'], {type: 'text/plain'});
          obj.uploadBody(srcData, {
              progress: function (oEvent) {
                if (oEvent.lengthComputable) {
                  var percentComplete = oEvent.loaded / oEvent.total;
                  //getting upload progress. You can update progress bar on this function.
                }
              },
              success: function(obj) {
                  // Upload succeeded.
              },
              failure: function(obj, anErrorString) {
                  // Handle error.
              }
          });
      },
      failure: function(obj, error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  var myObject = Kii.bucketWithName('myBucket').createObject();
  myObject.save().then(
      function(obj) {
          var srcData = new Blob(['Hello Blob'], {type: 'text/plain'});
          obj.uploadBody(srcData, {
              progress: function (oEvent) {
                if (oEvent.lengthComputable) {
                  var percentComplete = oEvent.loaded / oEvent.total;
                  //getting upload progress. You can update progress bar on this function.
                }
              }
          }).then(
              function(obj) { // fullfill callback function
                  // Upload succeeded.
              },
              function(error) { // reject callback function
                  // Handle error.
              }
          );
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiObject.prototype.uploadBody = function(srcDataBlob, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var uploadBodyCallbacks;
        uploadBodyCallbacks = {
          success: function() {
            var _ref;
            if (callbacks != null) {
              if ((_ref = callbacks.success) != null) {
                _ref.apply(callbacks, arguments);
              }
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            var _ref;
            if (callbacks != null) {
              if ((_ref = callbacks.failure) != null) {
                _ref.apply(callbacks, arguments);
              }
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          },
          progress: function() {
            var _ref;
            return callbacks != null ? (_ref = callbacks.progress) != null ? _ref.apply(callbacks, arguments) : void 0 : void 0;
          }
        };
        return _this._uploadBodyUsingCallbacks(srcDataBlob, uploadBodyCallbacks);
      };
    })(this));
  };

  KiiObject.prototype._uploadBodyUsingCallbacks = function(srcDataBlob, callbacks) {
    var contentType, requestCallback, url, wrapper, xhr;
    if (!srcDataBlob || !(srcDataBlob instanceof Blob)) {
      callbacks.failure(this, "Invalid parameter");
      return;
    }
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + this._getPath() + "/body";
    contentType = "application/octet-stream";
    if (srcDataBlob.type) {
      contentType = srcDataBlob.type;
    }
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("PUT", url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader('Content-Type', contentType);
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    this._setAuthorizationHeader(xhr);
    requestCallback = {
      success: (function(_this) {
        return function() {
          var json;
          json = JSON.parse(xhr.responseText);
          if (json['modifiedAt'] != null) {
            _this._modified = json['modifiedAt'];
          }
          _this._setBodyContentType(contentType);
          if (callbacks != null) {
            return callbacks.success(_this);
          }
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errString, json;
          errString = "failed to upload body. statusCode: " + xhr.status;
          if (callbacks != null) {
            try {
              json = JSON.parse(decodeURIComponent(xhr.responseText));
              if (json.errorCode != null) {
                errString += " error code: " + json.errorCode;
              }
              if (json.message != null) {
                return errString += " message: " + json.message;
              }
            } catch (_error) {

            } finally {
              root.Kii.logger("Failure: " + errString);
              root.Kii.logger(xhr.responseText);
              callbacks.failure(_this, errString);
            }
          }
        };
      })(this),
      progress: (function(_this) {
        return function(event) {
          if (callbacks && callbacks.progress) {
            return callbacks.progress(event);
          }
        };
      })(this)
    };
    return wrapper.sendData(srcDataBlob, requestCallback);
  };


  /** Download body data of this object.<br>
  If the KiiObject has not saved on the cloud or deleted
  or exist but does not have body object, request will be failed.
  <br>NOTE: this requires XMLHttpRequest Level 2, FileReader and Blob supports. Do not use it in server code.<br>
  @param {Object} [callbacks]
      progress: function called on XMLHttpRequest 'progress' event listener.<br>
      sucess: function called when download succeeded.<br>
      failure: function called when download failed.
  @return {Promise} return promise object.
  <br>NOTE: Promise will not handle progress event. Please pass callbacks with progress function to handle progress.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a KiiObject instance which this method was called on.</li>
          <li>params[1] is the returned body blob object.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.</li>
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var myObject = KiiObject.objectWithURI('put existing object uri here');
  myObject.downloadBody({
      progress: function (oEvent) {
        if (oEvent.lengthComputable) {
          var percentComplete = oEvent.loaded / oEvent.total;
          //getting download progress. You can update progress bar on this function.
  
        }
      },
      success: function(obj, bodyBlob) {
          // Obtaind body contents as bodyBlob.
          // content-type managed in Kii Cloud can be obtained from type attr.
          // It is same as obj.getBodyContentType();
          var contentType = bodyBlob.type;
      },
      failure: function(obj, anErrorString) {
          // Handle error.
      }
  });
  
  // example to use Promise
  var myObject = KiiObject.objectWithURI('put existing object uri here');
  myObject.downloadBody({
      progress: function (oEvent) {
        if (oEvent.lengthComputable) {
          var percentComplete = oEvent.loaded / oEvent.total;
          //getting download progress. You can update progress bar on this function.
  
        }
      }
  ).then(
      function(params) {
          // Obtaind body contents as bodyBlob.
          // content-type managed in Kii Cloud can be obtained from type attr.
          // It is same as obj.getBodyContentType();
          var obj = params[0];
          var bodyBlob = params[1];
          var contentType = bodyBlob.type;
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiObject.prototype.downloadBody = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var downloadBodyCallbacks;
        downloadBodyCallbacks = {
          success: function() {
            var _ref;
            if (callbacks != null) {
              if ((_ref = callbacks.success) != null) {
                _ref.apply(callbacks, arguments);
              }
            }
            return resolve(arguments);
          },
          failure: function() {
            var _ref;
            if (callbacks != null) {
              if ((_ref = callbacks.failure) != null) {
                _ref.apply(callbacks, arguments);
              }
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          },
          progress: function() {
            var _ref;
            return callbacks != null ? (_ref = callbacks.progress) != null ? _ref.apply(callbacks, arguments) : void 0 : void 0;
          }
        };
        return _this._downloadBodyUsingCallbacks(downloadBodyCallbacks);
      };
    })(this));
  };

  KiiObject.prototype._downloadBodyUsingCallbacks = function(callbacks) {
    var requestCallback, url, wrapper, xhr;
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + this._getPath() + "/body";
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("GET", url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    this._setAuthorizationHeader(xhr);
    xhr.responseType = 'blob';
    requestCallback = {
      success: (function(_this) {
        return function() {
          var statusCode;
          statusCode = xhr.status;
          _this._setBodyContentType(xhr.getResponseHeader('content-type'));
          if (callbacks != null) {
            return callbacks.success(_this, xhr.response);
          }
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errString, fileReader, obj, responseText;
          if (callbacks != null) {
            errString = "failed to download body. statusCode: " + xhr.status;
            fileReader = new FileReader();
            responseText = null;
            obj = _this;
            fileReader.onload = function() {
              var json;
              responseText = this.result;
              try {
                json = JSON.parse(decodeURIComponent(responseText));
                if (json.errorCode != null) {
                  errString += " error code: " + json.errorCode;
                }
                if (json.message != null) {
                  return errString += " message: " + json.message;
                }
              } catch (_error) {

              } finally {
                root.Kii.logger("Failure: " + errString);
                root.Kii.logger(xhr.response);
                callbacks.failure(obj, errString);
              }
            };
            return fileReader.readAsText(xhr.response);
          }
        };
      })(this),
      progress: (function(_this) {
        return function(event) {
          if (callbacks && callbacks.progress) {
            return callbacks.progress(event);
          }
        };
      })(this)
    };
    return wrapper.send(requestCallback);
  };


  /** Publish object body.<br>
  Publish object body and obtain public URL links to the body.<br>
  It doesn't expires.<br>
  If the KiiObject has not saved on the cloud or deleted
  or exist but does not have body object, request will be failed.
  @param {Object} [callbacks]
      sucess: function called when publish succeeded.<br>
      failure: function called when publish failed.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is the KiiObject instance which this method was called on.</li>
          <li>params[1] is the published url string.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var myObject = KiiObject.objectWithURI('put existing object uri here');
  myObject.publishBody({
      success: function(obj, publishedUrl) {
          // ex.) You can show publishedUrl in the view.
      },
      failure: function(obj, anErrorString) {
          // Handle error.
      }
  });
  
  // example to use Promise
  var myObject = KiiObject.objectWithURI('put existing object uri here');
  myObject.publishBody().then(
      function(params) {
          // ex.) You can show publishedUrl in the view.
          var obj = params[0];
          var publishedUrl = params[1];
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiObject.prototype.publishBody = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var publishBodyCallbacks;
        publishBodyCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._publishBodyUsingCallbacks(publishBodyCallbacks);
      };
    })(this));
  };

  KiiObject.prototype._publishBodyUsingCallbacks = function(callbacks) {
    var jsonBody, requestBody, requestCallbacks, url, wrapper, xhr;
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + this._getPath() + "/body/publish";
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("POST", url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    xhr.setRequestHeader("Content-Type", "application/vnd.kii.ObjectBodyPublicationRequest+json");
    this._setAuthorizationHeader(xhr);
    requestCallbacks = {
      success: (function(_this) {
        return function() {
          var json;
          if (callbacks != null) {
            try {
              json = JSON.parse(xhr.responseText);
              if (json.url) {
                return callbacks.success(_this, json.url);
              } else {
                return callbacks.failure(_this, "failed to parse response");
              }
            } catch (_error) {
              return callbacks.failure(_this, "failed to parse response");
            }
          }
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errString, json;
          if (callbacks != null) {
            errString = "failed to publish body. statusCode: " + xhr.status;
            try {
              json = JSON.parse(xhr.responseText);
              if (json.errorCode != null) {
                errString += " error code: " + json.errorCode;
              }
              if (json.message != null) {
                return errString += " error message: " + json.message;
              }
            } catch (_error) {

            } finally {
              callbacks.failure(_this, errString);
            }
          }
        };
      })(this)
    };
    requestBody = {};
    jsonBody = JSON.stringify(requestBody);
    return wrapper.sendData(jsonBody, requestCallbacks);
  };


  /** Publish object body with expiration date.<br>
  Publish object body and obtain public URL links to the body.<br>
  Expires at specified date <br>
  If the KiiObject has not saved on the cloud or deleted
  or exist but does not have body object, request will be failed.
  @param {Date} expiresAt expiration date. should specify future date.
  @param {Object} [callbacks]
      sucess: function called when publish succeeded.<br>
      failure: function called when publish failed.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is the KiiObject instance which this method was called on.</li>
          <li>params[1] is the published url string.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var myObject = KiiObject.objectWithURI('put existing object uri here');
  var expiresAt = new Date(2014, 11, 24);
  myObject.publishBodyExpiresAt(expiresAt, {
      success: function(obj, publishedUrl) {
          // ex.) You can show publishedUrl in the view.
      },
      failure: function(obj, anErrorString) {
          // Handle error.
      }
  });
  
  // example to use Promise
  var myObject = KiiObject.objectWithURI('put existing object uri here');
  var expiresAt = new Date(2014, 11, 24);
  myObject.publishBodyExpiresAt(expiresAt).then(
      function(params) {
          // ex.) You can show publishedUrl in the view.
          var obj = params[0];
          var publishedUrl = params[1];
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiObject.prototype.publishBodyExpiresAt = function(expiresAt, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var publishBodyExpiresAtCallbacks;
        publishBodyExpiresAtCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._publishBodyExpiresAtUsingCallbacks(expiresAt, publishBodyExpiresAtCallbacks);
      };
    })(this));
  };

  KiiObject.prototype._publishBodyExpiresAtUsingCallbacks = function(expiresAt, callbacks) {
    var jsonBody, requestBody, requestCallbacks, url, wrapper, xhr;
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + this._getPath() + "/body/publish";
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("POST", url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    xhr.setRequestHeader("Content-Type", "application/vnd.kii.ObjectBodyPublicationRequest+json");
    this._setAuthorizationHeader(xhr);
    requestCallbacks = {
      success: (function(_this) {
        return function() {
          var json;
          if (callbacks != null) {
            try {
              json = JSON.parse(xhr.responseText);
              if (json.url) {
                return callbacks.success(_this, json.url);
              } else {
                return callbacks.failure(_this, "failed to parse response");
              }
            } catch (_error) {
              return callbacks.failure(_this, "failed to parse response");
            }
          }
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errString, json;
          if (callbacks != null) {
            errString = "failed to publish body. statusCode: " + xhr.status;
            if (xhr.responseText == null) {
              callbacks.failure(_this, errString);
              retunr;
            }
            try {
              json = JSON.parse(xhr.responseText);
              if (json.errorCode != null) {
                errString += " error code: " + json.errorCode;
              }
              if (json.message != null) {
                return errString += " error message: " + json.message;
              }
            } catch (_error) {

            } finally {
              callbacks.failure(_this, errString);
            }
          }
        };
      })(this)
    };
    requestBody = {};
    requestBody.expiresAt = expiresAt;
    jsonBody = JSON.stringify(requestBody);
    return wrapper.sendData(jsonBody, requestCallbacks);
  };


  /** Publish object body with expiration duration.<br>
  Publish object body and obtain public URL links to the body.<br>
  Expires in specified duration<br>
  If the KiiObject has not saved on the cloud or deleted
  or exist but does not have body object, request will be failed.
  @param {Number} expiresIn duration in seconds. greater than 0.
  @param {Object} [callbacks]
      sucess: function called when publish succeeded.<br>
      failure: function called when publish failed.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is the KiiObject instance which this method was called on.</li>
          <li>params[1] is the published url string.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var myObject = KiiObject.objectWithURI('put existing object uri here');
  var expiresIn = 60 * 60; // Expires in 1 hour.
  myObject.publishBodyExpiresIn(expiresIn, {
      success: function(obj, publishedUrl) {
          // ex.) You can show publishedUrl in the view.
      },
      failure: function(obj, anErrorString) {
          // Handle error.
      }
  });
  
  // example to use Promise
  var myObject = KiiObject.objectWithURI('put existing object uri here');
  var expiresIn = 60 * 60; // Expires in 1 hour.
  myObject.publishBodyExpiresIn(expiresIn).then(
      function(params) {
          // ex.) You can show publishedUrl in the view.
          var obj = params[0];
          var publishedUrl = params[1];
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiObject.prototype.publishBodyExpiresIn = function(expiresIn, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var publishBodyExpiresInCallbacks;
        publishBodyExpiresInCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._publishBodyExpiresInUsingCallbacks(expiresIn, publishBodyExpiresInCallbacks);
      };
    })(this));
  };

  KiiObject.prototype._publishBodyExpiresInUsingCallbacks = function(expiresIn, callbacks) {
    var jsonBody, requestBody, requestCallbacks, url, wrapper, xhr;
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + this._getPath() + "/body/publish";
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("POST", url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    xhr.setRequestHeader("Content-Type", "application/vnd.kii.ObjectBodyPublicationRequest+json");
    this._setAuthorizationHeader(xhr);
    requestCallbacks = {
      success: (function(_this) {
        return function() {
          var json;
          try {
            json = JSON.parse(xhr.responseText);
            if (json.url) {
              return callbacks.success(_this, json.url);
            } else {
              return callbacks.failure(_this, "failed to parse response");
            }
          } catch (_error) {
            return callbacks.failure(_this, "failed to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errString, json;
          errString = "failed to publish body. statusCode: " + xhr.status;
          try {
            json = JSON.parse(xhr.responseText);
            if (json.errorCode != null) {
              errString += " error code: " + json.errorCode;
            }
            if (json.message != null) {
              return errString += " error message: " + json.message;
            }
          } catch (_error) {

          } finally {
            callbacks.failure(_this, errString);
          }
        };
      })(this)
    };
    requestBody = {};
    requestBody.expiresIn = expiresIn;
    jsonBody = JSON.stringify(requestBody);
    return wrapper.sendData(jsonBody, requestCallbacks);
  };


  /** Delete the object body from the server.<br>
  If the KiiObject has not saved on the cloud or deleted
  or exist but does not have body object, request will be failed.<br>
  If succeeded, The object body content type will be nullified.
  @name deleteBody
  @memberOf root.KiiObject#
  @function
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful delete request
  @param {Method} callbacks.failure The callback method to call on a failed delete request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theDeletedObject). theDeletedObject is the KiiObject instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiObject instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var obj = . . .; // a KiiObject
  obj.deleteBody({
      success: function(theDeletedObject) {
          // do something
      },
  
      failure: function(obj, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var obj = . . .; // a KiiObject
  obj.deleteBody().then(
      function(theDeletedObject) {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiObject.prototype.deleteBody = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var deleteBodyCallbacks;
        deleteBodyCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._deleteBodyUsingCallbacks(deleteBodyCallbacks);
      };
    })(this));
  };

  KiiObject.prototype._deleteBodyUsingCallbacks = function(callbacks) {
    var requestCallbacks, url, wrapper, xhr;
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + this._getPath() + "/body";
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("DELETE", url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    this._setAuthorizationHeader(xhr);
    requestCallbacks = {
      success: (function(_this) {
        return function() {
          _this._setBodyContentType(null);
          if (callbacks != null) {
            return callbacks.success(_this);
          }
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errString, json;
          if (callbacks != null) {
            errString = "failed to delete body. statusCode: " + xhr.status;
            try {
              json = JSON.parse(xhr.responseText);
              if (json.errorCode != null) {
                errString += " error code: " + json.errorCode;
              }
              if (json.message != null) {
                return errString += " error message: " + json.message;
              }
            } catch (_error) {

            } finally {
              callbacks.failure(_this, errString);
            }
          }
        };
      })(this)
    };
    return wrapper.send(requestCallbacks);
  };


  /** Check if given ID is valid for object ID.
   Valid pattern: ^[a-zA-Z0-9-_\\.]{2,100}$
   @param {String} objectID to be checked.
   @returns true if given ID is valid, false otherwise.
   */

  KiiObject.isValidObjectID = function(objectID) {
    var pattern;
    pattern = /^[a-zA-Z0-9-_.]{2,100}$/i;
    if ((typeof objectID).toLowerCase() !== "string") {
      return false;
    } else if ((objectID.match(pattern)) !== null) {
      return true;
    } else {
      return false;
    }
  };

  return KiiObject;

})();


/**
    @class Represents a KiiQuery object
    @exports root.KiiQuery as KiiQuery
 */

root.KiiQuery = (function() {
  function KiiQuery(query) {
    this._dictValue = __bind(this._dictValue, this);
    this.sortByAsc = __bind(this.sortByAsc, this);
    this.sortByDesc = __bind(this.sortByDesc, this);
    this.setLimit = __bind(this.setLimit, this);
    this.getLimit = __bind(this.getLimit, this);
    this._setClause = __bind(this._setClause, this);
    this.setPaginationKey = __bind(this.setPaginationKey, this);
    this.getPaginationKey = __bind(this.getPaginationKey, this);
    this._clone = __bind(this._clone, this);
    return this._clone(query);
  }

  KiiQuery.prototype._clone = function(obj) {
    var key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = this._clone(obj[key]);
    }
    return newInstance;
  };

  KiiQuery.prototype.getPaginationKey = function() {
    return this._paginationKey;
  };

  KiiQuery.prototype.setPaginationKey = function(_paginationKey) {
    this._paginationKey = _paginationKey;
  };

  KiiQuery.prototype._setClause = function(_clause) {
    this._clause = _clause;
  };


  /** Get the limit of the current query
  @returns {Number}
   */

  KiiQuery.prototype.getLimit = function() {
    return this._limit;
  };


  /** Set the limit of the given query
  @param value The desired limit. Must be an integer > 0
  @throws InvalidLimitException
   */

  KiiQuery.prototype.setLimit = function(value) {
    if (value > 0) {
      return this._limit = value;
    } else {
      throw new root.InvalidLimitException;
    }
  };


  /** Create a KiiQuery object based on a KiiClause
  <br><br>
  By passing null as the ‘clause’ parameter, all objects can be retrieved.
  @param clause The KiiClause to be executed with the query
   */

  KiiQuery.queryWithClause = function(clause) {
    var query;
    query = new root.KiiQuery();
    query._setClause(clause);
    return query;
  };


  /** Set the query to sort by a field in descending order
  
  If a sort has already been set, it will be overwritten.
  @param {String} field The key that should be used to sort
   */

  KiiQuery.prototype.sortByDesc = function(_sortField) {
    this._sortField = _sortField;
    return this._sortDescending = true;
  };


  /** Set the query to sort by a field in ascending order
  
  If a sort has already been set, it will be overwritten.
  @param {String} field The key that should be used to sort
   */

  KiiQuery.prototype.sortByAsc = function(_sortField) {
    this._sortField = _sortField;
    return this._sortDescending = false;
  };

  KiiQuery._emptyDictValue = function() {
    return {
      type: "all"
    };
  };

  KiiQuery.prototype._dictValue = function() {
    var bucketQuery, data;
    data = {};
    data.bestEffortLimit = this._limit;
    if (this._paginationKey != null) {
      data.paginationKey = this._paginationKey;
    }
    bucketQuery = {
      descending: this._sortDescending
    };
    if (this._clause != null) {
      bucketQuery.clause = this._clause._getDictValue();
    } else {
      bucketQuery.clause = root.KiiQuery._emptyDictValue();
    }
    if (this._sortField != null) {
      bucketQuery.orderBy = this._sortField;
    }
    data.bucketQuery = bucketQuery;
    return data;
  };

  return KiiQuery;

})();


/**
    @class Represents a KiiClause expression object
    @exports root.KiiClause as KiiClause
 */

root.KiiClause = (function() {
  function KiiClause() {
    this._getDictValue = __bind(this._getDictValue, this);
    this._setDictValue = __bind(this._setDictValue, this);
    this._setWhereClauses = __bind(this._setWhereClauses, this);
    this._setWhereType = __bind(this._setWhereType, this);
  }

  KiiClause.constructor = function() {
    KiiClause._whereClauses = [];
    return KiiClause._dictExpression = {};
  };

  KiiClause.prototype._setWhereType = function(_whereType) {
    this._whereType = _whereType;
  };

  KiiClause.prototype._setWhereClauses = function(_whereClauses) {
    this._whereClauses = _whereClauses;
  };

  KiiClause.prototype._setDictValue = function(_dictExpression) {
    this._dictExpression = _dictExpression;
  };

  KiiClause.prototype._getDictValue = function() {
    var clause, clauses, retDict, _i, _len, _ref;
    retDict = {};
    if ((this._whereClauses != null) && (this._whereType != null)) {
      clauses = [];
      if (this._whereClauses.length === 1) {
        clause = this._whereClauses[0];
        if (this._whereType === "not") {
          retDict = {
            "type": this._whereType,
            "clause": clause._getDictValue()
          };
        } else {
          retDict = clause._getDictValue();
        }
      } else {
        _ref = this._whereClauses;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          clause = _ref[_i];
          clauses.push(clause._getDictValue());
        }
        retDict = {
          "type": this._whereType,
          "clauses": clauses
        };
      }
    } else if (this._whereClauses != null) {
      if (this._whereClauses.length > 0) {
        retDict = this._whereClauses[0]._getDictValue();
      }
    } else if (this._dictExpression != null) {
      retDict = this._dictExpression;
    }
    if (retDict == null) {
      retDict = root.KiiQuery.emptyDictValue();
    }
    return retDict;
  };

  KiiClause.createWithWhere = function(whereType, whereClauses) {
    var expression;
    expression = new root.KiiClause();
    expression._setWhereType(whereType);
    expression._setWhereClauses(whereClauses);
    return expression;
  };

  KiiClause.create = function(operator, key, value) {
    var expression, _dict;
    expression = new root.KiiClause();
    _dict = {};
    if (operator === "=") {
      _dict.type = "eq";
      _dict.field = key;
      _dict.value = value;
    } else if (operator === "<") {
      _dict.type = "range";
      _dict.field = key;
      _dict.upperLimit = value;
      _dict.upperIncluded = false;
    } else if (operator === "<=") {
      _dict.type = "range";
      _dict.field = key;
      _dict.upperLimit = value;
      _dict.upperIncluded = true;
    } else if (operator === ">") {
      _dict.type = "range";
      _dict.field = key;
      _dict.lowerLimit = value;
      _dict.lowerIncluded = false;
    } else if (operator === ">=") {
      _dict.type = "range";
      _dict.field = key;
      _dict.lowerLimit = value;
      _dict.lowerIncluded = true;
    } else if (operator === "in") {
      _dict.type = "in";
      _dict.field = key;
      _dict.values = value;
    } else if (operator === "prefix") {
      _dict.type = "prefix";
      _dict.field = key;
      _dict.prefix = value;
    } else if (operator === "hasField") {
      _dict.type = "hasField";
      _dict.field = key;
      _dict.fieldType = value;
    }
    expression._setDictValue(_dict);
    return expression;
  };


  /** Create a KiiClause with the AND operator concatenating multiple KiiClause objects
  @param {List} A variable-length list of KiiClause objects to concatenate
  @example
  KiiClause clause = KiiClause.and(clause1, clause2, clause3, . . .)
   */

  KiiClause.and = function() {
    return KiiClause.createWithWhere("and", arguments);
  };


  /** Create a KiiClause with the OR operator concatenating multiple KiiClause objects
  <br><br>
  <b>Note:</b>
  Query performance will be worse as the number of objects in bucket increases, so we recommend you avoid the OR clause if possible.
  @param {List} A variable-length list of KiiClause objects to concatenate
  @example
  KiiClause clause = KiiClause.or(clause1, clause2, clause3, . . .)
   */

  KiiClause.or = function() {
    return KiiClause.createWithWhere("or", arguments);
  };


  /** Create a KiiClause with the NOT operator concatenating a KiiClause object
  <br><br>
  <b>Note:</b>
  Query performance will be worse as the number of objects in bucket increases, so we recommend you avoid the NOT clause if possible.
  @param {Object} clause KiiClause object to negate
   */

  KiiClause.not = function(clause) {
    return KiiClause.createWithWhere("not", [clause]);
  };


  /** Create an expression of the form (key == value)
  @param {String} key The key to compare
  @param {Object} value the value to compare
   */

  KiiClause.equals = function(key, value) {
    if (value._className != null) {
      value = value.objectURI;
    }
    return root.KiiClause.create("=", key, value);
  };


  /** Create an expression of the form (key != value)
  @param {String} key The key to compare
  @param {Object} value the value to compare
   */

  KiiClause.notEquals = function(key, value) {
    if (value._className != null) {
      value = value.objectURI;
    }
    return root.KiiClause.createWithWhere("not", [root.KiiClause.equals(key, value)]);
  };


  /** Create an expression of the form (key > value)
  @param {String} key The key to compare
  @param {Object} value the value to compare
   */

  KiiClause.greaterThan = function(key, value) {
    return root.KiiClause.create(">", key, value);
  };


  /** Create an expression of the form (key >= value)
  @param {String} key The key to compare
  @param {Object} value the value to compare
   */

  KiiClause.greaterThanOrEqual = function(key, value) {
    return root.KiiClause.create(">=", key, value);
  };


  /** Create an expression of the form (key < value)
  @param {String} key The key to compare
  @param {Object} value the value to compare
   */

  KiiClause.lessThan = function(key, value) {
    return root.KiiClause.create("<", key, value);
  };


  /** Create an expression of the form (key <= value)
  @param {String} key The key to compare
  @param {Object} value the value to compare
   */

  KiiClause.lessThanOrEqual = function(key, value) {
    return root.KiiClause.create("<=", key, value);
  };


  /** Create an expression of the form (key in values)
  @param {String} key The key to compare
  @param {Array} values to be compared with.
   */

  KiiClause["in"] = function(key, values) {
    return root.KiiClause.create("in", key, values);
  };


  /** Create an expression of the form (key in values)
  @param {String} key The key to compare
  @param {Array} values to be compared with.
   */

  KiiClause.inClause = function(key, values) {
    return root.KiiClause.create("in", key, values);
  };


  /** Create an expression of the form (key STARTS WITH value)
  @param {String} key The key to compare
  @param {Object} value the value to compare
   */

  KiiClause.startsWith = function(key, value) {
    return root.KiiClause.create("prefix", key, value);
  };


  /**
      Create a clause of geo distance. This clause inquires objects in the specified circle.
      @param {String} key Name of the key to inquire, which holds geo point.
      @param {KiiGeoPoint} center Geo point which specify center of the circle.
      @param {Number} radius Radius of the circle. unit is meter. value should be in range of ]0, 20000000]
      @param {String} putDistanceInto Used for retrieve distance from the center from the query result.Must match the pattern "^[a-zA-Z_][a-zA-Z0-9_]*$".
      If the specified value is null, query result will not contain the distance.
      <b>Note:</b> You can get the results in ascending order of distances from center. To do so, build the orderBy field  by
      "_calculated.{specified value of putDistanceInto}" and pass it in {@link KiiQuery#sortByAsc}. Note that, descending order
      of distances is not supported. The unit of distance is meter.
      @return {KiiClause} KiiClaluse reference.
      @throws {String}<li> Specified key is not a string or an empty string.</li>
              <li>center is not an object of KiiGeoPoint.</li>
              <li>putDistanceInto is not a string or an empty string.</li>
  
      @example
          var putDistanceInto = "distanceFromCurrentLoc";
          var currentLoc = ..; // current location
          var clause = KiiClause.geoDistance("location", currentLoc, 4000, putDistanceInto);
          var query = KiiQuery.queryWithClause(clause);
          // Sort by distances by ascending order.(Optional, use only if you intend to retrieve the distances in a ascending order).
          var orderByKey = "_calculated." + putDistanceInto;
          query.sortByAsc(orderByKey);
          // Define the callbacks
          var bucket = Kii.bucketWithName("MyBucket");
          var queryCallback = {
              success: function(queryPerformed, resultSet, nextQuery) {
                  // check the first object from resultSet.
                  var object = resultSet[0];
                  var point = object.get("location");
                  var distanceToMyLocation = object.get("_calculated")[putDistanceInto];
              },
              failure: function(queryPerformed, anErrorString) {
                  // do something with the error response
              }
          };
          bucket.executeQuery(query, queryCallback);
   */

  KiiClause.geoDistance = function(key, center, radius, putDistanceInto) {
    var expression, isValidGeoPoint, isValidString, pattern, _dict;
    isValidString = function(str) {
      return typeof str === 'string' && str.length > 0;
    };
    isValidGeoPoint = function(point) {
      if (point == null) {
        return false;
      }
      return point instanceof root.KiiGeoPoint;
    };
    if (!isValidString(key)) {
      throw root.InvalidArgumentException("Specified key is not a string or is an empty string.");
    }
    if (!isValidGeoPoint(center)) {
      throw root.InvalidArgumentException("center is not a reference of KiiGeoPoint.");
    }
    pattern = "^[a-zA-Z_][a-zA-Z0-9_]*$";
    if ((putDistanceInto != null) && !putDistanceInto.match(pattern)) {
      throw root.InvalidArgumentException("putDistanceInto is invalid.");
    }
    if (radius <= 0 || radius > 20000000 || isNaN(radius)) {
      throw root.InvalidArgumentException("radius is invalid.");
    }
    expression = new root.KiiClause();
    _dict = {};
    _dict.type = "geodistance";
    _dict.field = key;
    center = center._toDict();
    _dict.center = center;
    _dict.radius = radius;
    _dict.putDistanceInto = putDistanceInto;
    expression._setDictValue(_dict);
    return expression;
  };


  /**
      Create a clause of geo box. This clause inquires objects in the specified rectangle.
      Rectangle would be placed parallel to the equator with specified coordinates of the corner.
      @param {String} key Key to inquire which holds geo point.
      @param {KiiGeoPoint} northEast North-Eest corner of the rectangle.
      @param {KiiGeoPoint} southWest South-Wast corner of the rectangle.
      @return {KiiClause}  KiiClause reference.
      @throws {String}<li> Specified key is not a string or is an empty string.</li>
              <li>northEast or southWest is not a reference of KiiGeoPoint.</li>
   */

  KiiClause.geoBox = function(key, northEast, southWest) {
    var expression, isValidGeoPoint, isValidKey, ne, sw, _dict;
    isValidKey = function(key) {
      return typeof key === 'string' && key.length > 0;
    };
    isValidGeoPoint = function(point) {
      if (point == null) {
        return false;
      }
      return point instanceof root.KiiGeoPoint;
    };
    if (!isValidKey(key)) {
      throw root.InvalidArgumentException("Specified key is not a string or is an empty string.");
    }
    if (!isValidGeoPoint(northEast) || !isValidGeoPoint(southWest)) {
      throw root.InvalidArgumentException("northEast or southWest is not a reference of KiiGeoPoint.");
    }
    expression = new root.KiiClause();
    _dict = {};
    _dict.type = "geobox";
    _dict.field = key;
    ne = northEast._toDict();
    sw = southWest._toDict();
    _dict.box = {
      ne: ne,
      sw: sw
    };
    expression._setDictValue(_dict);
    return expression;
  };


  /** Create an expression to returns all entities that have a specified field and type.
  @param {String} key name of the specified field.
  @param {String} fieldType The type of the content of the field. The type of the content of the field must be provided, possible values are "STRING", "INTEGER", "DECIMAL" and "BOOLEAN".
   */

  KiiClause.hasField = function(key, fieldType) {
    if (fieldType !== "STRING" && fieldType !== "INTEGER" && fieldType !== "DECIMAL" && fieldType !== "BOOLEAN") {
      throw root.InvalidArgumentException("fieldType is invalid.");
    }
    return root.KiiClause.create("hasField", key, fieldType);
  };

  return KiiClause;

})();


/*
 * This class has deprecated.
 * Use KiiXHRWrapper.
 */

KiiRequest = (function() {
  KiiRequest.prototype.getPath = function() {
    return this._path;
  };

  KiiRequest.prototype.setPath = function(_path) {
    this._path = _path;
  };

  KiiRequest.prototype.getMethod = function() {
    return this._method;
  };

  KiiRequest.prototype.setMethod = function(_method) {
    this._method = _method;
  };

  KiiRequest.prototype.getHeaders = function() {
    return this._headers;
  };

  KiiRequest.prototype.setHeaders = function(_headers) {
    this._headers = _headers;
  };

  KiiRequest.prototype.getData = function() {
    return this._data;
  };

  KiiRequest.prototype.setData = function(_data) {
    this._data = _data;
  };

  KiiRequest.prototype.getContentType = function() {
    return this._contentType;
  };

  KiiRequest.prototype.setContentType = function(_contentType) {
    this._contentType = _contentType;
  };

  KiiRequest.prototype.isAnonymous = function() {
    return this._anonymous;
  };

  KiiRequest.prototype.setAnonymous = function(_anonymous) {
    this._anonymous = _anonymous;
  };

  KiiRequest.prototype.getAccept = function() {
    return this._accept;
  };

  KiiRequest.prototype.setAccept = function(_accept) {
    this._accept = _accept;
  };

  KiiRequest.prototype.addHeader = function(name, value) {
    return this._headers[name] = value;
  };

  KiiRequest.prototype.setAdminToken = function(token) {
    return this._adminToken = token;
  };

  function KiiRequest(path, withApp) {
    this.execute = __bind(this.execute, this);
    this.setAdminToken = __bind(this.setAdminToken, this);
    this.addHeader = __bind(this.addHeader, this);
    this.setAccept = __bind(this.setAccept, this);
    this.getAccept = __bind(this.getAccept, this);
    this.setAnonymous = __bind(this.setAnonymous, this);
    this.isAnonymous = __bind(this.isAnonymous, this);
    this.setContentType = __bind(this.setContentType, this);
    this.getContentType = __bind(this.getContentType, this);
    this.setData = __bind(this.setData, this);
    this.getData = __bind(this.getData, this);
    this.setHeaders = __bind(this.setHeaders, this);
    this.getHeaders = __bind(this.getHeaders, this);
    this.setMethod = __bind(this.setMethod, this);
    this.getMethod = __bind(this.getMethod, this);
    this.setPath = __bind(this.setPath, this);
    this.getPath = __bind(this.getPath, this);
    this._path = withApp ? "/apps/" + (root.Kii.getAppID()) + path : path;
    this._method = "GET";
    this._headers = {
      "accept": "*/*"
    };
    this._contentType = "application/json";
    this._anonymous = false;
    this._success = (function(_this) {
      return function() {};
    })(this);
    this._failure = (function(_this) {
      return function() {};
    })(this);
    this._httpRequest = null;
  }

  KiiRequest.prototype.execute = function(callbacks, ignoreBody) {
    var h, key, name, sendData, url, value, _ref;
    this._success = callbacks.success != null ? callbacks.success : this._success;
    this._failure = callbacks.failure != null ? callbacks.failure : this._failure;
    this._ignoreBody = ignoreBody;
    url = root.Kii.getBaseURL() + this._path;
    root.Kii.logger("POSTING: ");
    root.Kii.logger(JSON.stringify(this._data));
    if (KiiUtilities._isJSONType(this._contentType)) {
      sendData = JSON.stringify(this._data);
    } else {
      sendData = this._data;
    }
    root.Kii.logger("Making request[" + this._method + "] to " + url + " with data: " + sendData);
    h = root.Kii.getAdditionalHeaders();
    if (h != null) {
      for (name in h) {
        value = h[name];
        this._headers[name] = value;
      }
    }
    this._headers['x-kii-appid'] = root.Kii.getAppID();
    this._headers['x-kii-appkey'] = root.Kii.getAppKey();
    this._headers['x-kii-sdk'] = root.KiiSDKClientInfo.getSDKClientInfo();
    if (this._accept != null) {
      this._headers['accept'] = this._accept;
    }
    if (!this._anonymous && (root.KiiUser.getCurrentUser() != null)) {
      this._headers['Authorization'] = "Bearer " + (root.KiiUser.getCurrentUser().getAccessToken());
    }
    if (this._adminToken != null) {
      this._headers['Authorization'] = "Bearer " + this._adminToken;
    }
    if (this._contentType != null) {
      this._headers['Content-Type'] = this._contentType;
    }
    root.Kii.logger("Headers: ");
    root.Kii.logger(JSON.stringify(this._headers));
    callbacks = {
      onComplete: (function(_this) {
        return function() {
          var e, errString, error, json, responseHeaders, xhr, _ref;
          xhr = _this._httpRequest.xhr;
          if (xhr.readyState === 4) {
            if ((200 <= (_ref = xhr.status) && _ref < 400)) {
              root.Kii.logger("Completed Request[" + xhr.status + "]");
              root.Kii.logger(xhr.responseText);
              responseHeaders = _this._parseResponseHeaders(xhr.getAllResponseHeaders());
              if (_this._ignoreBody) {
                return _this._success(null, xhr.status);
              } else {
                try {
                  json = JSON.parse(xhr.responseText);
                } catch (_error) {
                  e = _error;
                  json = null;
                }
                if (json != null) {
                  if (json.errorCode != null) {
                    errString = json.errorCode;
                    if (json.message != null) {
                      errString += ": " + json.message;
                    }
                    return _this._failure(errString, xhr.status, json.errorCode);
                  } else {
                    return _this._success(json, xhr.status, responseHeaders);
                  }
                } else {
                  return _this._success(null, xhr.status, null);
                }
              }
            } else {
              root.Kii.logger('Error loading data...');
              errString = xhr.status + " : " + root.Kii.getBaseURL() + _this._path;
              try {
                json = JSON.parse(decodeURIComponent(xhr.responseText));
              } catch (_error) {
                error = _error;
                json = null;
              }
              if (json != null) {
                if (json.errorCode != null) {
                  errString = json.errorCode;
                  if (json.message != null) {
                    errString += ": " + json.message;
                  }
                }
              }
              root.Kii.logger("Failure: " + errString);
              root.Kii.logger(xhr.responseText);
              return _this._failure(errString, xhr.status);
            }
          }
        };
      })(this),
      onError: (function(_this) {
        return function() {
          var errString, error, json, xhr;
          xhr = _this._httpRequest.xhr;
          root.Kii.logger('Error loading data...');
          errString = xhr.status + " : " + root.Kii.getBaseURL() + _this._path;
          try {
            json = JSON.parse(decodeURIComponent(xhr.responseText));
          } catch (_error) {
            error = _error;
            json = null;
          }
          if (json != null) {
            if (json.errorCode != null) {
              errString = json.errorCode;
              if (json.message != null) {
                errString += ": " + json.message;
              }
            }
          }
          root.Kii.logger("Failure: " + errString);
          root.Kii.logger(xhr.responseText);
          return _this._failure(errString, xhr.status);
        };
      })(this)
    };
    this._httpRequest = this._createHttpRequest(this._method, url, callbacks);
    if (this._httpRequest.xhr == null) {
      this._failure("Cross-Origin Resource Sharing is not supported by the browser.", 0);
    }
    _ref = this._headers;
    for (key in _ref) {
      value = _ref[key];
      this._httpRequest.xhr.setRequestHeader(key, value);
    }
    if (this._method !== "GET" && this._method !== "DELETE") {
      return this._httpRequest.xhr.send(sendData);
    } else {
      return this._httpRequest.xhr.send();
    }
  };

  KiiRequest.prototype._createHttpRequest = function(method, url, callbacks) {
    var request;
    request = null;
    if (root.Kii._getHttpRequestType() === null) {
      if (typeof jQuery !== 'undefined') {
        root.Kii.logger("Use jQuery");
        request = new KiiJQueryHttpRequest(method, url, callbacks);
      } else if (typeof XMLHttpRequest !== 'undefined') {
        root.Kii.logger("Use XMLHttpRequest");
        request = new KiiXMLHttpRequest(method, url, callbacks);
      } else if (typeof Titanium !== 'undefined') {
        root.Kii.logger("Use Titanium");
        request = new KiiTitaniumHttpRequest(method, url, callbacks);
      }
    } else {
      root.Kii.logger("Use http request backdoor");
      if (root.Kii._getHttpRequestType() === root._KiiHttpRequestType.jQuery) {
        root.Kii.logger("Use jQuery");
        request = new KiiJQueryHttpRequest(method, url, callbacks);
      } else if (root.Kii._getHttpRequestType() === root._KiiHttpRequestType.XMLHttpRequest) {
        root.Kii.logger("Use XMLHttpRequest");
        request = new KiiXMLHttpRequest(method, url, callbacks);
      } else if (root.Kii._getHttpRequestType() === root._KiiHttpRequestType.Titanium) {
        root.Kii.logger("Use Titanium");
        request = new KiiTitaniumHttpRequest(method, url, callbacks);
      }
    }
    return request;
  };

  KiiRequest.prototype._parseResponseHeaders = function(headerStr) {
    var headerPair, headerPairs, headers, i, index, key, val;
    headers = {};
    if (!headerStr) {
      return headers;
    }
    headerPairs = headerStr.split("\r\n");
    i = 0;
    while (i < headerPairs.length) {
      headerPair = headerPairs[i];
      index = headerPair.indexOf(": ");
      if (index > 0) {
        key = headerPair.substring(0, index).toLowerCase();
        val = headerPair.substring(index + 2);
        headers[key] = val;
      }
      i++;
    }
    return headers;
  };

  return KiiRequest;

})();


/**
    @class Represents a KiiUser object
    @exports root.KiiUser as KiiUser
 */

root.KiiUser = (function() {
  function KiiUser() {
    this._setAuthToken = __bind(this._setAuthToken, this);
    this._getHttpURI = __bind(this._getHttpURI, this);
    this._clone = __bind(this._clone, this);
    this._getSubscriberPath = __bind(this._getSubscriberPath, this);
    this.pushInstallation = __bind(this.pushInstallation, this);
    this.pushSubscription = __bind(this.pushSubscription, this);
    this._listTopicsUsingCallbacks = __bind(this._listTopicsUsingCallbacks, this);
    this.listTopics = __bind(this.listTopics, this);
    this.topicWithName = __bind(this.topicWithName, this);
    this._groupWithJSON = __bind(this._groupWithJSON, this);
    this._setAuthHeader = __bind(this._setAuthHeader, this);
    this._getXhrWrapper = __bind(this._getXhrWrapper, this);
    this._getRequest = __bind(this._getRequest, this);
    this._updateWithJSON = __bind(this._updateWithJSON, this);
    this._validateLocalPhoneNumber = __bind(this._validateLocalPhoneNumber, this);
    this._validateIdentityData = __bind(this._validateIdentityData, this);
    this._updateWithUserFields = __bind(this._updateWithUserFields, this);
    this._updateWithIdentityData = __bind(this._updateWithIdentityData, this);
    this._deleteUsingCallbacks = __bind(this._deleteUsingCallbacks, this);
    this["delete"] = __bind(this["delete"], this);
    this._refreshUsingCallbacks = __bind(this._refreshUsingCallbacks, this);
    this.refresh = __bind(this.refresh, this);
    this._saveUsingCallbacks = __bind(this._saveUsingCallbacks, this);
    this.save = __bind(this.save, this);
    this._changeEmailUsingCallbacks = __bind(this._changeEmailUsingCallbacks, this);
    this.changeEmail = __bind(this.changeEmail, this);
    this._changePhoneUsingCallbacks = __bind(this._changePhoneUsingCallbacks, this);
    this.changePhone = __bind(this.changePhone, this);
    this._ownerOfGroupsUsingCallbacks = __bind(this._ownerOfGroupsUsingCallbacks, this);
    this.ownerOfGroups = __bind(this.ownerOfGroups, this);
    this._memberOfGroupsUsingCallbacks = __bind(this._memberOfGroupsUsingCallbacks, this);
    this.memberOfGroups = __bind(this.memberOfGroups, this);
    this.resendPhoneNumberVerification = __bind(this.resendPhoneNumberVerification, this);
    this.resendEmailVerification = __bind(this.resendEmailVerification, this);
    this._resendVerificationUsingCallbacks = __bind(this._resendVerificationUsingCallbacks, this);
    this.resendVerification = __bind(this.resendVerification, this);
    this.verifyPhoneNumber = __bind(this.verifyPhoneNumber, this);
    this._verifyCredentialsUsingCallbacks = __bind(this._verifyCredentialsUsingCallbacks, this);
    this.verifyCredentials = __bind(this.verifyCredentials, this);
    this._updatePasswordUsingCallbacks = __bind(this._updatePasswordUsingCallbacks, this);
    this.updatePassword = __bind(this.updatePassword, this);
    this._updateUsingCallbacks = __bind(this._updateUsingCallbacks, this);
    this.update = __bind(this.update, this);
    this._putIdentityUsingCallbacks = __bind(this._putIdentityUsingCallbacks, this);
    this.putIdentity = __bind(this.putIdentity, this);
    this._registerUsingCallbacks = __bind(this._registerUsingCallbacks, this);
    this.register = __bind(this.register, this);
    this._authenticateWithToken = __bind(this._authenticateWithToken, this);
    this._authenticate = __bind(this._authenticate, this);
    this.encryptedBucketWithName = __bind(this.encryptedBucketWithName, this);
    this.bucketWithName = __bind(this.bucketWithName, this);
    this.get = __bind(this.get, this);
    this.set = __bind(this.set, this);
    this.objectURI = __bind(this.objectURI, this);
    this.getAccessTokenObject = __bind(this.getAccessTokenObject, this);
    this._setExpiresAt = __bind(this._setExpiresAt, this);
    this._setAccessToken = __bind(this._setAccessToken, this);
    this.getAccessToken = __bind(this.getAccessToken, this);
    this.getLinkedSocialAccounts = __bind(this.getLinkedSocialAccounts, this);
    this._setPhoneVerified = __bind(this._setPhoneVerified, this);
    this.getPhoneVerified = __bind(this.getPhoneVerified, this);
    this._setEmailVerified = __bind(this._setEmailVerified, this);
    this.getEmailVerified = __bind(this.getEmailVerified, this);
    this._setModified = __bind(this._setModified, this);
    this.getModified = __bind(this.getModified, this);
    this._setCreated = __bind(this._setCreated, this);
    this.getCreated = __bind(this.getCreated, this);
    this.setLocale = __bind(this.setLocale, this);
    this.getLocale = __bind(this.getLocale, this);
    this.setCountry = __bind(this.setCountry, this);
    this.getCountry = __bind(this.getCountry, this);
    this._clearPassword = __bind(this._clearPassword, this);
    this._setPassword = __bind(this._setPassword, this);
    this._setLocalPhone = __bind(this._setLocalPhone, this);
    this.getPendingPhoneNumber = __bind(this.getPendingPhoneNumber, this);
    this._setPhoneNumber = __bind(this._setPhoneNumber, this);
    this.getPhoneNumber = __bind(this.getPhoneNumber, this);
    this.getPendingEmailAddress = __bind(this.getPendingEmailAddress, this);
    this._setEmailAddress = __bind(this._setEmailAddress, this);
    this.getEmailAddress = __bind(this.getEmailAddress, this);
    this.isPseudoUser = __bind(this.isPseudoUser, this);
    this.setDisplayName = __bind(this.setDisplayName, this);
    this.getDisplayName = __bind(this.getDisplayName, this);
    this._setDisabled = __bind(this._setDisabled, this);
    this.disabled = __bind(this.disabled, this);
    this._setUsername = __bind(this._setUsername, this);
    this.getUsername = __bind(this.getUsername, this);
    this.getID = __bind(this.getID, this);
    this._setUUID = __bind(this._setUUID, this);
    this.getUUID = __bind(this.getUUID, this);
    this._customInfo = {};
  }


  /** @deprecated Use {@link KiiUser.getId} instead.
  Get the UUID of the given user, assigned by the server
  @returns {String}
   */

  KiiUser.prototype.getUUID = function() {
    return this._uuid;
  };

  KiiUser.prototype._setUUID = function(_uuid) {
    this._uuid = _uuid;
  };


  /** Get the ID of the current KiiUser instance.
  @returns {String} Id of the user or null if the user has not saved to cloud.
   */

  KiiUser.prototype.getID = function() {
    return this._uuid;
  };


  /** Get the username of the given user
  @returns {String}
   */

  KiiUser.prototype.getUsername = function() {
    return this._username;
  };

  KiiUser.prototype._setUsername = function(value) {
    var trimmedUsername;
    trimmedUsername = KiiUtilities._trim(value);
    root.Kii.logger("Setting username: " + trimmedUsername);
    if (KiiUtilities._validateUsername(trimmedUsername)) {
      return this._username = trimmedUsername;
    } else {
      throw new root.InvalidUsernameException;
    }
  };


  /**
  Return true if the user is disabled, false when enabled and undefined
  when user is not refreshed.
  Call {@link KiiUser#refresh()} prior calling this method to get
  correct status.
   */

  KiiUser.prototype.disabled = function() {
    return this._disabled;
  };

  KiiUser.prototype._setDisabled = function(_disabled) {
    this._disabled = _disabled;
  };


  /** Get the display name associated with this user
  @returns {String}
   */

  KiiUser.prototype.getDisplayName = function() {
    return this._displayName;
  };


  /** Set the display name associated with this user. Cannot be used for logging a user in; is non-unique
  @param {String} value Must be between 1-50 alphanumeric characters.
  @throws {InvalidDisplayNameException} If the displayName is not a valid format
   */

  KiiUser.prototype.setDisplayName = function(value) {
    if (!KiiUtilities._validateDisplayName(value)) {
      throw new root.InvalidDisplayNameException;
    }
    return this._displayName = value;
  };


  /** Get whether or not the user is pseudo user.
  If this method is not called for current login user, calling
  {@link KiiUser#refresh()} method is necessary to get a correct value.
  @returns {Boolean} whether this user is pseudo user or not.
   */

  KiiUser.prototype.isPseudoUser = function() {
    if (this._hasPassword != null) {
      return !this._hasPassword;
    } else {
      return !this._username && !this._emailAddress && !this._phoneNumber;
    }
  };


  /** Get the email address associated with this user
  @returns {String}
   */

  KiiUser.prototype.getEmailAddress = function() {
    return this._emailAddress;
  };

  KiiUser.prototype._setEmailAddress = function(value) {
    var trimmedEmail;
    trimmedEmail = KiiUtilities._trim(value);
    root.Kii.logger("Setting email: " + trimmedEmail);
    if (KiiUtilities._validateEmail(trimmedEmail)) {
      return this._emailAddress = trimmedEmail;
    } else {
      throw new root.InvalidEmailException;
    }
  };


  /** Get the email of this user that has not been verified.
  When the user's email has been changed and email verification is required in you app configuration,
  New email is stored as pending email.
  After the new email has been verified, the address can be obtained by {@link KiiUser.getEmailAddress}
  @returns {String} User's new email address has not been verified.
  null if no pending email field is included in refresh
  response or undefined when no refresh operation has been done before.
   */

  KiiUser.prototype.getPendingEmailAddress = function() {
    return this._emailAddressPending;
  };


  /** Get the phone number associated with this user
  @returns {String}
   */

  KiiUser.prototype.getPhoneNumber = function() {
    return this._phoneNumber;
  };

  KiiUser.prototype._setPhoneNumber = function(value) {
    root.Kii.logger("Setting phone number: " + value);
    if (KiiUtilities._validatePhoneNumber(value)) {
      return this._phoneNumber = value;
    } else {
      throw new root.InvalidPhoneNumberException;
    }
  };


  /** Get the phone of this user that has not been verified.
  When the user's phone has been changed and phone verification is required in you app configuration,
  New phone is stored as pending phone.
  After the new phone has been verified, the address can be obtained by {@link KiiUser.getPhoneNumber}
  @returns {String} User's new phone number has not been verified.
  null if no pending phone field is included in refresh
  response or undefined when no refresh operation has been done before.
   */

  KiiUser.prototype.getPendingPhoneNumber = function() {
    return this._phoneNumberPending;
  };

  KiiUser.prototype._setLocalPhone = function(phoneNumber, country) {
    root.Kii.logger("Setting local phone number: " + phoneNumber + ", country: " + country);
    if (!KiiUtilities._validateLocalPhone(phoneNumber)) {
      throw new root.InvalidPhoneNumberException;
    }
    if (!KiiUtilities._validateCountryCode(country)) {
      throw new root.InvalidCountryException;
    }
    this._phoneNumber = phoneNumber;
    return this._country = country;
  };

  KiiUser.prototype._setPassword = function(value) {
    if (KiiUtilities._validatePassword(value)) {
      return this._password = value;
    } else {
      throw new root.InvalidPasswordException;
    }
  };

  KiiUser.prototype._clearPassword = function() {
    return this._password = null;
  };


  /** Get the country code associated with this user
  @returns {String}
   */

  KiiUser.prototype.getCountry = function() {
    return this._country;
  };


  /** Set the country code associated with this user
  @param {String} value The country code to set. Must be 2 alphabetic characters. Ex: US, JP, CN
  @throws {InvalidCountryException} If the country code is not a valid format
   */

  KiiUser.prototype.setCountry = function(value) {
    if (KiiUtilities._validateCountryCode(value)) {
      return this._country = value;
    } else {
      throw new root.InvalidCountryException;
    }
  };


  /** Get the locale associated with this user
  @returns {String}
   */

  KiiUser.prototype.getLocale = function() {
    return this._locale;
  };


  /** Set the locale associated with this user
  The locale argument must be BCP 47 language tag.
  Examples:
  "en": English
  "de-AT": German as used in Austria.
  "zh-Hans-CN": Chinese written in simplified characters as used in China.
  @param {String} value The locale to set.
   */

  KiiUser.prototype.setLocale = function(value) {
    return this._locale = value;
  };


  /** Get the server's creation date of this user
  @returns {String}
   */

  KiiUser.prototype.getCreated = function() {
    return this._created;
  };

  KiiUser.prototype._setCreated = function(_created) {
    this._created = _created;
  };


  /** @deprecated Get the modified date of the given user, assigned by the server
  @returns {String}
   */

  KiiUser.prototype.getModified = function() {
    return this._modified;
  };

  KiiUser.prototype._setModified = function(_modified) {
    this._modified = _modified;
  };


  /** Get the status of the user's email verification. This field is assigned by the server
  @returns {Boolean} true if the user's email address has been verified by the user, false otherwise.
  Could be undefined if haven't obtained value from server or not allowed to see the value.
  Should be used by current login user to check the email verification status.
   */

  KiiUser.prototype.getEmailVerified = function() {
    return this._emailVerified;
  };

  KiiUser.prototype._setEmailVerified = function(_emailVerified) {
    this._emailVerified = _emailVerified;
  };


  /** Get the status of the user's phone number verification. This field is assigned by the server
  @returns {Boolean} true if the user's email address has been verified by the user, false otherwise
  Could be undefined if haven't obtained value from server or not allowed to see the value.
  Should be used by current login user to check the phone verification status.
   */

  KiiUser.prototype.getPhoneVerified = function() {
    return this._phoneVerified;
  };

  KiiUser.prototype._setPhoneVerified = function(_phoneVerified) {
    this._phoneVerified = _phoneVerified;
  };


  /** Get the social accounts that is linked to this user.
  Refresh the user by {@link KiiUser#refresh()} prior call the method.
  Otherwise, it returns empty object.
  @returns {Object} Social network name as key and account info as value.
   */

  KiiUser.prototype.getLinkedSocialAccounts = function() {
    root.Kii.logger("third party accounts: " + this._thirdPartyAccounts);
    return this._thirdPartyAccounts != null ? this._thirdPartyAccounts : this._thirdPartyAccounts = {};
  };


  /** Get the access token for the user - only available if the user is currently logged in
  @returns {String}
   */

  KiiUser.prototype.getAccessToken = function() {
    root.Kii.logger("Getting access token: " + this._accessToken);
    return this._accessToken;
  };

  KiiUser.prototype._setAccessToken = function(_accessToken) {
    this._accessToken = _accessToken;
    return root.Kii.logger("Setting access token: " + this._accessToken);
  };

  KiiUser.prototype._setExpiresAt = function(_expiresAt) {
    this._expiresAt = _expiresAt;
    return root.Kii.logger("Setting expires at: " + this._expiresAt);
  };


  /** Return the access token and token expire time in a object.
  <table border=4 width=250>
    <tr>
      <th>Key</th>
      <th>Type</th>
      <th>Value</th>
    </tr>
    <tr>
      <td>"access_token"</td>
      <td>String</td>
      <td>required for accessing KiiCloud</td>
    </tr>
    <tr>
      <td>"expires_at"</td>
      <td>Date</td>
      <td>Access token expiration time, null if the user is not login user.</td>
    </tr>
  </table>
  @return {Object} Access token and token expires in a object.
   */

  KiiUser.prototype.getAccessTokenObject = function() {
    var accessTokenObject;
    accessTokenObject = null;
    if (this._accessToken != null) {
      accessTokenObject = {
        access_token: this._accessToken,
        expires_at: this._expiresAt
      };
    }
    return accessTokenObject;
  };


  /** Get a specifically formatted string referencing the user
  
  <br><br>The user must exist in the cloud (have a valid UUID).
  @returns {String} A URI string based on the given user. null if a URI couldn't be generated.
  @example
  var user = . . .; // a KiiUser
  var uri = user.objectURI();
   */

  KiiUser.prototype.objectURI = function() {
    var uri;
    uri = null;
    if (this._uuid != null) {
      uri = "kiicloud://users/" + this._uuid;
    }
    return uri;
  };


  /** Sets a key/value pair to a KiiUser
  
  <br><br>If the key already exists, its value will be written over. If key is empty or starting with '_', it will do nothing. Accepted types are any JSON-encodable objects.
  @param {String} key The key to set. The key must not be a system key (created, metadata, modified, type, uuid) or begin with an underscore (_)
  @param {Object} value The value to be set. Object must be of a JSON-encodable type (Ex: dictionary, array, string, number, etc)
  @example
  var user = . . .; // a KiiUser
  user.set("score", 4298);
   */

  KiiUser.prototype.set = function(key, value) {
    if (!KiiUtilities._isNonEmptyString(key) || key.indexOf("_") === 0) {
      root.Kii.logger("[WARN] Reserved key is used for custom field. key=" + key);
      return;
    }
    root.Kii.logger(this);
    root.Kii.logger(this._customInfo);
    return this._customInfo[key] = value;
  };


  /** Gets the value associated with the given key
  @param {String} key The key to retrieve
  @returns {Object} The object associated with the key. null or undefined if none exists
  @example
  var user = . . .; // a KiiUser
  var score = user.get("score");
   */

  KiiUser.prototype.get = function(key) {
    return this._customInfo[key];
  };


  /**
      The currently authenticated user
  
      @returns {KiiUser}
      @example
      var user = KiiUser.getCurrentUser();
   */

  KiiUser.getCurrentUser = function() {
    return root.Kii.getCurrentUser();
  };


  /** Create a user object to prepare for registration with credentials pre-filled
  
  <br><br>Creates an pre-filled user object for manipulation. This user will not be authenticated until one of the authentication methods are called on it. It can be treated as any other KiiObject before it is authenticated.
  @param username The user's desired username. Must be between 3 and 64 characters, which can include alphanumeric characters as well as underscores '_', dashes '-' and periods '.'
  @param password The user's password. Must be between 4-50 characters, made up of ascii characters excludes control characters.
  @returns a working KiiUser object
  @throws {InvalidUsernameException} If the username is not in the proper format
  @throws {InvalidPasswordException} If the password is not in the proper format
  @example
  var user = KiiUser.userWithUsername("myusername", "mypassword");
   */

  KiiUser.userWithUsername = function(username, password) {
    var user;
    user = new root.KiiUser();
    user._setUsername(username);
    user._setPassword(password);
    return user;
  };

  KiiUser._userWithEmailAddress = function(emailAddress, password) {
    var user;
    user = new root.KiiUser();
    user._setEmailAddress(emailAddress);
    user._setPassword(password);
    return user;
  };

  KiiUser._userWithPhoneNumber = function(phoneNumber, password) {
    var user;
    user = new root.KiiUser();
    user._setPhoneNumber(phoneNumber);
    user._setPassword(password);
    return user;
  };


  /** Create a user object to prepare for registration with credentials pre-filled
  
  <br><br>Creates an pre-filled user object for registration. This user will not be authenticated until the registration method is called on it. It can be treated as any other KiiUser before it is registered.
  @param phoneNumber The user's phone number
  @param password The user's password. Must be at least 4 characters, made up of alphanumeric and/or: @,#,$,%,^,&
  @throws {InvalidPasswordException} If the password is not in the proper format
  @throws {InvalidPhoneNumberException} If the phone number is not in the proper format
  @returns a working KiiUser object
  @example
  var user = KiiUser.userWithPhoneNumber("+874012345678", "mypassword");
   */

  KiiUser.userWithPhoneNumber = function(phoneNumber, password) {
    return KiiUser._userWithPhoneNumber(phoneNumber, password);
  };


  /** Create a user object to prepare for registration with credentials pre-filled
  
  <br><br>Creates an pre-filled user object for registration. This user will not be authenticated until the registration method is called on it. It can be treated as any other KiiUser before it is registered.
  @param phoneNumber The user's phone number
  @param username The user's desired username. Must be between 3 and 64 characters, which can include alphanumeric characters as well as underscores '_', dashes '-' and periods '.'
  @param password The user's password. Must be at least 4 characters, made up of alphanumeric and/or: @,#,$,%,^,&
  @throws {InvalidUsernameException} If the username is not in the proper format
  @throws {InvalidPasswordException} If the password is not in the proper format
  @throws {InvalidPhoneNumberException} If the phone number is not in the proper format
  @returns a working KiiUser object
  @example
  var user = KiiUser.userWithPhoneNumberAndUsername("+874012345678", "johndoe", "mypassword");
   */

  KiiUser.userWithPhoneNumberAndUsername = function(phoneNumber, username, password) {
    var user;
    user = new root.KiiUser();
    user._setPhoneNumber(phoneNumber);
    user._setUsername(username);
    user._setPassword(password);
    return user;
  };


  /** Create a user object to prepare for registration with credentials pre-filled
  
  <br><br>Creates an pre-filled user object for registration. This user will not be authenticated until the registration method is called on it. It can be treated as any other KiiUser before it is registered.
  @param emailAddress The user's email address
  @param password The user's password. Must be at least 4 characters, made up of alphanumeric and/or: @,#,$,%,^,&
  @throws {InvalidPasswordException} If the password is not in the proper format
  @throws {InvalidEmailException} If the email address is not in the proper format
  @returns a working KiiUser object
  @example
  var user = KiiUser.userWithEmailAddress("johndoe@example.com", "mypassword");
   */

  KiiUser.userWithEmailAddress = function(emailAddress, password) {
    return KiiUser._userWithEmailAddress(emailAddress, password);
  };


  /** Create a user object to prepare for registration with credentials pre-filled
  
  <br><br>Creates an pre-filled user object for registration. This user will not be authenticated until the registration method is called on it. It can be treated as any other KiiUser before it is registered.
  @param emailAddress The user's email address
  @param username The user's desired username. Must be between 3 and 64 characters, which can include alphanumeric characters as well as underscores '_', dashes '-' and periods '.'
  @param password The user's password. Must be at least 4 characters, made up of alphanumeric and/or: @,#,$,%,^,&
  @throws {InvalidUsernameException} If the username is not in the proper format
  @throws {InvalidPasswordException} If the password is not in the proper format
  @throws {InvalidEmailException} If the phone number is not in the proper format
  @returns a working KiiUser object
  @example
  var user = KiiUser.userWithEmailAddressAndUsername("johndoe@example.com", "johndoe", "mypassword");
   */

  KiiUser.userWithEmailAddressAndUsername = function(emailAddress, username, password) {
    var user;
    user = new root.KiiUser();
    user._setEmailAddress(emailAddress);
    user._setUsername(username);
    user._setPassword(password);
    return user;
  };


  /** Create a user object to prepare for registration with credentials pre-filled
  
  <br><br>Creates an pre-filled user object for registration. This user will not be authenticated until the registration method is called on it. It can be treated as any other KiiUser before it is registered.
  @param emailAddress The user's email address
  @param phoneNumber The user's phone number
  @param password The user's password. Must be at least 4 characters, made up of alphanumeric and/or: @,#,$,%,^,&
  @throws {InvalidPhoneNumberException} If the phone number is not in the proper format
  @throws {InvalidPasswordException} If the password is not in the proper format
  @throws {InvalidEmailException} If the phone number is not in the proper format
  @returns a working KiiUser object
  @example
  var user = KiiUser.userWithEmailAddressAndPhoneNumber("johndoe@example.com", "+874012345678", "mypassword");
   */

  KiiUser.userWithEmailAddressAndPhoneNumber = function(emailAddress, phoneNumber, password) {
    var user;
    user = new root.KiiUser();
    user._setEmailAddress(emailAddress);
    user._setPhoneNumber(phoneNumber);
    user._setPassword(password);
    return user;
  };


  /** Create a user object to prepare for registration with credentials pre-filled
  
  <br><br>Creates an pre-filled user object for registration. This user will not be authenticated until the registration method is called on it. It can be treated as any other KiiUser before it is registered.
  @param emailAddress The user's email address
  @param phoneNumber The user's phone number
  @param username The user's desired username. Must be between 3 and 64 characters, which can include alphanumeric characters as well as underscores '_', dashes '-' and periods '.'
  @param password The user's password. Must be at least 4 characters, made up of alphanumeric and/or: @,#,$,%,^,&
  @throws {InvalidPhoneNumberException} If the phone number is not in the proper format
  @throws {InvalidEmailException} If the phone number is not in the proper format
  @throws {InvalidUsernameException} If the username is not in the proper format
  @throws {InvalidPasswordException} If the password is not in the proper format
  @returns a working KiiUser object
  @example
  var user = KiiUser.userWithCredentials("johndoe@example.com", "+874012345678", "johndoe", "mypassword");
   */

  KiiUser.userWithCredentials = function(emailAddress, phoneNumber, username, password) {
    var user;
    user = new root.KiiUser();
    user._setEmailAddress(emailAddress);
    user._setPhoneNumber(phoneNumber);
    user._setUsername(username);
    user._setPassword(password);
    return user;
  };

  KiiUser._validateURI = function(value) {
    var match, pattern, retValue;
    value = KiiUtilities._trim(value);
    pattern = /^kiicloud:\/\/users\/(.*$)/i;
    if ((typeof value).toLowerCase() === "string") {
      match = value.match(pattern);
      if (match != null) {
        retValue = match[1];
      }
    }
    return retValue;
  };


  /** Instantiate KiiUser that refers to existing user which has specified ID.
  You have to specify the ID of existing KiiUser. Unlike KiiObject,
  you can not assign ID in the client side.<br>
  <b>NOTE</b>: This API does not access to the server.
  After instantiation, call {@link KiiUser#refresh} to fetch the properties.
  @param userID ID of the KiiUser to instantiate.
  @return instance of KiiUser.
  @throws {InvalidArgumentException} when passed userID is empty or null.
  @example
  var user = new KiiUser.userWithID("__USER_ID__");
   */

  KiiUser.userWithID = function(userID) {
    var user;
    if ((userID == null) || userID === "") {
      throw new root.InvalidArgumentException('userID should not null or empty');
    }
    user = new root.KiiUser();
    user._setUUID(userID);
    return user;
  };


  /** Generate a new KiiUser based on a given URI
  @param {String} uri The URI of the object to be represented
  @returns {KiiUser} A new KiiUser with its parameters filled in from the URI
  @throws {InvalidURIException} If the URI is not in the proper format
  @example
  var user = new KiiUser.userWithURI("kiicloud://myuri");
   */

  KiiUser.userWithURI = function(uri) {
    var user, uuid;
    root.Kii.logger("About to extract from: " + uri);
    uuid = root.KiiUser._validateURI(uri);
    root.Kii.logger("Extracted uuid from uri: " + uuid);
    if (uuid != null) {
      user = new root.KiiUser();
      user._setUUID(uuid);
    } else {
      throw new root.InvalidURIException;
    }
    return user;
  };


  /** Creates a reference to a bucket for this user
  
  <br><br>The bucket will be created/accessed within this user's scope
  @param {String} bucketName The name of the bucket the user should create/access
  @returns {KiiBucket} A working KiiBucket object
  @example
  var user = . . .; // a KiiUser
  var bucket = user.bucketWithName("myBucket");
   */

  KiiUser.prototype.bucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiBucket(bucketName, this);
    return bucket;
  };


  /** Creates a reference to a encrypted bucket for this user
  
  <br><br>The bucket will be created/accessed within this user's scope
  @param {String} bucketName The name of the bucket the user should create/access
  @returns {KiiEncryptedBucket} A working KiiEncryptedBucket object
  @example
  var user = . . .; // a KiiUser
  var bucket = user.encryptedBucketWithName("myBucket");
   */

  KiiUser.prototype.encryptedBucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiEncryptedBucket(bucketName, this);
    return bucket;
  };

  KiiUser.prototype._authenticate = function(callbacks) {
    var authCallbacks, currentTime, data, now, request, username;
    root.Kii.logger("Authenticating user:");
    root.Kii.logger(this);
    root.Kii.logger("Email verified: " + this._emailVerified);
    root.Kii.logger("Phone verified: " + this._phoneVerified);
    if (this._username != null) {
      username = this._username;
    } else if ((this._emailAddress != null) && this._emailVerified === true) {
      username = this._emailAddress;
    } else if ((this._phoneNumber != null) && this._phoneVerified === true) {
      username = this._phoneNumber;
    } else if (this._emailAddress != null) {
      username = this._emailAddress;
    } else if (this._phoneNumber != null) {
      username = this._phoneNumber;
    }
    data = {
      username: username,
      password: this._password
    };
    now = new Date();
    currentTime = now.getTime();
    if (root.Kii.getAccessTokenExpiration() > 0) {
      data.expiresAt = KiiUtilities._safeCalculateExpiresAtAsNumber(root.Kii.getAccessTokenExpiration(), currentTime);
    }
    request = this._getRequest({
      path: "/oauth2/token",
      withApp: false
    });
    request.setAnonymous(true);
    request.setMethod("POST");
    request.setData(data);
    authCallbacks = {
      success: (function(_this) {
        return function(data) {
          _this._setUUID(data.id);
          _this._clearPassword();
          _this._setAccessToken(data.access_token);
          if (data.expires_in != null) {
            now = new Date;
            currentTime = now.getTime();
            _this._expiresAt = KiiUtilities._safeCalculateExpiresAtAsDate(data.expires_in, currentTime);
          }
          root.Kii.setCurrentUser(_this);
          if (callbacks != null) {
            return callbacks.success(root.Kii.getCurrentUser());
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          _this._clearPassword();
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(authCallbacks, false);
  };

  KiiUser.prototype._authenticateWithToken = function(token, callbacks, expiresAt) {
    var authCallbacks, request;
    root.Kii.logger("Authenticating user " + this);
    root.Kii.logger(callbacks);
    request = this._getRequest({
      path: "/users/me",
      withApp: true
    });
    request.setAnonymous(true);
    request.addHeader("Authorization", "Bearer " + token);
    authCallbacks = {
      success: (function(_this) {
        return function(data) {
          _this._updateWithJSON(data);
          _this._setAccessToken(token);
          if (typeof expiresAt === "undefined") {
            _this._setExpiresAt(new Date(KiiUtilities.MAX_DATE_IN_MILLIS));
          } else {
            _this._setExpiresAt(expiresAt);
          }
          root.Kii.setCurrentUser(_this);
          if (callbacks != null) {
            return callbacks.success(root.Kii.getCurrentUser());
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(authCallbacks, false);
  };


  /** Authenticates a user with the server.
  If authentication successful, the user is cached inside SDK as current user,and accessible via
  {@link KiiUser.getCurrentUser()}.
  User token and token expiration is also cached and can be get by {@link KiiUser#getAccessTokenObject()}.
  Access token won't be expired unless you set it explicitly by {@link Kii.setAccessTokenExpiration()}.<br>
  If password or userIdentifier is invalid, callbacks.failure or reject callback of promise will be called. <br>
  
  @param {String} userIdentifier The username, validated email address, or validated phone number of the user to authenticate
  @param {String} password The password of the user to authenticate
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful authentication request
  @param {Method} callbacks.failure The callback method to call on a failed authentication request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theAuthenticatedUser). theAuthenticatedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiUser instance.If given password or userIdentifier is invalid, it will be null.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  KiiUser.authenticate("myusername", "mypassword", {
      success: function(theAuthenticatedUser) {
          // do something with the authenticated user
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  KiiUser.authenticate("myusername", "mypassword").then(
      function(theAuthenticatedUser) {
          // do something with the authenticated user
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.authenticate = function(userIdentifier, password, callbacks) {
    return new Promise(function(resolve, reject) {
      var authenticateCallbacks;
      authenticateCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success.apply(callbacks, arguments);
          }
          return resolve(arguments[0]);
        },
        failure: function() {
          var error;
          if (callbacks != null) {
            callbacks.failure.apply(callbacks, arguments);
          }
          error = KiiUtilities._Error(arguments[1]);
          error.target = arguments[0];
          return reject(error);
        }
      };
      return KiiUser._authenticateUsingCallbacks(userIdentifier, password, authenticateCallbacks);
    });
  };

  KiiUser._authenticateUsingCallbacks = function(userIdentifier, password, callbacks) {
    var error, user;
    try {
      root.Kii.logger("UserIdentifier: " + userIdentifier);
      if (!KiiUtilities._validatePassword(password)) {
        throw new root.InvalidPasswordException;
      }
      if (KiiUtilities._validateEmail(userIdentifier)) {
        user = root.KiiUser._userWithEmailAddress(userIdentifier, password);
      } else if (KiiUtilities._validatePhoneNumber(userIdentifier)) {
        user = root.KiiUser._userWithPhoneNumber(userIdentifier, password);
      } else if (KiiUtilities._validateUsername(userIdentifier)) {
        user = root.KiiUser.userWithUsername(userIdentifier, password);
      } else {
        throw new root.InvalidUserIdentifierException;
      }
      return user._authenticate(callbacks);
    } catch (_error) {
      error = _error;
      if (user != null) {
        user._clearPassword();
      }
      if (callbacks != null) {
        return callbacks.failure(null, error.message);
      }
    }
  };


  /** Asynchronously authenticates a user with the server using specified access token.
  This method is non-blocking.<br><br>
  Specified expiresAt won't be used by SDK. IF login successful,
  we set this property so that you can get it later along with token
  by {@link KiiUser#getAccessTokenObject()}.<br>
  Also, if successful, the user is cached inside SDK as current user
  and accessible via {@link KiiUser.getCurrentUser()}.<br>
  
  Note that, if not specified, token expiration time is not cached
  and set to value equivalant to 275760 years.<br>
  
  If the specified token is expired, authenticataiton will be failed.
  Authenticate the user again to renew the token.<br>
  
  If expiresAt is invalid, callbacks.failure or reject callback of promise will be called. <br>
  
  @param {String} accessToken A valid access token associated with the desired user
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful authentication request
  @param {Method} callbacks.failure The callback method to call on a failed authentication request
  @param {Date} expiresAt Access token expire time that has received by {@link KiiUser#getAccessTokenObject()}. This param is optional and can be omitted.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theAuthenticatedUser). theAuthenticatedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiUser instance.If expiresAt is invalid, it will be null.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // Assume you stored the object get from KiiUser#getAccessTokenObject()
  // and now accessing by 'tokenObject' var.
  var token = tokenObject["access_token"];
  var expiresAt = tokenObject["expires_at"];
  expireDate.setHours(expireDate.getHours() + 24);
  KiiUser.authenticateWithToken(token, {
      success: function(theAuthenticatedUser) {
          // do something with the authenticated user
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  }, expiresAt);
  
  // example to use Promise
  // Assume you stored the object get from KiiUser#getAccessTokenObject()
  // and now accessing by 'tokenObject' var.
  var token = tokenObject["access_token"];
  var expiresAt = tokenObject["expires_at"];
  expireDate.setHours(expireDate.getHours() + 24);
  KiiUser.authenticateWithToken(token, null, expiresAt).then(
      function(theAuthenticatedUser) {
          // do something with the authenticated user
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.authenticateWithToken = function(token, callbacks, expiresAt) {
    return new Promise(function(resolve, reject) {
      var authenticateWithTokenCallbacks;
      authenticateWithTokenCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success.apply(callbacks, arguments);
          }
          return resolve(arguments[0]);
        },
        failure: function() {
          var error;
          if (callbacks != null) {
            callbacks.failure.apply(callbacks, arguments);
          }
          error = KiiUtilities._Error(arguments[1]);
          error.target = arguments[0];
          return reject(error);
        }
      };
      return KiiUser._authenticateWithTokenUsingCallbacks(token, authenticateWithTokenCallbacks, expiresAt);
    });
  };

  KiiUser._authenticateWithTokenUsingCallbacks = function(token, callbacks, expiresAt) {
    var expiresAtType, user;
    expiresAtType = KiiUtilities._type(expiresAt);
    if (expiresAtType !== 'undefined' && expiresAtType !== 'date') {
      return callbacks.failure(null, root.InvalidArgumentException('Specified expiresAt must be a Date'));
    }
    user = new root.KiiUser();
    return user._authenticateWithToken(token, callbacks, expiresAt);
  };


  /** Registers a user with the server
  
  <br><br>The user object must have an associated email/password combination.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful registration request
  @param {Method} callbacks.failure The callback method to call on a failed registration request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theAuthenticatedUser). theAuthenticatedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiUser instance.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = KiiUser.userWithUsername("myusername", "mypassword");
  user.register({
      success: function(theAuthenticatedUser) {
          // do something with the authenticated user
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = KiiUser.userWithUsername("myusername", "mypassword");
  user.register().then(
      function(params) {
          // do something with the authenticated user
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.register = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var registerCallbacks;
        registerCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._registerUsingCallbacks(registerCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._registerUsingCallbacks = function(callbacks) {
    var data, key, registrationCallbacks, request, value, _ref;
    root.Kii.logger("Registering user " + this);
    data = {
      password: this._password
    };
    if (this._username != null) {
      data.loginName = this._username;
    }
    if (this._displayName != null) {
      data.displayName = this._displayName;
    }
    if (this._emailAddress != null) {
      data.emailAddress = this._emailAddress;
    }
    if (this._phoneNumber != null) {
      data.phoneNumber = this._phoneNumber;
    }
    if (!this._validateLocalPhoneNumber(this._phoneNumber, this._country)) {
      callbacks.failure(this, "needs to provide country for the local phone number");
      return;
    }
    if (this._country != null) {
      data.country = this._country;
    }
    if (this._locale != null) {
      data.locale = this._locale;
    }
    root.Kii.logger("CINFO");
    root.Kii.logger(JSON.stringify(this._customInfo));
    _ref = this._customInfo;
    for (key in _ref) {
      value = _ref[key];
      root.Kii.logger("Key/val: " + key + "/" + value);
      data[key] = value;
    }
    request = this._getRequest({
      path: "/users",
      withApp: true
    });
    request.setMethod("POST");
    request.setData(data);
    request.setAnonymous(true);
    request.setContentType("application/vnd.kii.RegistrationRequest+json");
    registrationCallbacks = {
      success: (function(_this) {
        return function(data) {
          root.Kii.logger("Succreg");
          _this._updateWithJSON(data);
          return _this._authenticate(callbacks);
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          root.Kii.logger("Failreg");
          _this._clearPassword();
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(registrationCallbacks, false);
  };


  /** Registers a user as pseudo user with the server
  
  @param {Object} [callbacks] An object with callback methods defined.
  This argument is mandatory and can't be ommited.
  @param {Method} callbacks.success The callback method to call on a successful registration request
  @param {Method} callbacks.failure The callback method to call on a failed registration request
  @param {Object} userFields Custom Fields to add to the user. This is optional and can be omitted.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theAuthenticatedUser). theAuthenticatedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var userFields = {"displayName":"yourName", "country":"JP", "age":30};
  KiiUser.registerAsPseudoUser({
      success: function(theAuthenticatedUser) {
          // do something with the authenticated user
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  }, userFields);
  
  // example to use Promise
  var userFields = {"displayName":"yourName", "country":"JP", "age":30};
  KiiUser.registerAsPseudoUser(null, userFields).then(
      function(theAuthenticatedUser) {
          // do something with the authenticated user
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.registerAsPseudoUser = function(callbacks, userFields) {
    return new Promise(function(resolve, reject) {
      var registerAsPseudoUserCallbacks;
      registerAsPseudoUserCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success.apply(callbacks, arguments);
          }
          return resolve(arguments[0]);
        },
        failure: function() {
          if (callbacks != null) {
            callbacks.failure.apply(callbacks, arguments);
          }
          return reject(KiiUtilities._Error(arguments[1]));
        }
      };
      return KiiUser._registerAsPseudoUserUsingCallbacks(registerAsPseudoUserCallbacks, userFields);
    });
  };

  KiiUser._registerAsPseudoUserUsingCallbacks = function(callbacks, userFields) {
    var jsonBody, requestCallbacks, url, wrapper, xhr;
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + "/users";
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("POST", url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    xhr.setRequestHeader("Content-Type", "application/vnd.kii.RegistrationAndAuthorizationRequest+json");
    requestCallbacks = {
      success: function() {
        var accessToken, errString, json, user;
        try {
          if (xhr.status < 300 && xhr.status >= 200) {
            json = JSON.parse(xhr.responseText);
            accessToken = json["_accessToken"];
            user = new root.KiiUser();
            user._updateWithJSON(json);
            user._setAccessToken(accessToken);
            user._setExpiresAt(new Date(KiiUtilities.MAX_DATE_IN_MILLIS));
            root.Kii.setCurrentUser(user);
            return callbacks.success(user);
          } else {
            errString = xhr.status + " : " + url;
            return callbacks.failure(null, errString);
          }
        } catch (_error) {
          return callbacks.failure(null, "failed to parse response");
        }
      },
      failure: function() {
        var errString, json;
        errString = "failed to register pseudo user. statusCode: " + xhr.status;
        try {
          json = JSON.parse(xhr.responseText);
          if (json.errorCode != null) {
            errString += " error code: " + json.errorCode;
          }
          if (json.message != null) {
            return errString += " error message: " + json.message;
          }
        } catch (_error) {

        } finally {
          callbacks.failure(null, errString);
        }
      }
    };
    if (userFields == null) {
      userFields = {};
    }
    jsonBody = JSON.stringify(userFields);
    return wrapper.sendData(jsonBody, requestCallbacks);
  };


  /** Sets credentials data and custom fields to pseudo user.
  
  <br><br>This method is exclusive to pseudo user.
  <br>password is mandatory and needs to provide at least one of login name, email address or phone number.
  @param {Object} identityData
  @param identityData.emailAddress The user's email address. Valid pattern is ^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$
  @param identityData.phoneNumber The user's phone number. Global phone valid pattern is ^[\\+]{1}[0-9]{2}. Note that you must provide country code in userFields if you speficy local phone number.
  @param identityData.username The user's desired username. Valid pattern is ^[a-zA-Z0-9-_\\.]{3,64}$
  @param password The user's password. Valid pattern is ^[\x20-\x7E]{4,50}$.
  @param {Object} [callbacks] An object with callback methods defined.
  This argument is mandatory and can't be ommited.
  @param {Method} callbacks.success The callback method to call on a successful authentication request
  @param {Method} callbacks.failure The callback method to call on a failed authentication request
  @param {Object} userFields Custom Fields to add to the user. This is optional and can be omitted.
  @param {Array} removeFields An array of field names to remove from the user custom fields. Default fields are not removed from server.
  This is optional and can be omitted.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(user). user is KiiUser instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var identityData = { "username": "__USER_NAME_" };
  var userFields = { "displayName":"__DISPLAY_NAME","score":12344300 };
  var removeFields = ["age"];
  user.putIdentity(
      identityData,
      "__PASSWORD__",
      {
          success: function(user) {
            // do something with the updated user.
          },
          failure: function(user, errorString) {
            // check error response.
          }
      },
      userFields,
      removeFields
  );
  
  // example to use Promise
  var identityData = { "username": "__USER_NAME_" };
  var userFields = { "displayName":"__DISPLAY_NAME","score":12344300 };
  var removeFields = ["age"];
  user.putIdentity(
      identityData,
      "__PASSWORD__",
      null,
      userFields,
      removeFields
  ).then(
      function(user) {
          // do something with the updated user.
      },
      function(error) {
          // check error response.
      }
  );
   */

  KiiUser.prototype.putIdentity = function(identityData, password, callbacks, userFields, removeFields) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var putIdentityCallbacks;
        putIdentityCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._putIdentityUsingCallbacks(identityData, password, putIdentityCallbacks, userFields, removeFields);
      };
    })(this));
  };

  KiiUser.prototype._putIdentityUsingCallbacks = function(identityData, password, callbacks, userFields, removeFields) {
    var country, data, errorString, hasIdentityData;
    root.Kii.logger("Put identity user: " + this._uuid + ", data: " + (JSON.stringify(identityData)));
    data = {};
    if (!this.isPseudoUser()) {
      if (callbacks != null) {
        callbacks.failure(this, "This user has the identity already");
      }
      return;
    }
    if (identityData == null) {
      if (callbacks != null) {
        callbacks.failure(this, "identityData is null");
      }
      return;
    }
    try {
      this._validateIdentityData(identityData);
    } catch (_error) {
      errorString = _error;
      if (callbacks != null) {
        callbacks.failure(this, errorString);
      }
      return;
    }
    hasIdentityData = false;
    if (identityData.emailAddress != null) {
      hasIdentityData = true;
    }
    if (identityData.phoneNumber != null) {
      hasIdentityData = true;
    }
    if (identityData.username != null) {
      hasIdentityData = true;
    }
    if (!hasIdentityData) {
      if (callbacks != null) {
        callbacks.failure(this, "needs to provide at least one of login name, email address or phone number");
      }
      return;
    }
    if (password != null) {
      if (!KiiUtilities._validatePassword(password)) {
        if (callbacks != null) {
          callbacks.failure(this, "invalid password");
        }
        return;
      }
    } else {
      if (callbacks != null) {
        callbacks.failure(this, "password is null");
      }
      return;
    }
    country = userFields != null ? userFields.country : null;
    if ((identityData.phoneNumber != null) && !this._validateLocalPhoneNumber(identityData.phoneNumber, country)) {
      callbacks.failure(this, "needs to provide country for the local phone number");
      return;
    }
    return this.refresh({
      failure: (function(_this) {
        return function(user, error) {
          root.Kii.logger("Failreg");
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this),
      success: (function(_this) {
        return function(user) {
          var jsonBody, key, removeField, requestCallbacks, url, value, wrapper, xhr, _i, _len;
          if (!user.isPseudoUser()) {
            if (callbacks != null) {
              callbacks.failure(user, "This user has the identity already");
            }
            return;
          }
          data = _this._clone(user._customInfo);
          if (identityData.emailAddress != null) {
            data.emailAddress = identityData.emailAddress;
          }
          if (identityData.phoneNumber != null) {
            data.phoneNumber = identityData.phoneNumber;
          }
          if (identityData.username != null) {
            data.loginName = identityData.username;
          }
          data.password = password;
          if (userFields != null) {
            for (key in userFields) {
              value = userFields[key];
              data[key] = value;
            }
          }
          if (removeFields != null) {
            for (_i = 0, _len = removeFields.length; _i < _len; _i++) {
              removeField = removeFields[_i];
              delete data[removeField];
            }
          }
          url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + ("/users/" + _this._uuid);
          wrapper = _this._getXhrWrapper("POST", url);
          xhr = wrapper.xhr;
          _this._setAuthHeader(xhr);
          xhr.setRequestHeader("Content-Type", "application/vnd.kii.UserUpdateRequest+json");
          requestCallbacks = {
            success: function() {
              var errString, json;
              try {
                json = JSON.parse(xhr.responseText);
                if (xhr.status < 300 && xhr.status >= 200) {
                  user._setModified(json.modifiedAt);
                  user._updateWithIdentityData(identityData);
                  user._updateWithUserFields(userFields, removeFields);
                  _this._hasPassword = true;
                  return callbacks.success(user);
                } else {
                  errString = xhr.status + " : " + url;
                  return callbacks.failure(_this, errString);
                }
              } catch (_error) {
                return callbacks.failure(_this, "failed to parse response");
              }
            },
            failure: function() {
              var errString, json;
              errString = "failed to put identity data. statusCode: " + xhr.status;
              try {
                json = JSON.parse(xhr.responseText);
                if (json.errorCode != null) {
                  errString += " error code: " + json.errorCode;
                }
                if (json.message != null) {
                  return errString += " error message: " + json.message;
                }
              } catch (_error) {

              } finally {
                callbacks.failure(_this, errString);
              }
            }
          };
          jsonBody = JSON.stringify(data);
          return wrapper.sendData(jsonBody, requestCallbacks);
        };
      })(this)
    });
  };


  /** Update user attributes.
  
  
  <br><br>If you want to update identity data of pseudo user, you must use KiiUser.putIdentity instead.
  @param {Object} identityData
  @param identityData.emailAddress The user's email address. Valid pattern is ^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$
  @param identityData.phoneNumber The user's phone number. Global phone valid pattern is ^[\\+]{1}[0-9]{2}. Note that you must provide country code in userFields if you specify local phone number.
  @param identityData.username The user's desired username. Valid pattern is ^[a-zA-Z0-9-_\\.]{3,64}$
  @param {Object} [callbacks] An object with callback methods defined.
  This argument is mandatory and can't be ommited.
  @param {Method} callbacks.success The callback method to call on a successful authentication request
  @param {Method} callbacks.failure The callback method to call on a failed authentication request
  @param {Object} userFields Custom Fields to add to the user.
  @param {Array} removeFields An array of field names to remove from the user custom fields. Default fields are not removed from server.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(user). user is KiiUser instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiUser instance.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var identityData = { "username": "__USER_NAME_" };
  var userFields = { "displayName":"__DISPLAY_NAME","score":12344300 };
  var removeFields = ["age"];
  user.update(
      identityData,
      {
          success: function(user) {
            // do something with the updated user.
          },
          failure: function(user, errorString) {
            // check error response.
          }
      },
      userFields,
      removeFields
  );
  
  // example to use Promise
  var identityData = { "username": "__USER_NAME_" };
  var userFields = { "displayName":"__DISPLAY_NAME","score":12344300 };
  var removeFields = ["age"];
  user.update(
      identityData,
      null,
      userFields,
      removeFields
  ).then(
      function(user) {
          // do something with the updated user.
      },
      function(error) {
          // check error response.
      }
  );
   */

  KiiUser.prototype.update = function(identityData, callbacks, userFields, removeFields) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var updateCallbacks;
        updateCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._updateUsingCallbacks(identityData, updateCallbacks, userFields, removeFields);
      };
    })(this));
  };

  KiiUser.prototype._updateUsingCallbacks = function(identityData, callbacks, userFields, removeFields) {
    var country, data, errorString, hasIdentityData, hasRemoveFields, hasUserFields, key, removeField, value, _i, _len;
    root.Kii.logger("update user: " + this._uuid);
    data = {};
    hasIdentityData = false;
    hasUserFields = false;
    hasRemoveFields = false;
    if (identityData != null) {
      try {
        this._validateIdentityData(identityData);
      } catch (_error) {
        errorString = _error;
        if (callbacks != null) {
          callbacks.failure(this, errorString);
        }
        return;
      }
      if (identityData.emailAddress != null) {
        hasIdentityData = true;
      }
      if (identityData.phoneNumber != null) {
        hasIdentityData = true;
      }
      if (identityData.username != null) {
        hasIdentityData = true;
      }
    }
    if (userFields != null) {
      for (key in userFields) {
        value = userFields[key];
        hasUserFields = true;
        break;
      }
    }
    if (removeFields != null) {
      for (_i = 0, _len = removeFields.length; _i < _len; _i++) {
        removeField = removeFields[_i];
        hasRemoveFields = true;
        break;
      }
    }
    if (!hasIdentityData && !hasUserFields && !hasRemoveFields) {
      callbacks.failure(this, "all arguments are null or empty");
      return;
    }
    country = userFields != null ? userFields.country : null;
    if ((identityData != null) && (identityData.phoneNumber != null) && !this._validateLocalPhoneNumber(identityData.phoneNumber, country)) {
      callbacks.failure(this, "needs to provide country for the local phone number");
      return;
    }
    return this.refresh({
      failure: (function(_this) {
        return function(user, error) {
          root.Kii.logger("Failreg");
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this),
      success: (function(_this) {
        return function(user) {
          var jsonBody, requestCallbacks, url, wrapper, xhr, _j, _len1;
          if (user.isPseudoUser() && hasIdentityData) {
            if (callbacks != null) {
              callbacks.failure(user, "Pseudo user must use putIdentity()");
            }
            return;
          }
          data = _this._clone(user._customInfo);
          if (identityData != null) {
            if (identityData.emailAddress != null) {
              data.emailAddress = identityData.emailAddress;
            }
            if (identityData.phoneNumber != null) {
              data.phoneNumber = identityData.phoneNumber;
            }
            if (identityData.username != null) {
              data.loginName = identityData.username;
            }
          }
          if (userFields != null) {
            for (key in userFields) {
              value = userFields[key];
              data[key] = value;
            }
          }
          if (removeFields != null) {
            for (_j = 0, _len1 = removeFields.length; _j < _len1; _j++) {
              removeField = removeFields[_j];
              delete data[removeField];
            }
          }
          url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + ("/users/" + _this._uuid);
          wrapper = _this._getXhrWrapper("POST", url, false);
          xhr = wrapper.xhr;
          _this._setAuthHeader(xhr);
          xhr.setRequestHeader("Content-Type", "application/vnd.kii.UserUpdateRequest+json");
          requestCallbacks = {
            success: function() {
              var errString, json;
              try {
                json = JSON.parse(xhr.responseText);
                if (xhr.status < 300 && xhr.status >= 200) {
                  user._setModified(data.modifiedAt);
                  user._updateWithIdentityData(identityData);
                  user._updateWithUserFields(userFields, removeFields);
                  return callbacks.success(user);
                } else {
                  errString = xhr.status + " : " + url;
                  return callbacks.failure(_this, errString);
                }
              } catch (_error) {
                return callbacks.failure(_this, "failed to parse response");
              }
            },
            failure: function() {
              var errString, json;
              errString = "failed to update user. statusCode: " + xhr.status;
              try {
                json = JSON.parse(xhr.responseText);
                if (json.errorCode != null) {
                  errString += " error code: " + json.errorCode;
                }
                if (json.message != null) {
                  return errString += " error message: " + json.message;
                }
              } catch (_error) {

              } finally {
                callbacks.failure(_this, errString);
              }
            }
          };
          jsonBody = JSON.stringify(data);
          return wrapper.sendData(jsonBody, requestCallbacks);
        };
      })(this)
    });
  };


  /** Update a user's password on the server
  
  <br><br>Update a user's password with the server. The fromPassword must be equal to the current password associated with the account in order to succeed.
  @param {String} fromPassword The user's current password
  @param {String} toPassword The user's desired password. Must be at least 4 characters, made up of alphanumeric and/or: @,#,$,%,^,&
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful update password request
  @param {Method} callbacks.failure The callback method to call on a failed update password request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theUser). theUser is KiiUser instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.currentUser();
  user.updatePassword("oldpassword", "newpassword", {
      success: function(theUser) {
          // do something
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.currentUser();
  user.updatePassword("oldpassword", "newpassword").then(
      function(theUser) {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.updatePassword = function(fromPassword, toPassword, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var updatePasswordCallbacks;
        updatePasswordCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._updatePasswordUsingCallbacks(fromPassword, toPassword, updatePasswordCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._updatePasswordUsingCallbacks = function(fromPassword, toPassword, callbacks) {
    var data, path, request, updateCallbacks;
    root.Kii.logger("Updating password from " + fromPassword + " to " + toPassword);
    if (KiiUtilities._validatePassword(toPassword)) {
      data = {
        oldPassword: fromPassword,
        newPassword: toPassword
      };
      path = "/users/" + this._uuid + "/password";
      request = this._getRequest({
        path: path,
        withApp: true
      });
      request.setMethod("PUT");
      request.setData(data);
      request.setContentType("application/vnd.kii.ChangePasswordRequest+json");
      updateCallbacks = {
        success: (function(_this) {
          return function(data, statusCode) {
            _this._clearPassword;
            if (statusCode < 300 && statusCode >= 200) {
              if (callbacks != null) {
                return callbacks.success(_this);
              }
            } else if (callbacks != null) {
              return callbacks.failure(_this, "Unable to change password");
            }
          };
        })(this),
        failure: (function(_this) {
          return function(error, statusCode) {
            _this._clearPassword;
            if (callbacks != null) {
              return callbacks.failure(_this, error);
            }
          };
        })(this)
      };
      return request.execute(updateCallbacks, true);
    } else if (callbacks != null) {
      return callbacks.failure(this, (new root.InvalidPasswordException()).message);
    }
  };


  /** Reset a user's password on the server
  
  <br><br>Reset a user's password on the server. The user is determined by the specified userIdentifier - which is an email address that has already been associated with an account. Reset instructions will be sent to that identifier.
  <br><br><b>Please Note:</b> This will reset the user's access token, so if they are currently logged in - their session will no longer be valid.
  @param {String} userIdentifier The user's email address
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful update password request
  @param {Method} callbacks.failure The callback method to call on a failed update password request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(). No parameter used.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  KiiUser.resetPassword("johndoe@example.com", {
      success: function() {
          // do something
      },
  
      failure: function(anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  KiiUser.resetPassword("johndoe@example.com").then(
      function() {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.resetPassword = function(userIdentifier, callbacks) {
    return new Promise(function(resolve, reject) {
      var resetPasswordCallbacks;
      resetPasswordCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success();
          }
          return resolve();
        },
        failure: function() {
          if (callbacks != null) {
            callbacks.failure(arguments[0]);
          }
          return reject(KiiUtilities._Error(arguments[0]));
        }
      };
      return KiiUser._resetPasswordUsingCallbacks(userIdentifier, resetPasswordCallbacks);
    });
  };

  KiiUser._resetPasswordUsingCallbacks = function(userIdentifier, callbacks) {
    var accountType, path, request, resetCallbacks;
    root.Kii.logger("Resetting password with identifier: " + userIdentifier);
    if (KiiUtilities._validateEmail(userIdentifier)) {
      accountType = "EMAIL";
    } else if (callbacks != null) {
      callbacks.failure("Invalid user identifier. Must be a valid email address");
      return;
    }
    if (accountType != null) {
      path = "/users/" + accountType + ":" + userIdentifier + "/password/request-reset";
      request = new KiiRequest(path, true);
      request.setMethod("POST");
      request.setAnonymous(true);
      resetCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success();
          } else if (callbacks != null) {
            return callbacks.failure("Unable to reset password");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(error);
          }
        }
      };
      return request.execute(resetCallbacks, true);
    }
  };


  /** Reset the password of user <br>
  Reset the password of user specified by given identifier. <br>
  This api does not execute login after reset password.
  @param {String} userIdentifier should be valid email address,
      global phone number or user identifier obtained by {@link #getID}.
  @param {String} notificationMethod specify the destination of message include link
      of resetting password. must one of "EMAIL", "SMS" or "SMS_PIN".
      - "EMAIL": Send email include link URL to reset password or password.
      (Contents are depends on 'Password Reset Flow' setting in app's
      Security settings.)
      - "SMS" : Send SMS include link URL to reset password.
      - "SMS_PIN" : Send SMS include PIN Code for reset password.
      different type of identifier and destination can be used
      as long as user have verified email, phone.
      (ex. User registers both email and phone. Identifier is email and
      notificationMethod is SMS.)
  @param {Object} [callbacks] object includes callback functions.
  @param {Method} callbacks.success called when operation succeeded.
  @param {Method} callbacks.failure called when operation failed.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(). No parameter used.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  KiiUser.resetPasswordWithNotificationMethod("+819001234567", "SMS", {
      success: function() {
          // Operation succeeded.
      },
      failure: function(errString) {
          // Handle error.
      }
  });
  
  // example to use Promise
  KiiUser.resetPasswordWithNotificationMethod("+819001234567", "SMS").then(
      function() {
          // Operation succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiUser.resetPasswordWithNotificationMethod = function(userIdentifier, notificationMethod, callbacks) {
    return new Promise(function(resolve, reject) {
      var resetPasswordWithNotificationMethodCallbacks;
      resetPasswordWithNotificationMethodCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success();
          }
          return resolve();
        },
        failure: function() {
          if (callbacks != null) {
            callbacks.failure(arguments[0]);
          }
          return reject(KiiUtilities._Error(arguments[0]));
        }
      };
      return KiiUser._resetPasswordWithNotificationMethodUsingCallbacks(userIdentifier, notificationMethod, resetPasswordWithNotificationMethodCallbacks);
    });
  };

  KiiUser._resetPasswordWithNotificationMethodUsingCallbacks = function(userIdentifier, notificationMethod, callbacks) {
    var body, qualifiedID, reqCallbacks, requestUri, wrapper, xhr;
    if (typeof userIdentifier !== 'string') {
      if (callbacks != null) {
        callbacks.failure('given userIdentifier is not string');
      }
      return;
    }
    if (userIdentifier === "") {
      if (callbacks != null) {
        callbacks.failure('given userIdentifier is empty');
      }
      return;
    }
    if (notificationMethod !== 'EMAIL' && notificationMethod !== 'SMS' && notificationMethod !== 'SMS_PIN') {
      if (callbacks != null) {
        callbacks.failure('notificationMethod should be \'EMAIL\' or \'SMS\' or \'SMS_PIN\'');
      }
      return;
    }
    if (KiiUtilities._validateEmail(userIdentifier)) {
      qualifiedID = "EMAIL:" + userIdentifier;
    } else if (KiiUtilities._isGlobalPhoneNumber(userIdentifier)) {
      qualifiedID = "PHONE:" + userIdentifier;
    } else {
      qualifiedID = userIdentifier;
    }
    qualifiedID = encodeURIComponent(qualifiedID);
    body = {
      notificationMethod: notificationMethod
    };
    if (notificationMethod === 'SMS_PIN') {
      body.notificationMethod = "SMS";
      body.smsResetMethod = "PIN";
    }
    requestUri = "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/users/" + qualifiedID + "/password/request-reset";
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("POST", requestUri);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    xhr.setRequestHeader("Content-Type", "application/vnd.kii.ResetPasswordRequest+json");
    reqCallbacks = {
      success: function() {
        return callbacks != null ? callbacks.success() : void 0;
      },
      failure: function() {
        var errString, json;
        errString = "failed to reset password. statusCode: " + xhr.status;
        try {
          json = JSON.parse(xhr.responseText);
          if (json.errorCode != null) {
            errString += " error code: " + json.errorCode;
          }
          if (json.message != null) {
            return errString += " error message: " + json.message;
          }
        } catch (_error) {

        } finally {
          if (callbacks != null) {
            callbacks.failure(errString);
          }
        }
      }
    };
    return wrapper.sendData(JSON.stringify(body), reqCallbacks);
  };


  /** Reset password with the PIN code in receipt SMS
  After {@link KiiUser.resetPasswordWithNotificationMethod} is called with
  "SMS_PIN", SMS includes the PIN code will be sent to the user's phone.
  User can request the new password for login with the PIN code.
  Need to call method for authentication after the new password is determined.
  @param {String} userIdentifier should be valid email address,
      global phone number or user identifier obtained by {@link #getID}.
  @param {String} pinCode Received PIN code.
  @param {String} [newPassword] New password for login.
  If the 'Password Reset Flow' in app's security setting is set to
  'Generate password', it would be ignored and null can be passed.
  In this case, new password is generated on Kii Cloud and sent to user's
  phone. Otherwise valid password is required.
  @param {Object} [callbacks] object includes callback functions.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(). No parameter used.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // Example using callback
  KiiUser.completeResetPassword("john.doe@kii.com", "new-password", "223789",
  {
      success: function() {
          // Succeeded.
      },
      failure: function(error) {
          // Handle error here.
      }
  });
  
  // Example using Promise
  KiiUser.completeResetPassword(
      "john.doe@kii.com", "new-password", "223789").then(function() {
          // Succeeded.
      }).catch(function(error) {
          // Handle error here.
      });
   */

  KiiUser.completeResetPassword = function(userIdentifier, pinCode, newPassword, callbacks) {
    return new Promise(function(resolve, reject) {
      var completeResetPasswordCallbacks;
      completeResetPasswordCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success();
          }
          return resolve();
        },
        failure: function() {
          if (callbacks != null) {
            callbacks.failure(arguments[0]);
          }
          return reject(KiiUtilities._Error(arguments[0]));
        }
      };
      return KiiUser._completeResetPasswordUsingCallbacks(userIdentifier, pinCode, newPassword, completeResetPasswordCallbacks);
    });
  };

  KiiUser._completeResetPasswordUsingCallbacks = function(userIdentifier, pinCode, newPassword, callbacks) {
    var body, qualifiedID, reqCallbacks, requestUri, wrapper, xhr;
    if (!KiiUtilities._isNonEmptyString(userIdentifier)) {
      if (callbacks != null) {
        callbacks.failure('given userIdentifier is null or empty');
      }
      return;
    }
    if (!KiiUtilities._isNonEmptyString(pinCode)) {
      if (callbacks != null) {
        callbacks.failure('given pinCode is null or empty');
      }
      return;
    }
    if (KiiUtilities._validateEmail(userIdentifier)) {
      qualifiedID = "EMAIL:" + userIdentifier;
    } else if (KiiUtilities._isGlobalPhoneNumber(userIdentifier)) {
      qualifiedID = "PHONE:" + userIdentifier;
    } else {
      qualifiedID = userIdentifier;
    }
    qualifiedID = encodeURIComponent(qualifiedID);
    body = {
      pinCode: pinCode
    };
    if (KiiUtilities._isNonEmptyString(newPassword)) {
      body["newPassword"] = newPassword;
    }
    requestUri = "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/users/" + qualifiedID + "/password/complete-reset";
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("POST", requestUri);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    xhr.setRequestHeader("Content-Type", "application/vnd.kii.CompletePasswordResetRequest+json");
    reqCallbacks = {
      success: function() {
        return callbacks != null ? callbacks.success() : void 0;
      },
      failure: function() {
        var errString, json;
        errString = "failed to reset password. statusCode: " + xhr.status;
        try {
          json = JSON.parse(xhr.responseText);
          if (json.errorCode != null) {
            errString += " error code: " + json.errorCode;
          }
          if (json.message != null) {
            return errString += " error message: " + json.message;
          }
        } catch (_error) {

        } finally {
          if (callbacks != null) {
            callbacks.failure(errString);
          }
        }
      }
    };
    return wrapper.sendData(JSON.stringify(body), reqCallbacks);
  };

  KiiUser.prototype.verifyCredentials = function(type, code, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var verifyCredentialsCallbacks;
        verifyCredentialsCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._verifyCredentialsUsingCallbacks(type, code, verifyCredentialsCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._verifyCredentialsUsingCallbacks = function(type, code, callbacks) {
    var path, request, verifyCallbacks;
    root.Kii.logger("Verifying " + type + " with code: " + code);
    path = "/users/me/" + type + "/verify";
    request = this._getRequest({
      path: path,
      withApp: true
    });
    request.setMethod("POST");
    request.setData({
      verificationCode: code
    });
    request.setContentType("application/vnd.kii.AddressVerificationRequest+json");
    verifyCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            if (type === "email-address") {
              _this._setEmailVerified(true);
            } else if (type === "phone-number") {
              _this._setPhoneVerified(true);
            }
            if (callbacks != null) {
              return callbacks.success(_this);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to verify " + type);
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(verifyCallbacks, true);
  };


  /** Verify the current user's phone number
  <br><br>This method is used to verify the phone number of user currently
  logged in.<br>
  Verification code is sent from Kii Cloud when new user is registered with
  phone number or user requested to change their phone number in the
  application which requires phone verification.<br>
  (You can enable/disable phone verification through the console in
  developer.kii.com)<br>
  After the verification succeeded, new phone number becomes users phone
  number and user is able to login with the phone number.<br>
  To get the new phone number, please call {@link #refresh()} and call
  {@link #getPhoneNumber()}<br>
  Before completion of {@link #refresh()}, {@link #getPhoneNumber()} returns
  cached phone number. It could be old phone number or undefined.
  @param {String} verificationCode The code which verifies the currently logged in user
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful verification request
  @param {Method} callbacks.failure The callback method to call on a failed verification request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theUser). theUser is KiiUser instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.currentUser();
  user.verifyPhoneNumber("012345", {
      success: function(theUser) {
          // do something
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.currentUser();
  user.verifyPhoneNumber("012345").then(
      function(theUser) {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.verifyPhoneNumber = function(verificationCode, callbacks) {
    return this.verifyCredentials("phone-number", verificationCode, callbacks);
  };

  KiiUser.prototype.resendVerification = function(type, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var resendVerificationCallbacks;
        resendVerificationCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._resendVerificationUsingCallbacks(type, resendVerificationCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._resendVerificationUsingCallbacks = function(type, callbacks) {
    var id, path, request, resendCallbacks;
    root.Kii.logger("Resending verification " + type);
    id = this.getID();
    path = "/users/" + id + "/" + type + "/resend-verification";
    request = this._getRequest({
      path: path,
      withApp: true
    });
    request.setMethod("POST");
    resendCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_this);
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to resend " + type + " verification");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(resendCallbacks, true);
  };


  /** Resend the email verification code to the user
  
  <br><br>This method will re-send the email verification to the currently logged in user
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theUser). theUser is KiiUser instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.currentUser();
  user.resendEmailVerification({
      success: function(theUser) {
          // do something
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.currentUser();
  user.resendEmailVerification().then(
      function(theUser) {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.resendEmailVerification = function(callbacks) {
    return this.resendVerification("email-address", callbacks);
  };


  /** Resend the SMS verification code to the user
  
  <br><br>This method will re-send the SMS verification to the currently logged in user
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theUser). theUser is KiiUser instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.currentUser();
  user.resendPhoneNumberVerification({
      success: function(theUser) {
          // do something
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.currentUser();
  user.resendPhoneNumberVerification().then(
      function(theUser) {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.resendPhoneNumberVerification = function(callbacks) {
    return this.resendVerification("phone-number", callbacks);
  };


  /** Retrieve a list of groups which the user is a member of
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is the KiiUser instance which this method was called on.</li>
          <li>params[1] is array of KiiGroup instances.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.currentUser();
  user.memberOfGroups({
      success: function(theUser, groupList) {
          // do something with the results
          for(var i=0; i&lt;groupList.length; i++) {
              var g = groupList[i]; // a KiiGroup object
          }
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.currentUser();
  user.memberOfGroups().then(
      function(params) {
          // do something with the results
          var theUser = params[0];
          var groupList = params[1];
          for(var i=0; i&lt;groupList.length; i++) {
              var g = groupList[i]; // a KiiGroup object
          }
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.memberOfGroups = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var memberOfGroupsCallbacks;
        memberOfGroupsCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._memberOfGroupsUsingCallbacks(memberOfGroupsCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._memberOfGroupsUsingCallbacks = function(callbacks) {
    var memberCallbacks, path, request;
    root.Kii.logger("Getting groups for member " + this._uuid);
    path = "/groups/?is_member=" + this._uuid;
    request = this._getRequest({
      path: path,
      withApp: true
    });
    request.setAccept("application/vnd.kii.GroupsRetrievalResponse+json");
    memberCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          var group, groupList, _i, _len, _ref;
          if (statusCode < 300 && statusCode >= 200) {
            groupList = [];
            _ref = data.groups;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              group = _ref[_i];
              groupList.push(_this._groupWithJSON(group));
            }
            if (callbacks != null) {
              return callbacks.success(_this, groupList);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to retrieve groups");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(memberCallbacks, false);
  };


  /**Retrieve the groups owned by this user. Group in the groupList
  does not contain all the property of group. To get all the
  property from cloud, a {@link KiiGroup#refresh(callback)} is necessary.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is the KiiUser instance which this method was called on.</li>
          <li>params[1] is array of KiiGroup instances.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.currentUser();
  user.ownerOfGroups({
      success: function(theUser, groupList) {
          // do something with the results
          for(var i=0; i&lt;groupList.length; i++) {
              var g = groupList[i]; // a KiiGroup object
          }
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.currentUser();
  user.ownerOfGroups().then(
      function(params) {
          // do something with the results
          var theUser = params[0];
          var groupList = params[1];
          for(var i=0; i&lt;groupList.length; i++) {
              var g = groupList[i]; // a KiiGroup object
          }
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.ownerOfGroups = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var ownerOfGroupsCallbacks;
        ownerOfGroupsCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._ownerOfGroupsUsingCallbacks(ownerOfGroupsCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._ownerOfGroupsUsingCallbacks = function(callbacks) {
    var memberCallbacks, path, request;
    root.Kii.logger("Getting groups owned by the user " + this._uuid);
    path = "/groups/?owner=" + this._uuid;
    request = this._getRequest({
      path: path,
      withApp: true
    });
    request.setAccept("application/vnd.kii.GroupsRetrievalResponse+json");
    memberCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          var group, groupList, _i, _len, _ref;
          if (statusCode < 300 && statusCode >= 200) {
            groupList = [];
            _ref = data.groups;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              group = _ref[_i];
              groupList.push(_this._groupWithJSON(group));
            }
            if (callbacks != null) {
              return callbacks.success(_this, groupList);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to retrieve groups");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(memberCallbacks, false);
  };


  /** Change phone number of logged in user.
  If the phone number verification is required by your app configuration,
  User's phone number would not changed to new one until the new phone number verification has been done.
  In this case, new phone can be obtained by {@link KiiUser#getPendingPhoneNumber()}.
  This API does not refresh the KiiUser automatically.
  Please execute {@link KiiUser#refresh()} before checking the value of {@link KiiUser#getPhoneNumber()} or {@link KiiUser#getPendingPhoneNumber()}.
  @param {String} newPhoneNumber The new phone number to change to
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theUser). theUser is KiiUser instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.currentUser();
  user.changePhone('+19415551234', {
      success: function(theUser) {
          // do something on success
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.currentUser();
  user.changePhone('+19415551234').then(
      function(theUser) {
          // do something on success
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.changePhone = function(newPhoneNumber, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var changePhoneCallbacks;
        changePhoneCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._changePhoneUsingCallbacks(newPhoneNumber, changePhoneCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._changePhoneUsingCallbacks = function(newPhoneNumber, callbacks) {
    var path, request, updateCallbacks;
    root.Kii.logger("Updating phone number to " + newPhoneNumber);
    path = "/users/" + this._uuid + "/phone-number";
    request = this._getRequest({
      path: path,
      withApp: true
    });
    request.setMethod("PUT");
    request.setContentType("application/vnd.kii.PhoneNumberModificationRequest+json");
    request.setData({
      phoneNumber: newPhoneNumber
    });
    updateCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_this);
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to update phone number");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(updateCallbacks, true);
  };


  /** Change email of logged in user.
  If the email address verification is required by your app configuration,
  User's email would not changed to new one until the new email verification has been done.
  In this case, new mail address can be obtained by {@link KiiUser#getPendingEmailAddress()}.
  This API does not refresh the KiiUser automatically.
  Please execute {@link KiiUser#refresh()} before checking the value of {@link KiiUser#getEmailAddress()} or {@link KiiUser#getPendingEmailAddress()}
  @param {String} newEmail The new email address to change to
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theUser). theUser is KiiUser instance which this method was called on.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.currentUser();
  user.changeEmail('mynewemail@kii.com', {
      success: function(theUser) {
          // do something on success
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.currentUser();
  user.changeEmail('mynewemail@kii.com').then(
      function(theUser) {
          // do something on success
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.changeEmail = function(newEmail, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var changeEmailCallbacks;
        changeEmailCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._changeEmailUsingCallbacks(newEmail, changeEmailCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._changeEmailUsingCallbacks = function(newEmail, callbacks) {
    var path, request, updateCallbacks;
    root.Kii.logger("Updating email address to: " + newEmail);
    if (KiiUtilities._validateEmail(newEmail)) {
      path = "/users/" + this._uuid + "/email-address";
      request = this._getRequest({
        path: path,
        withApp: true
      });
      request.setMethod("PUT");
      request.setContentType("application/vnd.kii.EmailAddressModificationRequest+json");
      request.setData({
        emailAddress: newEmail
      });
      updateCallbacks = {
        success: (function(_this) {
          return function(data, statusCode) {
            if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
              return callbacks.success(_this);
            } else if (callbacks != null) {
              return callbacks.failure(_this, "Unable to update email address");
            }
          };
        })(this),
        failure: (function(_this) {
          return function(error, statusCode) {
            if (callbacks != null) {
              return callbacks.failure(_this, error);
            }
          };
        })(this)
      };
      return request.execute(updateCallbacks, true);
    } else {
      return callbacks.failure(this, "Invalid email address format");
    }
  };


  /** Saves the latest user values to the server
  
  <br><br>If the user does not yet exist, it will NOT be created. Otherwise, the fields that have changed will be updated accordingly.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful save request
  @param {Method} callbacks.failure The callback method to call on a failed save request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theSavedUser). theSavedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.getCurrentUser(); // a KiiUser
  user.save({
      success: function(theSavedUser) {
          // do something with the saved user
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.getCurrentUser(); // a KiiUser
  user.save().then(
      function(theSavedUser) {
          // do something with the saved user
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.save = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var saveCallbacks;
        saveCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._saveUsingCallbacks(saveCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._saveUsingCallbacks = function(callbacks) {
    var data, path, request, updateCallbacks;
    root.Kii.logger("Saving user: " + this._uuid);
    path = "/users/" + this._uuid;
    root.Kii.logger("CUSTOMINFO: ");
    root.Kii.logger(this._customInfo);
    request = this._getRequest({
      path: path,
      withApp: true
    });
    request.setMethod("POST");
    request.setContentType("application/vnd.kii.UserUpdateRequest+json");
    data = this._customInfo;
    if (this._country != null) {
      data.country = this._country;
    }
    if (this._locale != null) {
      data.locale = this._locale;
    }
    if (this._displayName != null) {
      data.displayName = this._displayName;
    }
    request.setData(data);
    updateCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            _this._setModified(data.modifiedAt);
            if (callbacks != null) {
              return callbacks.success(_this);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(updateCallbacks, false);
  };


  /** Updates the local user's data with the user data on the server
  
  <br><br>The user must exist on the server. Local data will be overwritten.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful refresh request
  @param {Method} callbacks.failure The callback method to call on a failed refresh request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theRefreshedUser). theRefreshedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.getCurrentUser(); // a KiiUser
  user.refresh({
      success: function(theRefreshedUser) {
          // do something with the refreshed user
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.getCurrentUser(); // a KiiUser
  user.refresh().then(
      function(theRefreshedUser) {
          // do something with the refreshed user
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.refresh = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var refreshCallbacks;
        refreshCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._refreshUsingCallbacks(refreshCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._refreshUsingCallbacks = function(callbacks) {
    var refreshCallbacks, request;
    root.Kii.logger("Refreshing user: " + this._uuid);
    request = this._getRequest({
      path: "/users/" + this._uuid,
      withApp: true
    });
    refreshCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            _this._phoneNumberPending = null;
            _this._emailAddressPending = null;
            _this._updateWithJSON(data);
            if (callbacks != null) {
              return callbacks.success(_this);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(refreshCallbacks, false);
  };


  /** Delete the user from the server
  @name delete
  @memberOf root.KiiUser#
  @function
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful delete request
  @param {Method} callbacks.failure The callback method to call on a failed delete request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theDeletedUser). theDeletedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiUser instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var user = Kii.getCurrentUser(); // a KiiUser
  user.delete({
      success: function(theDeletedUser) {
          // do something
      },
  
      failure: function(theUser, anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  var user = Kii.getCurrentUser(); // a KiiUser
  user.delete().then(
      function(theDeletedUser) {
          // do something
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype["delete"] = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var deleteCallbacks;
        deleteCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(KiiUtilities._Error(arguments[1], _this));
          }
        };
        return _this._deleteUsingCallbacks(deleteCallbacks);
      };
    })(this));
  };

  KiiUser.prototype._deleteUsingCallbacks = function(callbacks) {
    var refreshCallbacks, request;
    root.Kii.logger("Deleting user...");
    request = this._getRequest({
      path: "/users/" + this._uuid,
      withApp: true
    });
    request.setMethod("DELETE");
    refreshCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_this);
          } else if (callbacks != null) {
            return callbacks.failure(_this, "Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_this, error);
          }
        };
      })(this)
    };
    return request.execute(refreshCallbacks, true);
  };


  /**
      Logs the currently logged-in user out of the KiiSDK
      @example
      KiiUser.logOut();
   */

  KiiUser.logOut = function() {
    return root.Kii.logOut();
  };


  /**
      Checks to see if there is a user authenticated with the SDK
      @example
      if(KiiUser.loggedIn()) {
          // do something
      }
   */

  KiiUser.loggedIn = function() {
    return root.Kii.loggedIn();
  };

  KiiUser.prototype._updateWithIdentityData = function(identityData) {
    if (identityData != null) {
      if (identityData["username"] != null) {
        this._username = identityData["username"];
      }
      if (identityData["emailAddress"] != null) {
        this._emailAddress = identityData["emailAddress"];
      }
      if (identityData["phoneNumber"] != null) {
        return this._phoneNumber = identityData["phoneNumber"];
      }
    }
  };

  KiiUser.prototype._updateWithUserFields = function(userFields, removeFields) {
    var key, removeField, value, _i, _len, _results;
    if (userFields != null) {
      for (key in userFields) {
        value = userFields[key];
        if (key === "displayName") {
          this._displayName = value;
        } else if (key === "country") {
          this._country = value;
        } else if (key === "locale") {
          this._locale = value;
        } else if (key === "") {
          root.Kii.logger("Setting empty to custom info");
          this._customInfo[key] = value;
        } else if (key.substring(0, 1) !== "_") {
          root.Kii.logger("Setting to custom info");
          this._customInfo[key] = value;
        }
      }
    }
    if (removeFields != null) {
      _results = [];
      for (_i = 0, _len = removeFields.length; _i < _len; _i++) {
        removeField = removeFields[_i];
        _results.push(delete this._customInfo[removeField]);
      }
      return _results;
    }
  };

  KiiUser.prototype._validateIdentityData = function(identityData) {
    if (identityData != null) {
      if (identityData.emailAddress != null) {
        if (!KiiUtilities._validateEmail(identityData.emailAddress)) {
          throw "invalid email";
        }
      }
      if (identityData.phoneNumber != null) {
        if (!KiiUtilities._validatePhoneNumber(identityData.phoneNumber)) {
          throw "invalid phone number";
        }
      }
      if (identityData.username != null) {
        if (!KiiUtilities._validateUsername(identityData.username)) {
          throw "invalid username";
        }
      }
    }
  };

  KiiUser.prototype._validateLocalPhoneNumber = function(phone, country) {
    if ((phone != null) && !KiiUtilities._isGlobalPhoneNumber(phone)) {
      if (country != null) {
        return KiiUtilities._validateCountryCode(country);
      } else {
        return false;
      }
    }
    return true;
  };

  KiiUser.prototype._updateWithJSON = function(json) {
    var key, temp, value, _results;
    root.Kii.logger("Updating with:");
    root.Kii.logger(json);
    this._thirdPartyAccounts = {};
    _results = [];
    for (key in json) {
      value = json[key];
      root.Kii.logger("key/val => " + key + "/" + value);
      root.Kii.logger("Substr " + (key.substring(0, 1)));
      if (key === "userID" || key === "id") {
        _results.push(this._uuid = value);
      } else if (key === "created" || key === "createdAt" || key === "_created") {
        _results.push(this._created = value);
      } else if (key === "modified" || key === "modifiedAt" || key === "_modified") {
        _results.push(this._modified = value);
      } else if (key === "loginName") {
        _results.push(this._username = value);
      } else if (key === "displayName") {
        _results.push(this._displayName = value);
      } else if (key === "country") {
        root.Kii.logger("Is setting country");
        _results.push(this._country = value);
      } else if (key === "locale") {
        _results.push(this._locale = value);
      } else if (key === "emailAddress") {
        _results.push(this._emailAddress = value);
      } else if (key === "_emailAddressPending") {
        _results.push(this._emailAddressPending = value);
      } else if (key === "phoneNumber") {
        _results.push(this._phoneNumber = value);
      } else if (key === "_phoneNumberPending") {
        _results.push(this._phoneNumberPending = value);
      } else if (key === "emailAddressVerified") {
        root.Kii.logger("Email verified: " + value);
        _results.push(this._emailVerified = value);
      } else if (key === "phoneNumberVerified") {
        root.Kii.logger("Phone verified: " + value);
        _results.push(this._phoneVerified = value);
      } else if (key === "_hasPassword") {
        root.Kii.logger("_hasPassword: " + value);
        _results.push(this._hasPassword = value);
      } else if (key === "_thirdPartyAccounts") {
        if (value.hotmail != null) {
          temp = value.hotmail;
          temp.type = "live";
          value.live = temp;
          delete value.hotmail;
        }
        root.Kii.logger("_thirdPartyAccounts: " + value);
        _results.push(this._thirdPartyAccounts = value);
      } else if (key === "_disabled") {
        root.Kii.logger("disabled: " + value);
        _results.push(this._disabled = value);
      } else if (key === "") {
        root.Kii.logger("Setting empty to custom info");
        _results.push(this._customInfo[key] = value);
      } else if (key.substring(0, 1 !== "_")) {
        root.Kii.logger("Setting to custom info");
        _results.push(this._customInfo[key] = value);
      } else {
        _results.push(root.Kii.logger("Doing nothing"));
      }
    }
    return _results;
  };

  KiiUser.prototype._getRequest = function(spec) {
    var path, request, withApp;
    path = spec.path;
    withApp = spec.withApp;
    request = new KiiRequest(path, withApp);
    return request;
  };


  /**
  Find registered KiiUser with the email.<br>
  If there are no user registers with the specified email or if there are but not verified email yet,
  callbacks.failure or reject callback of promise will be called.<br>
  <br><br>
  <b>Note:</b>
  <ul>
  <li>If "Expose Full User Data To Others" is enabled in the application console, the response will contain full of the user data.</li>
  <li>Otherwise, the response will only contain "userID", "loginName" and "displayName" field values if exist.</li>
  </ul>
  
  @param {String} email The email to find KiiUser who owns it.<br>
  Don't add prefix of "EMAIL:" described in REST API documentation. SDK will take care of it.
  @param {Object} [callbacks] An object with callback methods defined.
  This argument is mandatory and can't be ommited.
  @param {Method} callbacks.success The callback method to call on a successful finding request.
  @param {Method} callbacks.failure The callback method to call on a failed finding request.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theMatchedUser). theMatchedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  KiiUser.findUserByEmail("user_to_find@example.com", {
      success: function(theMatchedUser) {
          // Do something with the found user
      },
      failure: function(anErrorString) {
          // Do something with the error response
      }
  });
  
  // example to use Promise
  KiiUser.findUserByEmail("user_to_find@example.com").then(
      function(theMatchedUser) {
          // Do something with the matched user
      },
      function(error) {
          // Do something with the error response
      }
  );
   */

  KiiUser.findUserByEmail = function(email, callbacks) {
    var error, errorString;
    if ((root.KiiUser.getCurrentUser() == null) || (root.KiiUser.getCurrentUser().getAccessToken() == null)) {
      errorString = root.IllegalStateException('User is not logged in');
      error = KiiUtilities._Error(errorString);
      if (callbacks != null) {
        if (typeof callbacks.failure === "function") {
          callbacks.failure(errorString);
        }
      }
      return Promise.reject(error);
    }
    return KiiUser._findUserByEmail(email, callbacks);
  };

  KiiUser._findUserByEmail = function(email, callbacks, context) {
    var error, errorString, url;
    if ((email == null) || email === "") {
      errorString = root.InvalidArgumentException('email should not null or empty');
      error = KiiUtilities._Error(errorString);
      if (context != null) {
        if (callbacks != null) {
          if (typeof callbacks.failure === "function") {
            callbacks.failure(context, errorString);
          }
        }
        error.target = context;
      } else {
        if (callbacks != null) {
          if (typeof callbacks.failure === "function") {
            callbacks.failure(errorString);
          }
        }
      }
      return Promise.reject(error);
    }
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + ("/users/EMAIL:" + email);
    return KiiUser._findUserRequestImpl(url, callbacks, context);
  };


  /**
  Find registered KiiUser with the phone.<br>
  If there are no user registers with the specified phone or if there are but not verified phone yet,
  callbacks.failure or reject callback of promise will be called.
  <br><br>
  <b>Note:</b>
  <ul>
  <li>If "Expose Full User Data To Others" is enabled in the application console, the response will contain full of the user data.</li>
  <li>Otherwise, the response will only contain "userID", "loginName" and "displayName" field values if exist.</li>
  </ul>
  
  @param {String} phone The phone number to find KiiUser who owns it.<br>
  Don't add prefix of "PHONE:" described in REST API documentation. SDK will take care of it.
  @param {Object} [callbacks] An object with callback methods defined.
  This argument is mandatory and can't be ommited.
  @param {Method} callbacks.success The callback method to call on a successful finding request.
  @param {Method} callbacks.failure The callback method to call on a failed finding request.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theMatchedUser). theMatchedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  KiiUser.findUserByPhone("phone_number_to_find", {
      success: function(theMatchedUser) {
          // Do something with the found user
      },
      failure: function(anErrorString) {
          // Do something with the error response
      }
  });
  
  // example to use Promise
  KiiUser.findUserByPhone("phone_number_to_find").then(
      function(theMatchedUser) {
          // Do something with the matched user
      },
      function(error) {
          // Do something with the error response
      }
  );
   */

  KiiUser.findUserByPhone = function(phone, callbacks) {
    var error, errorString;
    if ((root.KiiUser.getCurrentUser() == null) || (root.KiiUser.getCurrentUser().getAccessToken() == null)) {
      errorString = root.IllegalStateException('User is not logged in');
      error = KiiUtilities._Error(errorString);
      if (callbacks != null) {
        if (typeof callbacks.failure === "function") {
          callbacks.failure(errorString);
        }
      }
      return Promise.reject(error);
    }
    return KiiUser._findUserByPhone(phone, callbacks);
  };

  KiiUser._findUserByPhone = function(phone, callbacks, context) {
    var error, errorString, url;
    if ((phone == null) || phone === "") {
      errorString = root.InvalidArgumentException('phone should not null or empty');
      error = KiiUtilities._Error(errorString);
      if (context != null) {
        if (callbacks != null) {
          if (typeof callbacks.failure === "function") {
            callbacks.failure(context, errorString);
          }
        }
        error.target = context;
      } else {
        if (callbacks != null) {
          if (typeof callbacks.failure === "function") {
            callbacks.failure(errorString);
          }
        }
      }
      return Promise.reject(error);
    }
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + ("/users/PHONE:" + phone);
    return KiiUser._findUserRequestImpl(url, callbacks, context);
  };


  /**
  Find registered KiiUser with the user name.<br>
  If there are no user registers with the specified user name, callbacks.failure or reject callback of promise will be called.
  <br><br>
  <b>Note:</b>
  <ul>
  <li>If "Expose Full User Data To Others" is enabled in the application console, the response will contain full of the user data.</li>
  <li>Otherwise, the response will only contain "userID", "loginName" and "displayName" field values if exist.</li>
  </ul>
  
  @param {String} username The user name to find KiiUser who owns it.<br>
  Don't add prefix of "LOGIN_NAME:" described in REST API documentation. SDK will take care of it.
  @param {Object} [callbacks] An object with callback methods defined.
  This argument is mandatory and can't be ommited.
  @param {Method} callbacks.success The callback method to call on a successful finding request.
  @param {Method} callbacks.failure The callback method to call on a failed finding request.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theMatchedUser). theMatchedUser is KiiUser instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  KiiUser.findUserByUsername("user_name_to_find", {
      success: function(theMatchedUser) {
          // Do something with the found user
      },
      failure: function(anErrorString) {
          // Do something with the error response
      }
  });
  
  // example to use Promise
  KiiUser.findUserByUsername("user_name_to_find").then(
      function(theMatchedUser) {
          // Do something with the matched user
      },
      function(error) {
          // Do something with the error response
      }
  );
   */

  KiiUser.findUserByUsername = function(username, callbacks) {
    var error, errorString;
    if ((root.KiiUser.getCurrentUser() == null) || (root.KiiUser.getCurrentUser().getAccessToken() == null)) {
      errorString = root.IllegalStateException('User is not logged in');
      error = KiiUtilities._Error(errorString);
      if (callbacks != null) {
        if (typeof callbacks.failure === "function") {
          callbacks.failure(errorString);
        }
      }
      return Promise.reject(error);
    }
    return KiiUser._findUserByUsername(username, callbacks);
  };

  KiiUser._findUserByUsername = function(username, callbacks, context) {
    var error, errorString, url;
    if ((username == null) || username === "") {
      errorString = root.InvalidArgumentException('username should not null or empty');
      error = KiiUtilities._Error(errorString);
      if (context != null) {
        if (callbacks != null) {
          if (typeof callbacks.failure === "function") {
            callbacks.failure(context, errorString);
          }
        }
        error.target = context;
      } else {
        if (callbacks != null) {
          if (typeof callbacks.failure === "function") {
            callbacks.failure(errorString);
          }
        }
      }
      return Promise.reject(error);
    }
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + ("/users/LOGIN_NAME:" + username);
    return KiiUser._findUserRequestImpl(url, callbacks, context);
  };

  KiiUser._findUserRequestImpl = function(url, callbacks, context) {
    return new Promise(function(resolve, reject) {
      var findUserRequestImplCallbacks;
      findUserRequestImplCallbacks = {
        success: function() {
          var _ref;
          if (callbacks != null) {
            if ((_ref = callbacks.success) != null) {
              _ref.apply(callbacks, arguments);
            }
          }
          if (context != null) {
            return resolve(arguments);
          } else {
            return resolve(arguments[0]);
          }
        },
        failure: function() {
          var _ref;
          if (callbacks != null) {
            if ((_ref = callbacks.failure) != null) {
              _ref.apply(callbacks, arguments);
            }
          }
          if (context != null) {
            return reject(KiiUtilities._Error(arguments[1], arguments[0]));
          } else {
            return reject(KiiUtilities._Error(arguments[0]));
          }
        }
      };
      return KiiUser._findUserRequestImplUsingCallbacks(url, findUserRequestImplCallbacks, context);
    });
  };

  KiiUser._findUserRequestImplUsingCallbacks = function(url, callbacks, context) {
    var requestCallbacks, wrapper, xhr;
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("GET", url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    if (context != null) {
      xhr.setRequestHeader("Authorization", "Bearer " + context._getToken());
    } else {
      xhr.setRequestHeader("Authorization", "Bearer " + root.KiiUser.getCurrentUser().getAccessToken());
    }
    requestCallbacks = {
      success: function() {
        var json, user;
        if (callbacks != null) {
          try {
            json = JSON.parse(xhr.responseText);
            if (context != null) {
              user = new root.KiiUserWithToken(context._getToken());
              user._updateWithJSON(json);
              return callbacks.success(context, user);
            } else {
              user = new root.KiiUser();
              user._updateWithJSON(json);
              return callbacks.success(user);
            }
          } catch (_error) {
            if (context != null) {
              return callbacks.failure(context, "Unable to parse response");
            } else {
              return callbacks.failure("Unable to parse response");
            }
          }
        }
      },
      failure: function() {
        var errString, json;
        if (callbacks != null) {
          errString = "Failed to find user. statusCode: " + xhr.status;
          try {
            json = JSON.parse(xhr.responseText);
            if (json.errorCode != null) {
              errString += " error code: " + json.errorCode;
            }
            if (json.message != null) {
              return errString += " error message: " + json.message;
            }
          } finally {
            if (context != null) {
              callbacks.failure(context, errString);
            } else {
              callbacks.failure(errString);
            }
          }
        }
      }
    };
    return wrapper.send(requestCallbacks);
  };

  KiiUser.prototype._getXhrWrapper = function(method, url) {
    var wrapper, xhr;
    wrapper = KiiXHRWrapperFactory.createXHRWrapper(method, url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    return wrapper;
  };

  KiiUser.prototype._setAuthHeader = function(xhr) {
    var user;
    user = root.KiiUser.getCurrentUser();
    if (user != null) {
      return xhr.setRequestHeader("Authorization", "Bearer " + user.getAccessToken());
    }
  };

  KiiUser.prototype._groupWithJSON = function(json) {
    return root.KiiGroup._groupWithJSON(json);
  };


  /**
  Instantiate topic belongs to this user.
  @param {String} topicName name of the topic. Must be a not empty string.
  @return {KiiTopic} topic instance.
   */

  KiiUser.prototype.topicWithName = function(topicName) {
    var id, puri;
    if (typeof topicName !== "string" || topicName === "") {
      throw new root.InvalidArgumentException('topicName should not null or empty');
    }
    id = this.getID();
    if (!id) {
      throw 'can not instantiate topic from instance which doesn\'t have ID';
    }
    puri = this._getHttpURI();
    return new root.KiiTopic(puri, topicName);
  };


  /** Gets a list of topics in this user scope
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful list request
  @param {Method} callbacks.failure The callback method to call on a failed list request
  @param {String} [paginationKey] You can specify the pagination key with the nextPaginationKey passed by callbacks.success. If empty string or no string object is provided, this API regards no paginationKey specified.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(params). params is Array instance.
          <ul>
            <li>params[0] is array of KiiTopic instances.</li>
            <li>params[1] is string of nextPaginationKey.</li>
          </ul>
        </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.target is the KiiUser instance which this method was called on. </li>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  var user = . . .; // a KiiUser
  user.listTopics({
      success: function(topicList, nextPaginationKey) {
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              user.listTopics({
                  success: function(topicList, nextPaginationKey) {...},
                  failure: function(anErrorString) {...}
              }, nextPaginationKey);
          }
      },
      failure: function(anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use callbacks directly
  var user = . . .; // a KiiUser
  user.listTopics().then(
      function(params) {
          var topicList = params[0];
          var nextPaginationKey = params[1];
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              user.listTopics(null, nextPaginationKey).then(
                  function(params) {...},
                  function(error) {...}
              );
          }
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiUser.prototype.listTopics = function(callbacks, paginationKey) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var listTopicsCallbacks;
        listTopicsCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(arguments[0]);
          }
        };
        return _this._listTopicsUsingCallbacks(listTopicsCallbacks, paginationKey);
      };
    })(this));
  };

  KiiUser.prototype._listTopicsUsingCallbacks = function(callbacks, paginationKey) {
    var listCallbacks, uri, wrapper;
    uri = "" + (this._getHttpURI()) + "/topics";
    if (typeof paginationKey === "string" && paginationKey !== "") {
      uri = uri + "?paginationKey=" + encodeURIComponent(paginationKey);
    }
    wrapper = KiiXHRWrapperFactory.createXHRWrapper('GET', uri);
    wrapper.setKiiHeaders();
    this._setAuthToken(wrapper);
    listCallbacks = {
      success: (function(_this) {
        return function() {
          var json, topic, topics, _i, _len, _ref;
          json = JSON.parse(wrapper.xhr.responseText);
          topics = [];
          _ref = json.topics;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            topic = _ref[_i];
            topics.push(_this.topicWithName(topic.topicID));
          }
          return callbacks != null ? callbacks.success(topics, (json.paginationKey === void 0 ? null : json.paginationKey)) : void 0;
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errObj, errString;
          errString = wrapper.getErrorString("list topics");
          errObj = KiiUtilities._Error(errString, _this);
          return callbacks != null ? callbacks.failure(errObj) : void 0;
        };
      })(this)
    };
    return wrapper.send(listCallbacks);
  };


  /** Instantiate push subscription for this user.
  @return {KiiPushSubscription} push subscription object.
   */

  KiiUser.prototype.pushSubscription = function() {
    return new root.KiiPushSubscription(this);
  };


  /** Instantiate push installation for this user.
  @return {KiiPushInstallation} push installation object.
   */

  KiiUser.prototype.pushInstallation = function() {
    return new root.KiiPushInstallation(this);
  };

  KiiUser.prototype._getSubscriberPath = function() {
    return "users/" + (this.getID());
  };

  KiiUser.prototype._clone = function(obj) {
    var key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = this._clone(obj[key]);
    }
    return newInstance;
  };

  KiiUser.prototype._getHttpURI = function() {
    return "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/users/" + (this.getID());
  };

  KiiUser.prototype._setAuthToken = function(wrapper) {
    return wrapper.setCurrentUserToken();
  };

  return KiiUser;

})();

KiiUtilities = (function() {
  function KiiUtilities() {}

  KiiUtilities.MAX_DATE_IN_MILLIS = 100000000 * 24 * 60 * 60 * 1000;

  KiiUtilities.MIN_DATE_IN_MILLIS = -100000000 * 24 * 60 * 60 * 1000;

  KiiUtilities._validateEmail = function(value) {
    var pattern;
    if ((typeof value).toLowerCase() !== "string") {
      root.Kii.logger("Not string");
      return false;
    }
    value = KiiUtilities._trim(value);
    pattern = /^[^@]+@[^@]+$/;
    return pattern.test(value);
  };

  KiiUtilities._validatePhoneNumber = function(value) {
    var pattern;
    value = KiiUtilities._trim(value);
    pattern = /^[\\+]?[0-9]{10,}$/i;
    if ((typeof value).toLowerCase() !== "string") {
      root.Kii.logger("Not string");
      return false;
    } else if (value.match(pattern)) {
      return true;
    } else {
      return false;
    }
  };

  KiiUtilities._isGlobalPhoneNumber = function(value) {
    var pattern;
    value = KiiUtilities._trim(value);
    pattern = /^[\\+]{1}[0-9]{2}/;
    if ((typeof value).toLowerCase() !== "string") {
      root.Kii.logger("Not string");
      return false;
    } else if (value.match(pattern)) {
      return true;
    } else {
      return false;
    }
  };

  KiiUtilities._validateLocalPhone = function(value) {
    var pattern;
    value = KiiUtilities._trim(value);
    pattern = /^\d+$/;
    if ((typeof value).toLowerCase() !== "string") {
      root.Kii.logger("Not string");
      return false;
    } else if (value.match(pattern)) {
      return true;
    } else {
      root.Kii.logger("Invalid format");
      return false;
    }
  };

  KiiUtilities._assertLocalPhoneIsValid = function(value) {
    if (!KiiUtilities._validateLocalPhone(value)) {
      throw new root.InvalidLocalPhoneNumberException;
    }
  };

  KiiUtilities._validateCountryCode = function(value) {
    var pattern;
    value = KiiUtilities._trim(value);
    pattern = /^[a-z]{2}$/i;
    if ((typeof value).toLowerCase() !== "string") {
      root.Kii.logger("Not string");
      return false;
    } else if (value.match(pattern)) {
      root.Kii.logger("Is true");
      return true;
    } else {
      return false;
    }
  };

  KiiUtilities._assertCountryCodeIsValid = function(value) {
    if (!KiiUtilities._validateCountryCode(value)) {
      throw new root.InvalidCountryException;
    }
  };

  KiiUtilities._validatePassword = function(value) {
    var pattern;
    root.Kii.logger("Validating password: " + value);
    pattern = /^[\x20-\x7E]{4,50}$/;
    if ((typeof value).toLowerCase() !== "string") {
      root.Kii.logger("not string");
      return false;
    } else if (value.match(pattern)) {
      root.Kii.logger("matched");
      return true;
    } else {
      root.Kii.logger("other exception");
      return false;
    }
  };

  KiiUtilities._assertPasswordIsValid = function(value) {
    if (!KiiUtilities._validatePassword(value)) {
      throw new root.InvalidPasswordException;
    }
  };

  KiiUtilities._validateUsername = function(value) {
    var pattern;
    pattern = /^[a-zA-Z0-9-_\\.]{3,64}$/i;
    if ((typeof value).toLowerCase() !== "string") {
      return false;
    } else if (value.match(pattern)) {
      return true;
    } else {
      return false;
    }
  };

  KiiUtilities._validateGroupID = function(value) {
    var pattern;
    pattern = /^[a-z0-9-_.]{1,30}$/;
    if ((typeof value).toLowerCase() !== "string") {
      return false;
    } else if (value.match(pattern)) {
      return true;
    } else {
      return false;
    }
  };

  KiiUtilities._validateDisplayName = function(value) {
    var _ref;
    return KiiUtilities._type(value) === "string" && (1 <= (_ref = value.length) && _ref <= 50);
  };

  KiiUtilities._trim = function(value) {
    var pattern;
    pattern = /^(\s|\u00A0)+|(\s|\u00A0)+$/g;
    return (value || "").replace(pattern, "");
  };

  KiiUtilities._safeAddTicks = function(left, right) {
    if ((isNaN(parseInt(left, 10))) || (isNaN(parseInt(right, 10)))) {
      throw new root.InvalidArgumentException('Parameters should be a number');
    }
    if ((Math.abs(left + right)) > KiiUtilities.MAX_DATE_IN_MILLIS) {
      throw new root.ArithmeticException("Addition of " + left + " and " + right + " result in long overflow");
    }
    return left + right;
  };

  KiiUtilities._safeMultiplyTicks = function(left, right) {
    if ((isNaN(parseInt(left, 10))) || (isNaN(parseInt(right, 10)))) {
      throw new root.InvalidArgumentException('Parameters should be a number');
    }
    if ((Math.abs(left * right)) > KiiUtilities.MAX_DATE_IN_MILLIS) {
      throw new root.ArithmeticException("Multiplication of " + left + " and " + right + " result in long overflow");
    }
    return left * right;
  };

  KiiUtilities._safeCalculateExpiresAtAsNumber = function(expirationInSeconds, baseUnixTimeInMills) {
    var e, expirationInMillis, expiresAt;
    expiresAt = 0;
    try {
      expirationInMillis = KiiUtilities._safeMultiplyTicks(expirationInSeconds, 1000);
      expiresAt = KiiUtilities._safeAddTicks(baseUnixTimeInMills, expirationInMillis);
    } catch (_error) {
      e = _error;
      if (e instanceof root.ArithmeticException) {
        expiresAt = KiiUtilities.MAX_DATE_IN_MILLIS;
      } else {
        throw e;
      }
    }
    return expiresAt;
  };

  KiiUtilities._safeCalculateExpiresAtAsDate = function(expirationInSeconds, baseUnixTimeInMills) {
    var e, expirationInMillis, expiresAt;
    expiresAt = 0;
    try {
      expirationInMillis = KiiUtilities._safeMultiplyTicks(expirationInSeconds, 1000);
      expiresAt = KiiUtilities._safeAddTicks(baseUnixTimeInMills, expirationInMillis);
    } catch (_error) {
      e = _error;
      if (e instanceof root.ArithmeticException) {
        expiresAt = KiiUtilities.MAX_DATE_IN_MILLIS;
      } else {
        throw e;
      }
    }
    return new Date(expiresAt);
  };

  KiiUtilities._isJSONType = function(contentType) {
    var pattern;
    pattern = /\+?json(;.*)?$/i;
    return contentType.match(pattern);
  };

  KiiUtilities._type = function(obj) {
    var classToType;
    if (obj === void 0 || obj === null) {
      return String(obj);
    }
    classToType = {
      '[object Boolean]': 'boolean',
      '[object Number]': 'number',
      '[object String]': 'string',
      '[object Function]': 'function',
      '[object Array]': 'array',
      '[object Date]': 'date',
      '[object RegExp]': 'regexp',
      '[object Object]': 'object'
    };
    return classToType[Object.prototype.toString.call(obj)];
  };

  KiiUtilities._disableCacheURL = function(url) {
    if (url.indexOf('?') !== -1) {
      url += "&disable_cache=";
    } else {
      url += "?disable_cache=";
    }
    url += new Date().getTime();
    return url;
  };

  KiiUtilities._validateServerCodeEntryName = function(value) {
    var pattern;
    pattern = /^[a-zA-Z][_a-zA-Z0-9]*$/i;
    return KiiUtilities._type(value) === "string" && value.match(pattern);
  };

  KiiUtilities._validateServerCodeEntryArgument = function(value) {
    return KiiUtilities._type(value) === "null" || (KiiUtilities._type(value) === "object" && Object.keys(value).length > 0);
  };

  KiiUtilities._validateServerCodeEnryVersion = function(value) {
    return KiiUtilities._type(value) === 'string' && value !== "";
  };

  KiiUtilities._isNonEmptyString = function(s) {
    if (typeof s !== "string") {
      return false;
    }
    return s.length > 0;
  };

  KiiUtilities._Error = function(message, target) {
    var e;
    e = Error(message);
    e.target = target;
    return e;
  };

  KiiUtilities._clone = function(obj) {
    var flags, key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global) {
        flags += 'g';
      }
      if (obj.ignoreCase) {
        flags += 'i';
      }
      if (obj.multiline) {
        flags += 'm';
      }
      if (obj.sticky) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = KiiUtilities._clone(obj[key]);
    }
    return newInstance;
  };

  return KiiUtilities;

})();


/**
    @class Represents a KiiSocialConnect object
    @exports root.KiiACL as KiiACL
 */

root.KiiSocialConnect = (function() {
  var _instance;

  function KiiSocialConnect() {}

  _instance = null;


  /** @deprecated You don't have to call this method.
  Set up a reference to one of the supported KiiSocialNetworks.
  
  Set up the network. Need to be called before accessing other methods.
              <br><b> Facebook </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Argument</th>
                  <th>Value Type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>networkName</td>
                  <td>Number</td>
                  <td>KiiSocialNetworkName.FACEBOOK</td>
                  <td>Specify Facebook</td>
              </tr>
              <tr>
                  <td>apiKey</td>
                  <td>String</td>
                  <td>null</td>
                  <td>Facebook does not requires this argument.</td>
              </tr>
              <tr>
                  <td>apiSecret</td>
                  <td>String</td>
                  <td>null</td>
                  <td>Facebook does not requires this argument.</td>
              </tr>
              <tr>
                  <td>extras</td>
                  <td>Object</td>
                  <td>null</td>
                  <td>Facebook does not requires this argument.</td>
              </tr>
              </tbody>
              </table>
  
              <br><b> Twitter </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Argument</th>
                  <th>Value Type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>networkName</td>
                  <td>Number</td>
                  <td>KiiSocialNetworkName.TWITTER</td>
                  <td>Specify Twitter</td>
              </tr>
              <tr>
                  <td>apiKey</td>
                  <td>String</td>
                  <td>null</td>
                  <td>Twitter does not requires this argument.</td>
              </tr>
              <tr>
                  <td>apiSecret</td>
                  <td>String</td>
                  <td>null</td>
                  <td>Twitter does not requires this argument.</td>
              </tr>
              <tr>
                  <td>extras</td>
                  <td>Object</td>
                  <td>null</td>
                  <td>Twitter does not requires this argument.</td>
              </tr>
              </tbody>
              </table>
              <br><b> QQ </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Argument</th>
                  <th>Value Type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>networkName</td>
                  <td>Number</td>
                  <td>KiiSocialNetworkName.QQ</td>
                  <td>Specify QQ</td>
              </tr>
              <tr>
                  <td>apiKey</td>
                  <td>String</td>
                  <td>null</td>
                  <td>QQ does not requires this argument.</td>
              </tr>
              <tr>
                  <td>apiSecret</td>
                  <td>String</td>
                  <td>null</td>
                  <td>QQ does not requires this argument.</td>
              </tr>
              <tr>
                  <td>extras</td>
                  <td>Object</td>
                  <td>null</td>
                  <td>QQ does not requires this argument.</td>
              </tr>
              </tbody>
              </table>
  
   @param {KiiSocialNetworkName} networkName One of the supported KiiSocialNetworkName values
   @param {String} apiKey The SDK key assigned by the social network provider. For details refer to the table above.
   @param {String} apiSecret The SDK secret assigned by the social network provider. For details refer to the table above.
   @param {Object} extras Extra options that should be passed to the SNS. For details refer to the table above.
   @throws {InvalidArgumentException} For details refer to the table above
   */

  KiiSocialConnect.setupNetwork = function(networkName, apiKey, apiSecret, extras) {};


  /** Log a user into the social network provided
  
   This will initiate the login process for the given network. If user has already linked with the specified social network,
   sign-in with the social network. Otherwise, this will sign-up and create new user authenticated by the specified social network.
   If sign-up successful, the user is cached inside SDK as current user,and accessible via {@link KiiUser.getCurrentUser()}.
   User token and token expiration is also cached and can be get by {@link KiiUser#getAccessTokenObject()}.
   Access token won't be expired unless you set it explicitly by {@link Kii.setAccessTokenExpiration()}.
   The network must already be set up via setupNetwork<br>
   If the opitons is invalid, callbacks.failure or reject callback of promise will be called. <br>
  
   @param networkName One of the supported KiiSocialNetworkName values
   @param options A dictionary of key/values to pass to KiiSocialConnect
  
              <br><b> Facebook </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>access_token</td>
                  <td>String</td>
                  <td>Access token of Facebook.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
              <br><b> Twitter </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>oauth_token</td>
                  <td>String</td>
                  <td>OAuth access token of twitter.</td>
                  <td>This is mandatory. </td>
              </tr>
              <tr>
                  <td>oauth_token_secret</td>
                  <td>String</td>
                  <td>OAuth access token secret of twitter.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
              <br><b> Google </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>access_token</td>
                  <td>String</td>
                  <td>Access token of Google.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
              <br><b> Renren </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>access_token</td>
                  <td>String</td>
                  <td>Access token of Renren.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
              <br><b> QQ </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>access_token</td>
                  <td>String</td>
                  <td>Access token of QQ.</td>
                  <td>This is mandatory. </td>
              </tr>
              <tr>
                  <td>openID</td>
                  <td>String</td>
                  <td>OpenID of QQ.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
  
   @param {Object} [callbacks] An object with callback methods defined
   @param {Method} callbacks.success The callback method to call on a successful log in request
   @param {Method} callbacks.failure The callback method to call on a failed log in request
   @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a logged in KiiUser instance.</li>
          <li>params[1] is the KiiSocialNetworkName used to login.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
          <li>error.network is the KiiSocialNetworkName used to login.</li>
        </ul>
      </li>
    </ul>
   @example
   // example to use callbacks directly
   // Example of using no option
   KiiSocialConnect.logIn(KiiSocialNetworkName.FACEBOOK, null, {
  
       success: function(user, network) {
           // do something now that the user is logged in
       },
  
       failure: function(user, network, anErrorString) {
           // do something with the error response
       }
   });
  
   // example to use Promise
   KiiSocialConnect.logIn(KiiSocialNetworkName.FACEBOOK, null).then(
       function(params) {
           // do something now that the user is logged in
       },
       function(error) {
           // do something with the error response
       }
   );
   */

  KiiSocialConnect.logIn = function(networkName, options, callbacks) {
    if (_instance == null) {
      _instance = new _KiiSocialConnect;
    }
    return new Promise(function(resolve, reject) {
      var error, errorString, logInCallbacks;
      logInCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success.apply(callbacks, arguments);
          }
          return resolve(arguments);
        },
        failure: function() {
          var error;
          if (callbacks != null) {
            callbacks.failure.apply(callbacks, arguments);
          }
          error = KiiUtilities._Error(arguments[2]);
          error.network = networkName;
          return reject(error);
        }
      };
      try {
        return KiiSocialConnect._logInUsingCallbacks(networkName, options, logInCallbacks);
      } catch (_error) {
        errorString = _error;
        if (callbacks != null) {
          if (typeof callbacks.failure === "function") {
            callbacks.failure(null, networkName, errorString);
          }
        }
        error = KiiUtilities._Error(errorString);
        error.network = networkName;
        return reject(error);
      }
    });
  };

  KiiSocialConnect._logInUsingCallbacks = function(networkName, options, callbacks) {
    var called;
    called = false;
    if (_instance != null) {
      root.Kii.logger("And manager: ");
      root.Kii.logger(_instance._getManager(networkName));
      if (_instance._getManager(networkName)) {
        _instance._getManager(networkName)._logIn(options, callbacks);
        called = true;
      }
    }
    root.Kii.logger("Callbacks");
    root.Kii.logger(callbacks);
    if (!called && (callbacks != null)) {
      return callbacks.failure(root.KiiUser.getCurrentUser(), networkName, "Unable to get network. Please ensure the network name is one of the supported KiiSocialNetworkName values");
    }
  };


  /** Link the currently logged in user with a social network
  
   This will initiate the login process for the given network, which for SSO-enabled services like Facebook, will send the user to the Facebook site for authentication. There must be a currently authenticated KiiUser. Otherwise, you can use the logIn: method to create and log in a KiiUser using a network. The network must already be set up via setupNetwork<br>
   If there is not logged-in user to link with, callbacks.failure or reject callback of promise will be called. <br>
   If the opitons is invalid, callbacks.failure or reject callback of promise will be called. <br>
   @param networkName One of the supported KiiSocialNetworkName values
   @param options A dictionary of key/values to pass to KiiSocialConnect
              <br><b> Facebook </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>access_token</td>
                  <td>String</td>
                  <td>Access token of Facebook.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
              <br><b> Twitter </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>oauth_token</td>
                  <td>String</td>
                  <td>OAuth access token of twitter.</td>
                  <td>This is mandatory.</td>
              </tr>
              <tr>
                  <td>oauth_token_secret</td>
                  <td>String</td>
                  <td>OAuth access token secret of twitter.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
              <br><b> Google </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>access_token</td>
                  <td>String</td>
                  <td>Access token of Google.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
              <br><b> Renren </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>access_token</td>
                  <td>String</td>
                  <td>Access token of Renren.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
             <br><b> QQ </b>
              <table border="1" cellspacing="0">
              <thead>
              <tr bgcolor="#CCCCFF">
                  <th>Key</th>
                  <th>Value type</th>
                  <th>Value</th>
                  <th>Note</th>
              </tr>
              </thead>
              <tbody>
              <tr>
                  <td>access_token</td>
                  <td>String</td>
                  <td>Access token of QQ.</td>
                  <td>This is mandatory. </td>
              </tr>
              <tr>
                  <td>openID</td>
                  <td>String</td>
                  <td>OpenID of QQ.</td>
                  <td>This is mandatory.</td>
              </tr>
              </tbody>
              </table>
  
   @param {Object} [callbacks] An object with callback methods defined
   @param {Method} callbacks.success The callback method to call on a successful log in request
   @param {Method} callbacks.failure The callback method to call on a failed log in request
   @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a linked KiiUser instance.</li>
          <li>params[1] is the KiiSocialNetworkName used to link.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is current logged-in KiiUser instance. If there is not logged-in user, it will be null.</li>
          <li>error.message</li>
          <li>error.network is the KiiSocialNetworkName used to link.</li>
        </ul>
      </li>
    </ul>
   @example
   // example to use callbacks directly
   // Example of using no option
   KiiSocialConnect.linkCurrentUserWithNetwork(KiiSocialNetworkName.FACEBOOK, null, {
  
       success: function(user, network) {
           // do something now that the user is linked
       },
  
       failure: function(user, network, anErrorString) {
           // do something with the error response
       }
   });
  
   // example to use Promise
   // Example of using no option
   KiiSocialConnect.linkCurrentUserWithNetwork(KiiSocialNetworkName.FACEBOOK, null).then(
       function(params) {
           // do something now that the user is linked
       },
       function(error) {
           // do something with the error response
       }
   );
   */

  KiiSocialConnect.linkCurrentUserWithNetwork = function(networkName, options, callbacks) {
    if (_instance == null) {
      _instance = new _KiiSocialConnect;
    }
    return new Promise(function(resolve, reject) {
      var currentUser, error, errorString, linkCurrentUserWithNetworkCallbacks;
      linkCurrentUserWithNetworkCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success.apply(callbacks, arguments);
          }
          return resolve(arguments);
        },
        failure: function() {
          var error;
          if (callbacks != null) {
            callbacks.failure.apply(callbacks, arguments);
          }
          error = KiiUtilities._Error(arguments[2]);
          error.target = arguments[0];
          error.network = networkName;
          return reject(error);
        }
      };
      try {
        return KiiSocialConnect._linkCurrentUserWithNetworkUsingCallbacks(networkName, options, linkCurrentUserWithNetworkCallbacks);
      } catch (_error) {
        errorString = _error;
        currentUser = root.KiiUser.getCurrentUser();
        if (callbacks != null) {
          if (typeof callbacks.failure === "function") {
            callbacks.failure(currentUser, networkName, errorString);
          }
        }
        error = KiiUtilities._Error(errorString);
        error.target = currentUser;
        error.network = networkName;
        return reject(error);
      }
    });
  };

  KiiSocialConnect._linkCurrentUserWithNetworkUsingCallbacks = function(networkName, options, callbacks) {
    var called;
    root.Kii.logger("Trying with instance");
    root.Kii.logger(_instance);
    called = false;
    if (_instance != null) {
      root.Kii.logger("And manager: ");
      root.Kii.logger(_instance._getManager(networkName));
      if (_instance._getManager(networkName)) {
        _instance._getManager(networkName)._linkWithCurrentUser(options, callbacks);
        called = true;
      }
    }
    root.Kii.logger("Callbacks");
    root.Kii.logger(callbacks);
    if (!called && (callbacks != null)) {
      return callbacks.failure(root.KiiUser.getCurrentUser(), networkName, "Unable to get network. Please ensure the network name is one of the supported KiiSocialNetworkName values");
    }
  };


  /** Unlink the currently logged in user with a social network
  
   The network must already be set up via setupNetwork
   @param networkName One of the supported KiiSocialNetworkName values
   @param {Object} [callbacks] An object with callback methods defined
   @param {Method} callbacks.success The callback method to call on a successful log in request
   @param {Method} callbacks.failure The callback method to call on a failed log in request
   @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a unlinked KiiUser instance.</li>
          <li>params[1] is the KiiSocialNetworkName used to unlink.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is current logged-in KiiUser instance. If there is not logged-in user, it will be null.</li>
          <li>error.message</li>
          <li>error.network is the KiiSocialNetworkName used to unlink.</li>
        </ul>
      </li>
    </ul>
   @example
  
   // example to use callbacks directly
   KiiSocialConnect.unLinkCurrentUserFromNetwork(KiiSocialNetworkName.FACEBOOK, {
  
       success: function(user, network) {
           // do something now that the user is unlinked
       },
  
       failure: function(user, network, anErrorString) {
           // do something with the error response
       }
   });
  
   // example to use Promise
   KiiSocialConnect.unLinkCurrentUserFromNetwork(KiiSocialNetworkName.FACEBOOK).then(
       function(params) {
           // do something now that the user is unlinked
       },
       function(error) {
           // do something with the error response
       }
   );
   */

  KiiSocialConnect.unLinkCurrentUserFromNetwork = function(networkName, callbacks) {
    if (_instance == null) {
      _instance = new _KiiSocialConnect;
    }
    return new Promise(function(resolve, reject) {
      var unLinkCurrentUserWithNetworkCallbacks;
      unLinkCurrentUserWithNetworkCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success.apply(callbacks, arguments);
          }
          return resolve(arguments);
        },
        failure: function() {
          var error;
          if (callbacks != null) {
            callbacks.failure.apply(callbacks, arguments);
          }
          error = KiiUtilities._Error(arguments[2]);
          error.target = arguments[0];
          error.network = networkName;
          return reject(error);
        }
      };
      return KiiSocialConnect._unLinkCurrentUserWithNetworkUsingCallbacks(networkName, unLinkCurrentUserWithNetworkCallbacks);
    });
  };

  KiiSocialConnect._unLinkCurrentUserWithNetworkUsingCallbacks = function(networkName, callbacks) {
    root.Kii.logger("Trying with instance");
    root.Kii.logger(_instance);
    if (_instance != null) {
      root.Kii.logger("And manager: ");
      root.Kii.logger(_instance._getManager(networkName));
      if (_instance._getManager(networkName)) {
        return _instance._getManager(networkName)._unlinkFromCurrentUser(callbacks);
      }
    } else if (callbacks != null) {
      return callbacks.failure(root.KiiUser.getCurrentUser(), networkName, "Unable to get network. Please ensure the network name is one of the supported KiiSocialNetworkName values");
    }
  };


  /** Retrieve the current user's access token from a social network
  The network must be set up and linked to the current user. It is recommended you save this to preferences for multi-session use.
  @param networkName One of the supported KiiSocialNetworkName values
  @returns {String} The current access token, null if unavailable
  @deprecated Use {@link KiiSocialConnect.getAccessTokenObjectForNetwork} instead.
   */

  KiiSocialConnect.getAccessTokenForNetwork = function(networkName) {
    return _instance != null ? _instance._getManager(networkName)._getToken() : void 0;
  };


  /** Retrieve the current user's access token expiration date from a social network
  
  The network must be set up and linked to the current user. It is recommended you save this to preferences for multi-session use.
  @param networkName One of the supported KiiSocialNetworkName values
  @returns {String} The current access token expiration date, null if unavailable
  @deprecated Use {@link KiiSocialConnect.getAccessTokenObjectForNetwork} instead.
   */

  KiiSocialConnect.getAccessTokenExpirationForNetwork = function(networkName) {
    return _instance != null ? _instance._getManager(networkName)._getTokenExpiration() : void 0;
  };


  /** Retrieve the current user's access token object from a social network
  
  The network must be set up and linked to the current user.
  It is recommended you save this to preferences for multi-session use.<br><br>
  Following parameters can be assigned to object.<br><br>
  <b>Facebook</b>
  <li>access_token</li>
  <li>expires_in</li>
  <li>kii_new_user</li>
  <br>
  <b>Twitter</b>
  <li>oauth_token</li>
  <li>oauth_token_secret</li>
  <li>kii_new_user</li>
  <br>
  <b>Google</b>
  <li>access_token</li>
  <li>kii_new_user</li>
  <br>
  <b>RenRen</b>
  <li>access_token</li>
  <li>kii_new_user</li>
  <br>
  <b>QQ</b>
  <li>access_token</li>
  <li>openID</li>
  <li>kii_new_user</li>
  @param networkName One of the supported KiiSocialNetworkName values
  @returns {Object} tokenObject The current access token object, null if unavailable.
   */

  KiiSocialConnect.getAccessTokenObjectForNetwork = function(networkName) {
    return _instance != null ? _instance._getManager(networkName)._getTokenObject() : void 0;
  };

  KiiSocialConnect.logOutAll = function() {
    var fb, google, qq, renren, tw;
    if (_instance != null) {
      fb = _instance._getManager(root.KiiSocialNetworkName.FACEBOOK);
      if (fb != null) {
        fb._logOut();
      }
      tw = _instance._getManager(root.KiiSocialNetworkName.TWITTER);
      if (tw != null) {
        tw._logOut();
      }
      qq = _instance._getManager(root.KiiSocialNetworkName.QQ);
      if (qq != null) {
        qq._logOut();
      }
      google = _instance._getManager(root.KiiSocialNetworkName.GOOGLEPLUS);
      if (google != null) {
        google._logOut();
      }
      renren = _instance._getManager(root.KiiSocialNetworkName.RENREN);
      if (renren != null) {
        return renren._logOut();
      }
    }
  };

  return KiiSocialConnect;

})();

_KiiSocialConnect = (function() {
  function _KiiSocialConnect() {
    this._getManager = __bind(this._getManager, this);
  }

  _KiiSocialConnect.prototype._getManager = function(networkName) {
    if (networkName === root.KiiSocialNetworkName.FACEBOOK) {
      if (this._facebookManager != null) {
        return this._facebookManager;
      } else {
        return this._facebookManager = new root.KiiSCNFacebook();
      }
    } else if (networkName === root.KiiSocialNetworkName.TWITTER) {
      if (this._twitterManager != null) {
        return this._twitterManager;
      } else {
        return this._twitterManager = new root.KiiSCNTwitter();
      }
    } else if (networkName === root.KiiSocialNetworkName.QQ) {
      if (this._qqManager != null) {
        return this._qqManager;
      } else {
        return this._qqManager = new root.KiiSCNQQ();
      }
    } else if (networkName === root.KiiSocialNetworkName.GOOGLEPLUS) {
      if (this._googleManager != null) {
        return this._googleManager;
      } else {
        return this._googleManager = new root.KiiSCNGoogle();
      }
    } else if (networkName === root.KiiSocialNetworkName.RENREN) {
      if (this._renrenManager != null) {
        return this._renrenManager;
      } else {
        return this._renrenManager = new root.KiiSCNRenRen();
      }
    }
  };

  return _KiiSocialConnect;

})();

root.KiiSocialConnectNetwork = (function() {
  KiiSocialConnectNetwork.prototype._className = "KiiSocialConnectNetwork";

  KiiSocialConnectNetwork.prototype._setNetwork = function(_network) {
    this._network = _network;
  };

  KiiSocialConnectNetwork.prototype._getNetwork = function() {
    return this._network;
  };

  KiiSocialConnectNetwork.prototype._setToken = function(_token) {
    this._token = _token;
  };

  KiiSocialConnectNetwork.prototype._getToken = function() {
    return this._token;
  };

  KiiSocialConnectNetwork.prototype._setTokenExpiration = function(_tokenExpiration) {
    this._tokenExpiration = _tokenExpiration;
  };

  KiiSocialConnectNetwork.prototype._getTokenExpiration = function() {
    return this._tokenExpiration;
  };

  KiiSocialConnectNetwork.prototype._setTokenObject = function(_tokenObject) {
    this._tokenObject = _tokenObject;
  };

  KiiSocialConnectNetwork.prototype._getTokenObject = function() {
    return this._tokenObject;
  };

  function KiiSocialConnectNetwork(_network) {
    this._network = _network;
    this._unlink = __bind(this._unlink, this);
    this._link = __bind(this._link, this);
    this._register = __bind(this._register, this);
    this._getAccessToken = __bind(this._getAccessToken, this);
    this._createTokenObject = __bind(this._createTokenObject, this);
    this._unlinkFromCurrentUser = __bind(this._unlinkFromCurrentUser, this);
    this._linkWithCurrentUser = __bind(this._linkWithCurrentUser, this);
    this._logOut = __bind(this._logOut, this);
    this._logIn = __bind(this._logIn, this);
    this._isAuthenticated = __bind(this._isAuthenticated, this);
    this._getTokenObject = __bind(this._getTokenObject, this);
    this._setTokenObject = __bind(this._setTokenObject, this);
    this._getTokenExpiration = __bind(this._getTokenExpiration, this);
    this._setTokenExpiration = __bind(this._setTokenExpiration, this);
    this._getToken = __bind(this._getToken, this);
    this._setToken = __bind(this._setToken, this);
    this._getNetwork = __bind(this._getNetwork, this);
    this._setNetwork = __bind(this._setNetwork, this);
    this._tokenExpiration = null;
    this._token = null;
  }

  KiiSocialConnectNetwork.prototype._isAuthenticated = function() {
    return this._tokenObject != null;
  };

  KiiSocialConnectNetwork.prototype._logIn = function(options, callbacks) {};

  KiiSocialConnectNetwork.prototype._logOut = function() {
    this._token = null;
    this._tokenExpiration = null;
    return this._tokenObject = null;
  };

  KiiSocialConnectNetwork.prototype._linkWithCurrentUser = function(options, callbacks) {};

  KiiSocialConnectNetwork.prototype._unlinkFromCurrentUser = function(callbacks) {};

  KiiSocialConnectNetwork.prototype._createTokenObject = function(options, data) {};

  KiiSocialConnectNetwork.prototype._getAccessToken = function(options) {};

  KiiSocialConnectNetwork.prototype._register = function(providerName, contentType, requestData, options, callbacks) {
    var currentTime, now, registrationCallbacks, request, token;
    if (root.Kii.getAccessTokenExpiration() > 0) {
      now = new Date;
      currentTime = now.getTime();
      requestData.expiresAt = KiiUtilities._safeCalculateExpiresAtAsNumber(root.Kii.getAccessTokenExpiration(), currentTime);
    }
    request = new KiiRequest("/integration/" + providerName, true);
    request.setMethod("POST");
    request.setData(requestData);
    request.setAnonymous(true);
    request.setContentType(contentType);
    token = this._getAccessToken(options);
    registrationCallbacks = {
      success: (function(_this) {
        return function(data) {
          var refreshCallback, tokenObject, user, value;
          _this._setToken(token);
          tokenObject = _this._createTokenObject(options, data);
          _this._setTokenObject(tokenObject);
          user = new root.KiiUser();
          user._updateWithJSON(data);
          user._setAccessToken(data['access_token']);
          if (data.expires_in != null) {
            now = new Date;
            currentTime = now.getTime();
            value = KiiUtilities._safeCalculateExpiresAtAsDate(data.expires_in, currentTime);
            user._setExpiresAt(value);
          }
          root.Kii.setCurrentUser(user);
          refreshCallback = {
            success: function(refreshedUser) {
              root.Kii.setCurrentUser(refreshedUser);
              if (callbacks != null) {
                return callbacks.success(refreshedUser, _this._network);
              }
            },
            failure: function(theUser, error) {
              if (callbacks != null) {
                return callbacks.failure(theUser, _this._network, error);
              }
            }
          };
          return user.refresh(refreshCallback);
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(null, _this._network, error);
          }
        };
      })(this)
    };
    return request.execute(registrationCallbacks, false);
  };

  KiiSocialConnectNetwork.prototype._link = function(providerName, contentType, requestData, options, callbacks) {
    var linkCallbacks, request, token;
    request = new KiiRequest("/users/me/" + providerName + "/link", true);
    request.setMethod("POST");
    request.setData(requestData);
    request.setContentType(contentType);
    token = this._getAccessToken(options);
    linkCallbacks = {
      success: (function(_this) {
        return function(data) {
          var refreshCallback, tokenObject;
          _this._setToken(token);
          tokenObject = _this._createTokenObject(options, data);
          _this._setTokenObject(tokenObject);
          refreshCallback = {
            success: function(refreshedUser) {
              root.Kii.setCurrentUser(refreshedUser);
              if (callbacks != null) {
                return callbacks.success(refreshedUser, _this._network);
              }
            },
            failure: function(theUser, error) {
              if (callbacks != null) {
                return callbacks.failure(theUser, _this._network, error);
              }
            }
          };
          return root.KiiUser.getCurrentUser().refresh(refreshCallback);
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(root.KiiUser.getCurrentUser(), _this._network, error);
          }
        };
      })(this)
    };
    return request.execute(linkCallbacks, true);
  };

  KiiSocialConnectNetwork.prototype._unlink = function(providerName, callbacks) {
    var request, unlinkCallbacks;
    request = new KiiRequest("/users/me/" + providerName + "/unlink", true);
    request.setMethod("POST");
    unlinkCallbacks = {
      success: (function(_this) {
        return function(data) {
          var refreshCallback;
          _this._setToken(null);
          _this._setTokenExpiration(null);
          _this._setTokenObject(null);
          refreshCallback = {
            success: function(refreshedUser) {
              root.Kii.setCurrentUser(refreshedUser);
              if (callbacks != null) {
                return callbacks.success(refreshedUser, _this._network);
              }
            },
            failure: function(theUser, error) {
              if (callbacks != null) {
                return callbacks.failure(theUser, _this._network, error);
              }
            }
          };
          return root.KiiUser.getCurrentUser().refresh(refreshCallback);
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(root.KiiUser.getCurrentUser(), _this._network, error);
          }
        };
      })(this)
    };
    return request.execute(unlinkCallbacks, true);
  };

  return KiiSocialConnectNetwork;

})();

root.KiiSCNFacebook = (function(_super) {
  __extends(KiiSCNFacebook, _super);

  function KiiSCNFacebook() {
    this._unlinkFromCurrentUser = __bind(this._unlinkFromCurrentUser, this);
    this._linkWithCurrentUser = __bind(this._linkWithCurrentUser, this);
    this._logOut = __bind(this._logOut, this);
    this._logIn = __bind(this._logIn, this);
    this._getAccessToken = __bind(this._getAccessToken, this);
    this._createTokenObject = __bind(this._createTokenObject, this);
    this._setup = __bind(this._setup, this);
    KiiSCNFacebook.__super__.constructor.call(this, root.KiiSocialNetworkName.FACEBOOK);
  }

  KiiSCNFacebook.prototype._setup = function(_key, _secret, _extras) {
    this._key = _key;
    this._secret = _secret;
    this._extras = _extras;
    return KiiSCNFacebook.__super__._setup.call(this, this._key, this._secret, this._extras);
  };

  KiiSCNFacebook.prototype._createTokenObject = function(options, data) {
    var tokenObject;
    tokenObject = {
      "access_token": options.access_token
    };
    if ((data != null) && (data.new_user_created != null)) {
      tokenObject["kii_new_user"] = data.new_user_created;
    }
    return tokenObject;
  };

  KiiSCNFacebook.prototype._getAccessToken = function(options) {
    return options.access_token;
  };

  KiiSCNFacebook.prototype._logIn = function(options, callbacks) {
    var requestData;
    root.Kii.logger("should auth fb");
    root.Kii.logger("Checking options");
    if ((options == null) || !options.access_token) {
      throw root.InvalidArgumentException('options.access_token is required');
    }
    if (root.KiiUser.getCurrentUser() != null) {
      root.KiiUser.logOut();
    }
    requestData = {
      "accessToken": options.access_token
    };
    return this._register("facebook", "application/vnd.kii.AuthTokenFacebookRequest+json", requestData, options, callbacks);
  };

  KiiSCNFacebook.prototype._logOut = function() {
    KiiSCNFacebook.__super__._logOut.apply(this, arguments);
    return root.Kii.logger("Log out fb");
  };

  KiiSCNFacebook.prototype._linkWithCurrentUser = function(options, callbacks) {
    var requestData;
    if (root.KiiUser.getCurrentUser() != null) {
      if ((options == null) || !options.access_token) {
        throw root.InvalidArgumentException('options.access_token is required');
      }
      requestData = {
        "accessToken": options.access_token
      };
      return this._link("facebook", "application/vnd.kii.LinkFacebookRequest+json", requestData, options, callbacks);
    } else if (callbacks != null) {
      return callbacks.failure(null, this._network, "A KiiUser must be logged in before linking to Facebook");
    }
  };

  KiiSCNFacebook.prototype._unlinkFromCurrentUser = function(callbacks) {
    if (root.KiiUser.getCurrentUser() != null) {
      return this._unlink("facebook", callbacks);
    } else if (callbacks != null) {
      return callbacks.failure("A KiiUser must be logged in before unlinking from Facebook");
    }
  };

  return KiiSCNFacebook;

})(root.KiiSocialConnectNetwork);

root.InvalidDisplayNameException = function() {
  return this.message = "Unable to set displayName. Must be between 1-50 characters.";
};

root.InvalidPasswordException = function() {
  return this.message = "Unable to set password. Must be between 4-50 characters composed with ascii (exclude control character)";
};

root.InvalidUsernameException = function() {
  return this.message = "Unable to set username. Must be between 3 and 64 characters, which can include alphanumeric characters as well as underscores '_' and periods '.'";
};

root.InvalidUserIdentifierException = function() {
  return this.message = "User identifier should be one of user name, phone number or email";
};

root.InvalidEmailException = function() {
  return this.message = "Unable to set email address. Must be a valid email";
};

root.InvalidPhoneNumberException = function() {
  return this.message = "Unable to set phone number. Must begin with a '+' and be at least 10 digits";
};

root.InvalidLocalPhoneNumberException = function() {
  return this.message = "Unable to set phone number. Must be a sequence of numbers";
};

root.InvalidCountryException = function() {
  return this.message = "Unable to set country code. Must be 2 alphabetic characters. Ex: US, JP, CN";
};

root.InvalidURIException = function() {
  return this.message = "Unable to set URI. Must be of the form kiicloud://some/path/to/object/or/entity";
};

root.InvalidACLAction = function() {
  return this.message = "Unable to set ACL action. Must be one of the permitted values in KiiACLAction";
};

root.InvalidACLSubject = function() {
  return this.message = "Unable to set ACL subject. Must be of type KiiUser or KiiGroup";
};

root.InvalidACLGrant = function() {
  return this.message = "Unable to set ACL grant. Must be a boolean type";
};

root.InvalidLimitException = function() {
  return this.message = "Unable to set query limit. Must be an integer > 0";
};

root.InvalidArgumentException = function(message) {
  return this.message = 'InvalidArgument: ' + message;
};

root.IllegalStateException = function(message) {
  return this.message = 'IllegalState: ' + message;
};

root.ArithmeticException = function(message) {
  return this.message = 'ArithmeticException: ' + message;
};

root.UnsupportedOperationException = function(message) {
  return this.message = 'UnsupportedOperationException: ' + message;
};


/**
    @class represents the app admin context
    <br><br>
    <B>This class must not referred from code accessible from browser.
    This class is intended to be used by server side code like Node.js.
    If you use this class in code accessible by browser, your application client id and client secret could be stolen.
    Attacker will be act as application admin and all the data in your application will be suffered.
    </B>
    Application administrator context. Entities obtained from this class will be manipulated by application admin.
    @exports root.KiiAppAdminContext as KiiAppAdminContext
 */

root.KiiAppAdminContext = (function() {
  function KiiAppAdminContext(spec) {
    this.listTopics = __bind(this.listTopics, this);
    this.topicWithName = __bind(this.topicWithName, this);
    this.loadThingWithThingID = __bind(this.loadThingWithThingID, this);
    this.loadThingWithVendorThingID = __bind(this.loadThingWithVendorThingID, this);
    this.registerOwnerWithVendorThingID = __bind(this.registerOwnerWithVendorThingID, this);
    this.registerOwnerWithThingID = __bind(this.registerOwnerWithThingID, this);
    this.thingWithID = __bind(this.thingWithID, this);
    this.registerThing = __bind(this.registerThing, this);
    this.registerGroupWithOwnerAndID = __bind(this.registerGroupWithOwnerAndID, this);
    this._getToken = __bind(this._getToken, this);
    this.getAccessToken = __bind(this.getAccessToken, this);
    this._getId = __bind(this._getId, this);
    this._objectWithURI = __bind(this._objectWithURI, this);
    this._token = spec.token;
    this._id = spec.id;
  }


  /**
      Creates a reference to a bucket operated by app admin.
      <br><br>The bucket will be created/accessed within this app's scope
      @param String bucketName The name of the bucket the app should create/access
      @returns {KiiBucket} A working KiiBucket object
      @example
      Kii.authenticateAsAppAdmin("client-id", "client-secret", {
          success: function(adminContext) {
              var bucket = adminContext.bucketWithName("myBucket");
              // KiiBucket operation by app admin is available now.
          },
          failure: function(errorString, errorCode) {
              // auth failed.
          }
      });
   */

  KiiAppAdminContext.prototype.bucketWithName = function(bucketName) {
    var adminBucket;
    adminBucket = new root.KiiBucketWithToken(bucketName, null, this._token);
    return adminBucket;
  };


  /**
      Creates a reference to a encrypted bucket operated by app admin.
      <br><br>The bucket will be created/accessed within this app's scope
      @param String bucketName The name of the bucket the app should create/access
      @returns {KiiBucket} A working KiiBucket object
      @example
      Kii.authenticateAsAppAdmin("client-id", "client-secret", {
          success: function(adminContext) {
              var bucket = adminContext.encryptedBucketWithName("myBucket");
              // KiiBucket operation by app admin is available now.
          },
          failure: function(errorString, errorCode) {
              // auth failed.
          }
      });
   */

  KiiAppAdminContext.prototype.encryptedBucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiEncryptedBucketWithToken(bucketName, null, this._token);
    return bucket;
  };


  /**
      Creates a reference to a group operated by app admin.
      <br><br>
      <b>Note:</b>
      Returned instance from this API can not operate existing KiiGroup.<br>
      If you want to operate existing KiiGroup, please use {@link KiiAppAdminContext#groupWithURI} or {@link KiiAppAdminContext#groupWithID}.
  
      @param String group name.
      @returns {KiiGroup} A working KiiGroup object
      @example
      Kii.authenticateAsAppAdmin("client-id", "client-secret", {
          success: function(adminContext) {
              var group = adminContext.groupWithName("newGroup");
              // KiiGroup operation by app admin is available now.
          },
          failure: function(errorString, errorCode) {
              // auth failed.
          }
      });
   */

  KiiAppAdminContext.prototype.groupWithName = function(groupName) {
    var group;
    group = root.KiiGroupWithToken._groupWithName(groupName, this._token);
    return group;
  };


  /**
      Creates a reference to a user operated by app admin.
      @param String user id.
      @returns {KiiUser} A working KiiUser object
      @example
      Kii.authenticateAsAppAdmin("client-id", "client-secret", {
          success: function(adminContext) {
              var user = adminContext.userWithID("userid");
              // KiiUser operation by app admin is available now.
          },
          failure: function(errorString, errorCode) {
              // auth failed.
          }
      });
   */

  KiiAppAdminContext.prototype.userWithID = function(userid) {
    var user;
    user = root.KiiUserWithToken._userWithID(userid, this._token);
    return user;
  };


  /**
      Creates a reference to an object operated by app admin using object`s URI.
      @param String object URI.
      @returns {KiiObject} A working KiiObject instance
      @throws {InvalidURIException} If the URI is null, empty or does not have correct format.
   */

  KiiAppAdminContext.prototype.objectWithURI = function(objectURI) {
    var object;
    object = this._objectWithURI(objectURI);
    return object;
  };

  KiiAppAdminContext.prototype._userWithLoginName = function(loginName, callbacks) {
    var refreshCallbacks, request, user;
    user = new root.KiiUserWithToken(this._token);
    request = user._getRequest({
      path: "/users/LOGIN_NAME:" + loginName,
      withApp: true
    });
    request.setAdminToken(this._token);
    refreshCallbacks = {
      success: (function(_this) {
        return function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            user._updateWithJSON(data);
            if (callbacks != null) {
              return callbacks.success(user);
            }
          } else if (callbacks != null) {
            return callbacks.failure("Unable to parse response");
          }
        };
      })(this),
      failure: (function(_this) {
        return function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(error);
          }
        };
      })(this)
    };
    return request.execute(refreshCallbacks, false);
  };

  KiiAppAdminContext.prototype._objectWithURI = function(objectUri) {
    var bucket, bucketIndex, bucketName, compLength, components, newURI, obj, subject, valid;
    if (!objectUri) {
      throw new root.InvalidURIException;
    }
    valid = (objectUri.indexOf("kiicloud://")) === 0;
    newURI = objectUri.substr("kiicloud://".length);
    components = newURI.split("/");
    compLength = components.length;
    if (compLength >= 4 && valid) {
      bucketIndex = compLength === 4 ? 1 : 3;
      bucketName = components[bucketIndex];
      subject = null;
      if (components[0] === "groups" && compLength === 6) {
        subject = new root.KiiGroupWithToken._groupWithID(components[1], this._token);
      } else if (components[0] === "users" && compLength === 6) {
        subject = root.KiiUserWithToken._userWithID(components[1], this._token);
      } else if (components[0] === "things" && compLength === 6) {
        subject = root.KiiThingWithToken.thingWithID(components[1], this._token);
      } else if (compLength !== 4) {
        throw new root.InvalidURIException;
      }
      bucket = new root.KiiBucketWithToken(bucketName, subject, this._token);
      obj = bucket.createObject();
      obj._setUUID(components[compLength - 1]);
    } else {
      throw new root.InvalidURIException;
    }
    return obj;
  };

  KiiAppAdminContext.prototype._getId = function() {
    return this._id;
  };


  /**
      Get access token published for app admin.
      @return {String} access token published for app admin.
   */

  KiiAppAdminContext.prototype.getAccessToken = function() {
    return this._getToken();
  };

  KiiAppAdminContext.prototype._getToken = function() {
    return this._token;
  };


  /**
      Creates a reference to a group operated by app admin using group's ID.
      <br><br>
      <b>Note:</b>
      Returned instance from this API can operate existing KiiGroup.<br>
      If you want to create a new KiiGroup, please use {@link KiiAppAdminContext#groupWithName}.
  
      @param String group ID.
      @returns {KiiGroup} A working KiiGroup object
      @throws {InvalidArgumentException} Thrown if passed groupID is null or empty.
      @example
      Kii.authenticateAsAppAdmin("client-id", "client-secret", {
          success: function(adminContext) {
              var groupID = "0123456789abcdefghijklmno";
              var group = adminContext.groupWithID(groupID);
              // KiiGroup operation by app admin is available now.
          },
          failure: function(errorString, errorCode) {
              // auth failed.
          }
      });
   */

  KiiAppAdminContext.prototype.groupWithID = function(groupID) {
    var group;
    if ((groupID == null) || groupID === "") {
      throw new root.InvalidArgumentException('groupID should not null or empty');
    }
    group = root.KiiGroupWithToken._groupWithID(groupID, this._token);
    return group;
  };


  /** Register new group own by specified user on Kii Cloud with specified ID.
  This method can be used only by app admin.
  
  <br><br>If the group that has specified id already exists, registration will be failed.
  
  @param {String} groupID ID of the KiiGroup
  @param {String} groupName Name of the KiiGroup
  @param {String} user id of owner
  @param {Array} members An array of KiiUser objects to add to the group
  @return {Promise} return promise object.
        <ul>
          <li>fulfill callback function: function(theSavedGroup). theSavedGroup is KiiGroup instance.</li>
          <li>reject callback function: function(error). error is an Error instance.
            <ul>
              <li>error.target is the KiiGroup instance which this method was called on.</li>
              <li>error.message</li>
              <li>error.addMembersArray is array of KiiUser to be added as memebers of this group.</li>
              <li>error.removeMembersArray is array of KiiUser to be removed from the memebers list of this group.</li>
            </ul>
          </li>
        </ul>
  @example
  // example to use callbacks directly
  Kii.authenticateAsAppAdmin("client-id", "client-secret", {
      success: function(adminContext) {
          var members = [];
          members.push(KiiUser.userWithID("Member User Id"));
          adminContext.registerGroupWithOwnerAndID("Group ID", "Group Name", "Owner User ID", members, {
              success: function(theSavedGroup) {
                  // do something with the saved group
              },
              failure: function(theGroup, anErrorString, addMembersArray, removeMembersArray) {
                  // do something with the error response
              }
          });
      },
      failure: function(errorString, errorCode) {
          // auth failed.
      }
  });
  // example to use Promise
  Kii.authenticateAsAppAdmin("client-id", "client-secret").then(
      function(adminContext) {
          var members = [];
          members.push(KiiUser.userWithID("Member User Id"));
          return adminContext.registerGroupWithOwnerAndID("Group ID", "Group Name", "Owner User ID", members);
      }
  ).then(
      function(group) {
          // do something with the saved group
      }
  );
   */

  KiiAppAdminContext.prototype.registerGroupWithOwnerAndID = function(groupID, groupName, owner, members, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var registerGroupWithIDCallbacks;
        registerGroupWithIDCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments[0]);
          },
          failure: function() {
            var error;
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            error = KiiUtilities._Error(arguments[1], arguments[0]);
            error.addMembersArray = arguments[2];
            error.removeMembersArray = arguments[3];
            return reject(error);
          }
        };
        return root.KiiGroup._registerGroupWithIDUsingCallbacks(_this._token, groupID, groupName, owner, members, registerGroupWithIDCallbacks);
      };
    })(this));
  };


  /**
      Creates a reference to a group operated by app admin using group's URI.
      <br><br>
      <b>Note:</b>
      Returned instance from this API can operate existing KiiGroup.<br>
      If you want to create a new KiiGroup, please use {@link KiiAppAdminContext#groupWithName}.
  
      @param String group URI.
      @returns {KiiGroup} A working KiiGroup object
      @throws {InvalidURIException} Thrown if the URI is null, empty or does not have correct format.
      @example
      Kii.authenticateAsAppAdmin("client-id", "client-secret", {
          success: function(adminContext) {
              var groupUri = ...; // KiiGroup's URI
              var group = adminContext.groupWithURI(groupUri);
              // KiiGroup operation by app admin is available now.
          },
          failure: function(errorString, errorCode) {
              // auth failed.
          }
      });
   */

  KiiAppAdminContext.prototype.groupWithURI = function(groupUri) {
    var components, group, newURI;
    if (groupUri == null) {
      throw new root.InvalidURIException;
    }
    if ((groupUri.indexOf("kiicloud://")) !== 0) {
      throw new root.InvalidURIException;
    }
    newURI = groupUri.substr("kiicloud://".length);
    components = newURI.split("/");
    if (components.length !== 2 || components[0] !== "groups") {
      throw new root.InvalidURIException;
    }
    group = root.KiiGroupWithToken._groupWithID(components[1], this._token);
    return group;
  };


  /**
  Find registered KiiUser with the email.<br>
  If there are no user registers with the specified email or if there are but not verified email yet,
  callbacks.failure or reject callback of promise will be called.<br>
  If the email is null or empty, callbacks.failure or reject callback of promise will be callded.
  <br><br>
  <b>Note:</b>
  <ul>
  <li>If "Expose Full User Data To Others" is enabled in the application console, the response will contain full of the user data.</li>
  <li>Otherwise, the response will only contain "userID", "loginName" and "displayName" field values if exist.</li>
  </ul>
  
  @param {String} email The email to find KiiUser who owns it.<br>
  Don't add prefix of "EMAIL:" described in REST API documentation. SDK will take care of it.
  @param {Object} [callbacks] An object with callback methods defined.
  This argument is mandatory and can't be omitted.
  @param {Method} callbacks.success The callback method to call on a successful finding request.
  @param {Method} callbacks.failure The callback method to call on a failed finding request.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a KiiAppAdminContext instance which this method was called on.</li>
          <li>params[1] is a found KiiUser instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiAppAdminContext instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  Kii.authenticateAsAppAdmin("client-id", "client-secret", {
      success: function(adminContext) {
          adminContext.findUserByEmail("user_to_find@example.com", {
              success: function(adminContext, theMatchedUser) {
                  // Do something with the found user
              },
              failure: function(adminContext, anErrorString) {
                  // Do something with the error response
              }
          });
      },
      failure: function(errorString, errorCode) {
          // Auth failed.
      }
  });
  
  // example to use Promise
  Kii.authenticateAsAppAdmin("client-id", "client-secret").then(
      function(adminContext) {
          adminContext.findUserByEmail("user_to_find@example.com").then(
              function(params) { // fullfill callback function
                  var adminContext = params[0];
                  var theMatchedUser = params[1];
                  // Do something with the found user
              },
              function(error) { // reject callback function
                  var adminContext = error.target;
                  var anErrorString = error.message;
                  // Do something with the error response
              }
          );
      },
      function(error) {
        // Auth failed.
      }
  );
   */

  KiiAppAdminContext.prototype.findUserByEmail = function(email, callbacks) {
    return root.KiiUser._findUserByEmail(email, callbacks, this);
  };


  /**
  Find registered KiiUser with the phone.<br>
  If there are no user registers with the specified phone or if there are but not verified phone yet,
  callbacks.failure or reject callback of promise will be called.<br>
  If the phone is null or empty, callbacks.failure or reject callback of promise will be called.
  <br><br>
  <b>Note:</b>
  <ul>
  <li>If "Expose Full User Data To Others" is enabled in the application console, the response will contain full of the user data.</li>
  <li>Otherwise, the response will only contain "userID", "loginName" and "displayName" field values if exist.</li>
  </ul>
  
  @param {String} phone The phone number to find KiiUser who owns it.<br>
  Don't add prefix of "PHONE:" described in REST API documentation. SDK will take care of it.
  @param {Object} [callbacks] An object with callback methods defined.
  This argument is mandatory and can't be omitted.
  @param {Method} callbacks.success The callback method to call on a successful finding request.
  @param {Method} callbacks.failure The callback method to call on a failed finding request.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a KiiAppAdminContext instance which this method was called on.</li>
          <li>params[1] is a found KiiUser instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiAppAdminContext instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  Kii.authenticateAsAppAdmin("client-id", "client-secret", {
      success: function(adminContext) {
          adminContext.findUserByPhone("phone_number_to_find", {
              success: function(adminContext, theMatchedUser) {
                  // Do something with the found user
              },
              failure: function(adminContext, anErrorString) {
                  // Do something with the error response
              }
          });
      },
      failure: function(errorString, errorCode) {
          // Auth failed.
      }
  });
  
  // example to use Promise
  Kii.authenticateAsAppAdmin("client-id", "client-secret").then(
      function(adminContext) {
          adminContext.findUserByPhone("phone_number_to_find").then(
              function(params) { // fullfill callback function
                  var adminContext = params[0];
                  var theMatchedUser = params[1];
                  // Do something with the found user
              },
              function(error) { // reject callback function
                  var adminContext = error.target;
                  var anErrorString = error.message;
                  // Do something with the error response
              }
          );
      },
      function(error) {
        // Auth failed.
      }
  );
   */

  KiiAppAdminContext.prototype.findUserByPhone = function(phone, callbacks) {
    return root.KiiUser._findUserByPhone(phone, callbacks, this);
  };


  /**
  Find registered KiiUser with the user name.<br>
  If there are no user registers with the specified user name, callbacks.failure or reject callback of promise will be called.<br>
  If the user name is null or empty, callbacks.failure or reject callback of promise will be called.
  <br><br>
  <b>Note:</b>
  <ul>
  <li>If "Expose Full User Data To Others" is enabled in the application console, the response will contain full of the user data.</li>
  <li>Otherwise, the response will only contain "userID", "loginName" and "displayName" field values if exist.</li>
  </ul>
  
  @param {String} username The user name to find KiiUser who owns it.<br>
  Don't add prefix of "LOGIN_NAME:" described in REST API documentation. SDK will take care of it.
  @param {Object} [callbacks] An object with callback methods defined.
  This argument is mandatory and can't be omitted.
  @param {Method} callbacks.success The callback method to call on a successful finding request.
  @param {Method} callbacks.failure The callback method to call on a failed finding request.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is a KiiAppAdminContext instance which this method was called on.</li>
          <li>params[1] is a found KiiUser instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiAppAdminContext instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  Kii.authenticateAsAppAdmin("client-id", "client-secret", {
      success: function(adminContext) {
          adminContext.findUserByUsername("user_name_to_find", {
              success: function(adminContext, theMatchedUser) {
                  // Do something with the found user
              },
              failure: function(adminContext, anErrorString) {
                  // Do something with the error response
              }
          });
      },
      failure: function(errorString, errorCode) {
          // Auth failed.
      }
  });
  // example to use Promise
  Kii.authenticateAsAppAdmin("client-id", "client-secret").then(
      function(adminContext) {
          adminContext.findUserByUsername("user_name_to_find").then(
              function(params) { // fullfill callback function
                  var adminContext = params[0];
                  var theMatchedUser = params[1];
                  // Do something with the found user
              },
              function(error) { // reject callback function
                  var adminContext = error.target;
                  var anErrorString = error.message;
                  // Do something with the error response
              }
          );
      },
      function(error) {
        // Auth failed.
      }
  );
   */

  KiiAppAdminContext.prototype.findUserByUsername = function(username, callbacks) {
    return root.KiiUser._findUserByUsername(username, callbacks, this);
  };


  /**
  Register thing by app admin.
  Method interface is same as {@link KiiThing#register()}.
  Please refer to KiiThing document for details.
  @param {Object} fields of the thing to be registered. Please refer to {@link KiiThing#register()} for the details of fields.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  @param {Function} callbacks.failure callback called when operation failed.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is KiiThing instance with adminToken.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // Assume you already have adminContext instance.
  adminContext.registerThing(
      {
          _vendorThingID: "thing-XXXX-YYYY-ZZZZZ",
          _password: "thing-password",
          _thingType: "thermometer",
          yourCustomObj: // Arbitrary key can be used.
          { // Object, Array, Number, String can be used. Should be compatible with JSON.
              yourCustomKey1: "value",
              yourCustomKey2: 100
          }
      },
      {
          success: function(thing) {
              // Register Thing succeeded.
              // Operation using thing instance in the parameter
              // is authored by app admin.
          },
          failure: function(error) {
              // Handle error.
          }
      }
  );
  
  // example to use Promise
  // Assume you already have adminContext instance.
  adminContext.registerThing(
      {
          _vendorThingID: "thing-XXXX-YYYY-ZZZZZ",
          _password: "thing-password",
          _thingType: "thermometer",
          yourCustomObj: // Arbitrary key can be used.
          { // Object, Array, Number, String can be used. Should be compatible with JSON.
              yourCustomKey1: "value",
              yourCustomKey2: 100
          }
      }
  ).then(
      function(thing) {
          // Register Thing succeeded.
          // Operation using thing instance in the parameter
          // is authored by app admin.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiAppAdminContext.prototype.registerThing = function(fields, callbacks) {
    return root.KiiThingWithToken.register(fields, callbacks, this._token);
  };


  /**
      Creates a reference to a thing operated by app admin.
      @param String thing id.
      @returns {KiiThing} A working KiiThing object
      @example
      // Assume you already have adminContext instance.
      adminContext.thingWithID(thingID);
   */

  KiiAppAdminContext.prototype.thingWithID = function(thingID) {
    return root.KiiThingWithToken.thingWithID(thingID, this._token);
  };


  /**
  Register user/group as owner of specified thing by app admin.
  
  @param {String} thingID The ID of thing
  @param {KiiUser or KiiGroup} owner instnce of KiiUser/KiiGroup to be registered as owner.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: user/group object registered as owner.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is a KiiUser/KiiGroup instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  // example to use Promise
  // Assume you already have adminContext instance.
  adminContext.registerOwnerWithThingID("th.xxxx-yyyy-zzzz", group, {
      success: function(group) {
          // Register owner succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  // example to use Promise
  // Assume you already have adminContext instance.
  adminContext.registerOwnerWithThingID("th.xxxx-yyyy-zzzz", group).then(
      function(params) {
          // Register owner succeeded.
          var group = params[0];
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiAppAdminContext.prototype.registerOwnerWithThingID = function(thingID, owner, callbacks) {
    return root.KiiThingWithToken.registerOwnerWithThingID(thingID, owner, callbacks, this._token);
  };


  /**
  Register user/group as owner of specified thing by app admin.
  
  @param {String} vendorThingID The vendor thing ID of thing
  @param {KiiUser or KiiGroup} owner instance of KiiUser/KiiGroupd to be registered as owner.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: user/group object registered as owner.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is a KiiUser/KiiGroup instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  // example to use Promise
  // Assume you already have adminContext instance.
  adminContext.registerOwnerWithVendorThingID("xxxx-yyyy-zzzz", group, {
      success: function(group) {
          // Register owner succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  // example to use Promise
  // Assume you already have adminContext instance.
  adminContext.registerOwnerWithVendorThingID("xxxx-yyyy-zzzz", group).then(
      function(group) {
          // Register owner succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiAppAdminContext.prototype.registerOwnerWithVendorThingID = function(vendorThingID, owner, callbacks) {
    return root.KiiThingWithToken.registerOwnerWithVendorThingID(vendorThingID, owner, callbacks, this._token);
  };


  /**
  Creates a reference to a thing operated by app admin.
  @param String thing id.
  @returns {KiiThing} A working KiiThing object
  @example
  Kii.authenticateAsAppAdmin("client-id", "client-secret", {
      success: function(adminContext) {
         var thing = adminContext.thingWithID("th.xxxx-yyyy");
          // KiiThing operation by app admin is available now.
      },
      failure: function(errorString, errorCode) {
          // auth failed.
      }
  });
   */

  KiiAppAdminContext.prototype.thingWithID = function(thingID) {
    return root.KiiThingWithToken.thingWithID(thingID, this._token);
  };


  /**
  Load thing with vendor thing ID by app admin.
  Method interface is same as {@link KiiThing#loadWithVendorThingID()}.
  Please refer to KiiThing document for details.
  @param {String} vendorThingID registered vendor thing id.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  @param {Function} callbacks.failure callback called when operation failed.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is KiiThing instance with adminToken.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // Assume you already have adminContext instance.
  adminContext.loadThingWithVendorThingID("thing-xxxx-yyyy",{
      success: function(thing) {
          // Load succeeded.
          // Operation using thing instance in the parameter
          // is authored by app admin.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // Assume you already have adminContext instance.
  adminContext.loadThingWithVendorThingID("thing-xxxx-yyyy").then(
      function(thing) {
          // Load succeeded.
          // Operation using thing instance in the parameter
          // is authored by app admin.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiAppAdminContext.prototype.loadThingWithVendorThingID = function(vendorThingID, callbacks) {
    return root.KiiThingWithToken.loadWithVendorThingID(vendorThingID, callbacks, this._token);
  };


  /**
  Load thing with thing ID by app admin.
  Method interface is same as {@link KiiThing#loadWithThingID()}.
  Please refer to KiiThing document for details.
  @param {String} thingID registered thing id.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  @param {Function} callbacks.failure callback called when operation failed.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is KiiThing instance with adminToken.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // Assume you already have adminContext instance.
  adminContext.loadThingWithThingID("thing-xxxx-yyyy",{
      success: function(thing) {
          // Load succeeded.
          // Operation using thing instance in the parameter
          // is authored by app admin.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // Assume you already have adminContext instance.
  adminContext.loadThingWithThingID("thing-xxxx-yyyy").then(
      function(thing) {
          // Load succeeded.
          // Operation using thing instance in the parameter
          // is authored by app admin.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiAppAdminContext.prototype.loadThingWithThingID = function(thingID, callbacks) {
    return root.KiiThingWithToken.loadWithThingID(thingID, callbacks, this._token);
  };


  /**
  Creates a reference to a topic operated by app admin
  @param {String} topicName name of the topic. Must be a not empty string.
  @return {KiiTopic} topic instance.
   */

  KiiAppAdminContext.prototype.topicWithName = function(topicName) {
    if (typeof topicName !== "string" || topicName === "") {
      throw new root.InvalidArgumentException('topicName should not null or empty');
    }
    return new root.KiiTopicWithToken("" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()), topicName, this._token);
  };


  /** Gets a list of topics in app scope
  @param {Object} callbacks An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful list request
  @param {Method} callbacks.failure The callback method to call on a failed list request
  @param {String} paginationKey You can specify the pagination key with the nextPaginationKey passed by callbacks.success. If empty string or no string object is provided, this API regards no paginationKey specified.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(params). params is Array instance.
          <ul>
            <li>params[0] is array of KiiTopic instances.</li>
            <li>params[1] is string of nextPaginationKey.</li>
          </ul>
        </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.target is a KiiAppAdminContext instance which this method was called on.</li>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  // Assume you already have adminContext instance.
  adminContext.listTopics({
      success: function(topicList, nextPaginationKey) {
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              Kii.listTopics({
                  success: function(topicList, nextPaginationKey) {...},
                  failure: function(anErrorString) {...}
              }, nextPaginationKey);
          }
      },
      failure: function(anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  // Assume you already have adminContext instance.
  adminContext.listTopics().then(
      function(params) {
          var topicList = params[0];
          var nextPaginationKey = params[1];
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              adminContext.listTopics(null, nextPaginationKey).then(
                  function(params) {...},
                  function(error) {...}
              );
          }
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiAppAdminContext.prototype.listTopics = function(callbacks, paginationKey) {
    return root.Kii._listTopics(callbacks, paginationKey, this);
  };

  return KiiAppAdminContext;

})();

root.KiiACLWithToken = (function(_super) {
  __extends(KiiACLWithToken, _super);

  function KiiACLWithToken(parent, authToken) {
    this._userWithID = __bind(this._userWithID, this);
    this._groupWithID = __bind(this._groupWithID, this);
    this._getRequest = __bind(this._getRequest, this);
    KiiACLWithToken.__super__.constructor.call(this);
    this._setParent(parent);
    this._authToken = authToken;
  }

  KiiACLWithToken.prototype._getRequest = function(spec) {
    var request;
    request = KiiACLWithToken.__super__._getRequest.call(this, spec);
    request.setAdminToken(this._authToken);
    return request;
  };

  KiiACLWithToken.prototype._groupWithID = function(id) {
    var group;
    group = root.KiiGroupWithToken._groupWithID(id, this._authToken);
    return group;
  };

  KiiACLWithToken.prototype._userWithID = function(id) {
    var user;
    user = root.KiiUserWithToken._userWithID(id, this._authToken);
    return user;
  };

  return KiiACLWithToken;

})(root.KiiACL);

root.KiiGroupWithToken = (function(_super) {
  __extends(KiiGroupWithToken, _super);

  function KiiGroupWithToken(authToken) {
    this.topicWithName = __bind(this.topicWithName, this);
    this._setAuthToken = __bind(this._setAuthToken, this);
    this._setOwnerFromContext = __bind(this._setOwnerFromContext, this);
    this._userWithID = __bind(this._userWithID, this);
    this.bucketWithName = __bind(this.bucketWithName, this);
    this._getRequest = __bind(this._getRequest, this);
    KiiGroupWithToken.__super__.constructor.call(this);
    this._authToken = authToken;
  }

  KiiGroupWithToken.prototype._getRequest = function(spec) {
    var request;
    request = KiiGroupWithToken.__super__._getRequest.call(this, spec);
    request.setAdminToken(this._authToken);
    return request;
  };

  KiiGroupWithToken._groupWithName = function(groupName, authToken) {
    return root.KiiGroupWithToken._groupWithNameAndMembers(groupName, null, authToken);
  };

  KiiGroupWithToken._groupWithNameAndMembers = function(groupName, members, authToken) {
    var group;
    group = new root.KiiGroupWithToken(authToken);
    group._setName(groupName);
    group._setAddMembers(members);
    return group;
  };

  KiiGroupWithToken._groupWithID = function(id, authToken) {
    var group;
    group = new root.KiiGroupWithToken(authToken);
    group._setUUID(id);
    return group;
  };

  KiiGroupWithToken.prototype.bucketWithName = function(name) {
    var bucket;
    bucket = new root.KiiBucketWithToken(name, this, this._authToken);
    return bucket;
  };

  KiiGroupWithToken.prototype.encryptedBucketWithName = function(name) {
    var bucket;
    bucket = new root.KiiEncryptedBucketWithToken(name, this, this._authToken);
    return bucket;
  };

  KiiGroupWithToken.prototype._userWithID = function(id) {
    var user;
    user = root.KiiUserWithToken._userWithID(id, this._authToken);
    return user;
  };

  KiiGroupWithToken.prototype._setOwnerFromContext = function(data) {};

  KiiGroupWithToken._groupWithJSON = function(json, authToken) {
    var group;
    group = new root.KiiGroupWithToken(authToken);
    if (json.groupID != null) {
      group._setUUID(json.groupID);
    }
    if (json.name != null) {
      group._setName(json.name);
    }
    if (json.owner != null) {
      group._setOwner(root.KiiUserWithToken._userWithID(json.owner, authToken));
    }
    return group;
  };

  KiiGroupWithToken.prototype._setAuthToken = function(wrapper) {
    return wrapper.setAuthToken(this._authToken);
  };

  KiiGroupWithToken.prototype.topicWithName = function(topicName) {
    var id, puri;
    if (typeof topicName !== "string" || topicName === "") {
      throw new root.InvalidArgumentException('topicName should not null or empty');
    }
    id = this.getID();
    if (!id) {
      throw 'can not instantiate topic from instance which doesn\'t have ID';
    }
    puri = this._getHttpURI();
    return new root.KiiTopicWithToken(puri, topicName, this._authToken);
  };

  return KiiGroupWithToken;

})(root.KiiGroup);

root.KiiObjectWithToken = (function(_super) {
  __extends(KiiObjectWithToken, _super);

  function KiiObjectWithToken(token) {
    this._userWithID = __bind(this._userWithID, this);
    this.objectACL = __bind(this.objectACL, this);
    this._getToken = __bind(this._getToken, this);
    this._getRequest = __bind(this._getRequest, this);
    KiiObjectWithToken.__super__.constructor.call(this);
    this._authToken = token;
  }

  KiiObjectWithToken.prototype._getRequest = function(spec) {
    var request;
    root.Kii.logger("admin req: " + this._authToken);
    request = KiiObjectWithToken.__super__._getRequest.call(this, spec);
    request.setAdminToken(this._authToken);
    return request;
  };

  KiiObjectWithToken.prototype._getToken = function() {
    if (this._authToken) {
      return this._authToken;
    } else {
      return null;
    }
  };

  KiiObjectWithToken.objectWithBucket = function(bucket, type, authToken) {
    var obj;
    root.Kii.logger("Creating object w type: " + type);
    obj = new root.KiiObjectWithToken(authToken);
    obj._setBucket(bucket);
    obj._setObjectType(type);
    root.Kii.logger(obj);
    return obj;
  };

  KiiObjectWithToken.objectWithID = function(bucket, id, authToken) {
    var obj;
    root.Kii.logger("Creating object w id: " + id);
    obj = new root.KiiObjectWithToken(authToken);
    obj._setBucket(bucket);
    obj._setUUID(id);
    root.Kii.logger(obj);
    return obj;
  };

  KiiObjectWithToken.prototype.objectACL = function() {
    var acl;
    acl = new root.KiiACLWithToken(this, this._authToken);
    return acl;
  };

  KiiObjectWithToken.prototype._userWithID = function(id) {
    var user;
    user = root.KiiUserWithToken._userWithID(id, this._authToken);
    return user;
  };

  return KiiObjectWithToken;

})(root.KiiObject);

root.KiiUserWithToken = (function(_super) {
  __extends(KiiUserWithToken, _super);

  function KiiUserWithToken(authToken) {
    this.pushInstallation = __bind(this.pushInstallation, this);
    this.topicWithName = __bind(this.topicWithName, this);
    this.pushSubscription = __bind(this.pushSubscription, this);
    this._groupWithJSON = __bind(this._groupWithJSON, this);
    this.bucketWithName = __bind(this.bucketWithName, this);
    this._setAuthHeader = __bind(this._setAuthHeader, this);
    this._setAuthToken = __bind(this._setAuthToken, this);
    this._getRequest = __bind(this._getRequest, this);
    KiiUserWithToken.__super__.constructor.call(this);
    this._authToken = authToken;
  }

  KiiUserWithToken._userWithID = function(id, authToken) {
    var user;
    user = new root.KiiUserWithToken(authToken);
    user._setUUID(id);
    return user;
  };

  KiiUserWithToken.prototype._getRequest = function(spec) {
    var request;
    request = KiiUserWithToken.__super__._getRequest.call(this, spec);
    request.setAdminToken(this._authToken);
    return request;
  };

  KiiUserWithToken.prototype._setAuthToken = function(wrapper) {
    return wrapper.setAuthToken(this._authToken);
  };

  KiiUserWithToken.prototype._setAuthHeader = function(xhr) {
    return xhr.setRequestHeader("Authorization", "Bearer " + this._authToken);
  };

  KiiUserWithToken.prototype.bucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiBucketWithToken(bucketName, this, this._authToken);
    return bucket;
  };

  KiiUserWithToken.prototype.encryptedBucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiEncryptedBucketWithToken(bucketName, this, this._authToken);
    return bucket;
  };

  KiiUserWithToken.prototype._groupWithJSON = function(json) {
    var group;
    group = new root.KiiGroupWithToken._groupWithJSON(json, this._authToken);
    return group;
  };

  KiiUserWithToken.prototype.pushSubscription = function() {
    return new root.KiiPushSubscriptionWithToken(this, this._authToken);
  };

  KiiUserWithToken.prototype.topicWithName = function(topicName) {
    var id;
    if (typeof topicName !== "string" || topicName === "") {
      throw new root.InvalidArgumentException('topicName should not null or empty');
    }
    id = this.getID();
    if (!id) {
      throw 'can not instantiate topic from instance which doesn\'t have ID';
    }
    return new root.KiiTopicWithToken(this._getHttpURI(), topicName, this._authToken);
  };

  KiiUserWithToken.prototype.pushInstallation = function() {
    throw new root.UnsupportedOperationException('Push installation is not supported by admin context');
  };

  return KiiUserWithToken;

})(root.KiiUser);


/**
	@class Represent an anonymous user for setting the ACL of an object. This will include anyone using the application but have not signed up or authenticated as registered user.

	When retrieving ACL from an object, test for this class to determine the subject type.
    @example
    var entry = ... // Retrieved ACL entry
    if(entry.getSubject() instanceof KiiAnonymousUser) {
        // the ACL is set for anonymous users
    }

    @exports root.KiiAnonymousUser as KiiAnonymousUser
 */

root.KiiAnonymousUser = (function() {
  function KiiAnonymousUser() {
    this.getID = __bind(this.getID, this);
  }


  /** 
    Returns the ID of Anonymous user.
   */

  KiiAnonymousUser.prototype.getID = function() {
    return 'ANONYMOUS_USER';
  };

  return KiiAnonymousUser;

})();


/**
	@class Represent any authenticated user for setting the ACL of an object. This will include anyone using the application who has registered and authenticated in the current session.

	When retrieving ACL from an object, test for this class to determine the subject type. Example:

    @example
    var entry = ... // Retrieved ACL entry
    if(entry.getSubject() instanceof KiiAnyAuthenticatedUser) {
        // the ACL is set for authenticated users
    }

    @exports root.KiiAnyAuthenticatedUser as KiiAnyAuthenticatedUser
 */

root.KiiAnyAuthenticatedUser = (function() {
  function KiiAnyAuthenticatedUser() {
    this.getID = __bind(this.getID, this);
  }


  /** 
    Returns the ID of AuthenticatedUser user.
   */

  KiiAnyAuthenticatedUser.prototype.getID = function() {
    return 'ANY_AUTHENTICATED_USER';
  };

  return KiiAnyAuthenticatedUser;

})();

root.KiiSDKClientInfo = (function() {
  function KiiSDKClientInfo() {}

  KiiSDKClientInfo.getSDKClientInfo = function() {
    if (KiiSDKClientInfo._clientInfo == null) {
      KiiSDKClientInfo._clientInfo = "sn=jss;sv=" + root.Kii.getSDKVersion();
    }
    return KiiSDKClientInfo._clientInfo;
  };

  return KiiSDKClientInfo;

})();

root.KiiSCNTwitter = (function(_super) {
  __extends(KiiSCNTwitter, _super);

  function KiiSCNTwitter() {
    this._unlinkFromCurrentUser = __bind(this._unlinkFromCurrentUser, this);
    this._linkWithCurrentUser = __bind(this._linkWithCurrentUser, this);
    this._logOut = __bind(this._logOut, this);
    this._logIn = __bind(this._logIn, this);
    this._getAccessToken = __bind(this._getAccessToken, this);
    this._createTokenObject = __bind(this._createTokenObject, this);
    this._setup = __bind(this._setup, this);
    KiiSCNTwitter.__super__.constructor.call(this, root.KiiSocialNetworkName.TWITTER);
  }

  KiiSCNTwitter.prototype._setup = function(_key, _secret, _extras) {
    this._key = _key;
    this._secret = _secret;
    this._extras = _extras;
    return KiiSCNTwitter.__super__._setup.call(this, this._key, this._secret, this._extras);
  };

  KiiSCNTwitter.prototype._createTokenObject = function(options, data) {
    var tokenObject;
    tokenObject = {
      "oauth_token": options.oauth_token,
      "oauth_token_secret": options.oauth_token_secret
    };
    if ((data != null) && (data.new_user_created != null)) {
      tokenObject["kii_new_user"] = data.new_user_created;
    }
    return tokenObject;
  };

  KiiSCNTwitter.prototype._getAccessToken = function(options) {
    return options.oauth_token;
  };

  KiiSCNTwitter.prototype._logIn = function(options, callbacks) {
    var requestData;
    root.Kii.logger("Checking options");
    root.Kii.logger(options);
    if ((options == null) || (!options.oauth_token && !options.oauth_token_secret)) {
      throw root.InvalidArgumentException('Both options.oauth_token and options.oauth_token_secret are required');
    } else if (!options.oauth_token) {
      throw root.InvalidArgumentException('options.oauth_token is required');
    } else if (!options.oauth_token_secret) {
      throw root.InvalidArgumentException('options.oauth_token_secret is required');
    }
    if (root.KiiUser.getCurrentUser() != null) {
      root.KiiUser.logOut();
    }
    requestData = {
      accessToken: options.oauth_token,
      accessTokenSecret: options.oauth_token_secret
    };
    return this._register("twitter", "application/vnd.kii.AuthTokenTwitterRequest+json", requestData, options, callbacks);
  };

  KiiSCNTwitter.prototype._logOut = function() {
    KiiSCNTwitter.__super__._logOut.apply(this, arguments);
    return root.Kii.logger("Log out twitter");
  };

  KiiSCNTwitter.prototype._linkWithCurrentUser = function(options, callbacks) {
    var requestData;
    if (root.KiiUser.getCurrentUser() == null) {
      callbacks.failure(null, this._network, "No user logged in");
      return;
    }
    if ((options == null) || (!options.oauth_token && !options.oauth_token_secret)) {
      throw root.InvalidArgumentException('Both options.oauth_token and options.oauth_token_secret are required');
    } else if (!options.oauth_token) {
      throw root.InvalidArgumentException('options.oauth_token is required');
    } else if (!options.oauth_token_secret) {
      throw root.InvalidArgumentException('options.oauth_token_secret is required');
    }
    requestData = {
      accessToken: options.oauth_token,
      accessTokenSecret: options.oauth_token_secret
    };
    return this._link("twitter", "application/vnd.kii.LinkTwitterRequest+json", requestData, options, callbacks);
  };

  KiiSCNTwitter.prototype._unlinkFromCurrentUser = function(callbacks) {
    if (root.KiiUser.getCurrentUser() == null) {
      callbacks.failure(null, this._network, "No user logged in");
      return;
    }
    return this._unlink("twitter", callbacks);
  };

  return KiiSCNTwitter;

})(root.KiiSocialConnectNetwork);


/**
    @class Represents Geo Point.
    @exports root.KiiGeoPoint as KiiGeoPoint
 */

root.KiiGeoPoint = (function() {
  function KiiGeoPoint(_latitude, _longitude) {
    var inRange;
    this._latitude = _latitude;
    this._longitude = _longitude;
    this._toDict = __bind(this._toDict, this);
    this.getLongitude = __bind(this.getLongitude, this);
    this.getLatitude = __bind(this.getLatitude, this);
    inRange = function(min, max, num) {
      return (num > min) && (num < max) && (!isNaN(num));
    };
    if (!inRange(-90, 90, this._latitude) || !inRange(-180, 180, this._longitude)) {
      throw root.InvalidArgumentException("Specified latitide or longitude is invalid");
    }
  }


  /**
      Return the latitide of this point.
   */

  KiiGeoPoint.prototype.getLatitude = function() {
    return this._latitude;
  };


  /**
      Return the longitude of this point.
   */

  KiiGeoPoint.prototype.getLongitude = function() {
    return this._longitude;
  };


  /**
      Create a geo point with the given latitude and longitude.
      @param {Number} latitude Latitude of the point in degrees. Valid if the value is greater than -90 degrees and less than +90 degrees.
      @param {Number} longitude Longitude of the point in degrees. Valid if the value is greater than -180 degrees and less than +180 degrees.
      @throws {String} Specified latitude or longitude is invalid.
      @return {KiiGeoPoint} A new reference of KiiGeoPoint.
      @example
      var point = KiiGeoPoint.geoPoint(35.07, 139.02);
   */

  KiiGeoPoint.geoPoint = function(latitude, longitude) {
    return new root.KiiGeoPoint(latitude, longitude);
  };

  KiiGeoPoint.prototype._toDict = function() {
    var dict;
    dict = {
      _type: 'point',
      lat: this._latitude,
      lon: this._longitude
    };
    return dict;
  };

  return KiiGeoPoint;

})();

KiiJQueryHttpRequest = (function() {
  function KiiJQueryHttpRequest(method, url, callbacks) {
    this.xhr = $.ajaxSettings.xhr();
    url = KiiUtilities._disableCacheURL(url);
    this.xhr.open(method, url, true);
    this.xhr.onreadystatechange = callbacks.onComplete;
  }

  return KiiJQueryHttpRequest;

})();

KiiXMLHttpRequest = (function() {
  function KiiXMLHttpRequest(method, url, callbacks) {
    url = KiiUtilities._disableCacheURL(url);
    this.xhr = new XMLHttpRequest;
    if ("withCredentials" in this.xhr) {
      this.xhr.open(method, url, true);
      this.xhr.onreadystatechange = callbacks.onComplete;
    } else {
      this.xhr = null;
    }
  }

  return KiiXMLHttpRequest;

})();

KiiTitaniumHttpRequest = (function() {
  function KiiTitaniumHttpRequest(method, url, callbacks) {
    this.xhr = Ti.Network.createHTTPClient();
    url = KiiUtilities._disableCacheURL(url);
    this.xhr.open(method, url, true);
    this.xhr.onload = callbacks.onComplete;
    this.xhr.onerror = callbacks.onError;
  }

  return KiiTitaniumHttpRequest;

})();

KiiXHRWrapperFactory = (function() {
  function KiiXHRWrapperFactory() {}

  KiiXHRWrapperFactory.createXHRWrapper = function(method, url) {
    var wrapper;
    wrapper = null;
    if (root.Kii._getHttpRequestType() === null) {
      if (typeof jQuery !== 'undefined') {
        root.Kii.logger("Use jQuery");
        wrapper = new KiiJQXHRWrapper(method, url);
      } else if (typeof XMLHttpRequest !== 'undefined') {
        root.Kii.logger("Use XMLHttpRequest");
        wrapper = new KiiXHRWrapper(method, url);
      } else if (typeof Titanium !== 'undefined') {
        root.Kii.logger("Use Titanium");
        wrapper = new KiiTiXHRWrapper(method, url);
      }
    } else {
      root.Kii.logger("Use http request backdoor");
      if (root.Kii._getHttpRequestType() === root._KiiHttpRequestType.jQuery) {
        root.Kii.logger("Use jQuery");
        wrapper = new KiiJQXHRWrapper(method, url);
      } else if (root.Kii._getHttpRequestType() === root._KiiHttpRequestType.XMLHttpRequest) {
        root.Kii.logger("Use XMLHttpRequest");
        wrapper = new KiiXHRWrapper(method, url);
      } else if (root.Kii._getHttpRequestType() === root._KiiHttpRequestType.Titanium) {
        root.Kii.logger("Use Titanium");
        wrapper = new KiiTiXHRWrapper(method, url);
      }
    }
    return wrapper;
  };

  return KiiXHRWrapperFactory;

})();

KiiXHRWrapper = (function() {
  KiiXHRWrapper.prototype.getAppID = function() {
    return root.Kii.getAppID();
  };

  KiiXHRWrapper.prototype.getAppKey = function() {
    return root.Kii.getAppKey();
  };

  KiiXHRWrapper.prototype.getLogger = function() {
    return root.Kii.logger();
  };

  function KiiXHRWrapper(method, url) {
    this.setAuthToken = __bind(this.setAuthToken, this);
    this.setAdminOrUserToken = __bind(this.setAdminOrUserToken, this);
    this.setCurrentUserToken = __bind(this.setCurrentUserToken, this);
    this.setContentType = __bind(this.setContentType, this);
    this.setKiiHeaders = __bind(this.setKiiHeaders, this);
    this.getErrorCode = __bind(this.getErrorCode, this);
    this.getErrorString = __bind(this.getErrorString, this);
    this.sendData = __bind(this.sendData, this);
    this.send = __bind(this.send, this);
    this._setUpCallbacks = __bind(this._setUpCallbacks, this);
    var hs, k, v;
    url = KiiUtilities._disableCacheURL(url);
    this.xhr = new XMLHttpRequest;
    this.method = method;
    if ("withCredentials" in this.xhr) {
      this.xhr.open(method, url, true);
      hs = root.Kii.getAdditionalHeaders();
      if (hs != null) {
        for (k in hs) {
          v = hs[k];
          this.xhr.setRequestHeader(k, v);
        }
      }
    } else {
      this.xhr = null;
    }
  }

  KiiXHRWrapper.prototype._setUpCallbacks = function(callback) {
    if (callback && callback.progress) {
      if (this.method === "PUT") {
        return this.xhr.upload.addEventListener("progress", callback.progress, false);
      } else {
        return this.xhr.addEventListener("progress", callback.progress, false);
      }
    }
  };

  KiiXHRWrapper.prototype.send = function(sendCallbacks) {
    var requestCallback;
    this._setUpCallbacks(sendCallbacks);
    requestCallback = {
      onComplete: (function(_this) {
        return function() {
          var _ref;
          if (_this.xhr.readyState === 4) {
            if ((200 <= (_ref = _this.xhr.status) && _ref < 400)) {
              _this.getLogger("Completed Request[" + _this.xhr.status + "]");
              if (sendCallbacks != null) {
                return sendCallbacks.success();
              }
            } else {
              _this.getLogger('Error loading data...');
              _this.getLogger('callback : ' + sendCallbacks);
              if (sendCallbacks != null) {
                return sendCallbacks.failure();
              }
            }
          }
        };
      })(this)
    };
    this.xhr.onreadystatechange = requestCallback.onComplete;
    return this.xhr.send();
  };

  KiiXHRWrapper.prototype.sendData = function(data, sendCallbacks) {
    var requestCallback;
    this._setUpCallbacks(sendCallbacks);
    requestCallback = {
      onComplete: (function(_this) {
        return function() {
          var _ref;
          if (_this.xhr.readyState === 4) {
            if ((200 <= (_ref = _this.xhr.status) && _ref < 400)) {
              _this.getLogger("Completed Request[" + _this.xhr.status + "]");
              if (sendCallbacks != null) {
                return sendCallbacks.success();
              }
            } else {
              _this.getLogger('Error loading data...');
              if (sendCallbacks != null) {
                return sendCallbacks.failure();
              }
            }
          }
        };
      })(this)
    };
    this.xhr.onreadystatechange = requestCallback.onComplete;
    return this.xhr.send(data);
  };

  KiiXHRWrapper.prototype.getErrorString = function(actionString) {
    var errString, json;
    errString = "" + actionString + " failed. statusCode: " + this.xhr.status;
    try {
      json = JSON.parse(decodeURIComponent(this.xhr.responseText));
      if (json.errorCode != null) {
        errString += " error code: " + json.errorCode;
      }
      if (json.message != null) {
        errString += " message: " + json.message;
      }
      return errString;
    } catch (_error) {
      return errString;
    }
  };

  KiiXHRWrapper.prototype.getErrorCode = function() {
    var json;
    try {
      json = JSON.parse(decodeURIComponent(this.xhr.responseText));
      return json.errorCode;
    } catch (_error) {
      return null;
    }
  };

  KiiXHRWrapper.prototype.setKiiHeaders = function() {
    this.xhr.setRequestHeader("x-kii-appid", this.getAppID());
    this.xhr.setRequestHeader("x-kii-appkey", this.getAppKey());
    return this.xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
  };

  KiiXHRWrapper.prototype.setContentType = function(contentType) {
    return this.xhr.setRequestHeader("Content-Type", contentType);
  };

  KiiXHRWrapper.prototype.setCurrentUserToken = function() {
    var token, _ref;
    token = (_ref = this.getCurrentUser()) != null ? _ref.getAccessToken() : void 0;
    if (token != null) {
      this.xhr.setRequestHeader("authorization", "bearer " + token);
      return true;
    }
    return false;
  };

  KiiXHRWrapper.prototype.setAdminOrUserToken = function(adminContext) {
    var token, _ref;
    if (adminContext != null) {
      token = adminContext._getToken();
    } else {
      token = (_ref = this.getCurrentUser()) != null ? _ref.getAccessToken() : void 0;
    }
    if (token != null) {
      this.xhr.setRequestHeader("authorization", "bearer " + token);
      return true;
    }
    return false;
  };

  KiiXHRWrapper.prototype.setAuthToken = function(authToken) {
    if (authToken != null) {
      return this.xhr.setRequestHeader("authorization", "bearer " + authToken);
    }
  };

  KiiXHRWrapper.prototype.getCurrentUser = function() {
    return root.KiiUser.getCurrentUser();
  };

  return KiiXHRWrapper;

})();

KiiTiXHRWrapper = (function(_super) {
  __extends(KiiTiXHRWrapper, _super);

  function KiiTiXHRWrapper(method, url) {
    this.sendData = __bind(this.sendData, this);
    this.send = __bind(this.send, this);
    var hs, k, v;
    url = KiiUtilities._disableCacheURL(url);
    this.xhr = Ti.Network.createHTTPClient();
    this.method = method;
    this.xhr.open(method, url, true);
    hs = root.Kii.getAdditionalHeaders();
    if (hs != null) {
      for (k in hs) {
        v = hs[k];
        this.xhr.setRequestHeader(k, v);
      }
    }
  }

  KiiTiXHRWrapper.prototype.send = function(sendCallbacks) {
    var requestCallback;
    this._setUpCallbacks(sendCallbacks);
    requestCallback = {
      onComplete: (function(_this) {
        return function() {
          var _ref;
          if (_this.xhr.readyState === 4) {
            if ((200 <= (_ref = _this.xhr.status) && _ref < 400)) {
              root.Kii.logger("Completed Request[" + _this.xhr.status + "]");
              if (sendCallbacks != null) {
                return sendCallbacks.success();
              }
            } else {
              root.Kii.logger('Error loading data...');
              root.Kii.logger('callback : ' + sendCallbacks);
              if (sendCallbacks != null) {
                return sendCallbacks.failure();
              }
            }
          }
        };
      })(this),
      onError: (function(_this) {
        return function() {
          root.Kii.logger('Error loading data...');
          root.Kii.logger('callback : ' + sendCallbacks);
          if (sendCallbacks != null) {
            return sendCallbacks.failure();
          }
        };
      })(this)
    };
    this.xhr.onload = requestCallback.onComplete;
    this.xhr.onerror = requestCallback.onError;
    return this.xhr.send();
  };

  KiiTiXHRWrapper.prototype.sendData = function(data, sendCallbacks) {
    var requestCallback;
    this._setUpCallbacks(sendCallbacks);
    requestCallback = {
      onComplete: (function(_this) {
        return function() {
          var _ref;
          if (_this.xhr.readyState === 4) {
            if ((200 <= (_ref = _this.xhr.status) && _ref < 400)) {
              root.Kii.logger("Completed Request[" + _this.xhr.status + "]");
              if (sendCallbacks != null) {
                return sendCallbacks.success();
              }
            } else {
              root.Kii.logger('Error loading data...');
              if (sendCallbacks != null) {
                return sendCallbacks.failure();
              }
            }
          }
        };
      })(this),
      onError: (function(_this) {
        return function() {
          root.Kii.logger('Error loading data...');
          root.Kii.logger('callback : ' + sendCallbacks);
          if (sendCallbacks != null) {
            return sendCallbacks.failure();
          }
        };
      })(this)
    };
    this.xhr.onload = requestCallback.onComplete;
    this.xhr.onerror = requestCallback.onError;
    return this.xhr.send(data);
  };

  return KiiTiXHRWrapper;

})(KiiXHRWrapper);

KiiJQXHRWrapper = (function(_super) {
  __extends(KiiJQXHRWrapper, _super);

  function KiiJQXHRWrapper(method, url) {
    var hs, k, v;
    url = KiiUtilities._disableCacheURL(url);
    this.xhr = $.ajaxSettings.xhr();
    this.xhr.open(method, url, true);
    this.method = method;
    hs = root.Kii.getAdditionalHeaders();
    if (hs != null) {
      for (k in hs) {
        v = hs[k];
        this.xhr.setRequestHeader(k, v);
      }
    }
  }

  return KiiJQXHRWrapper;

})(KiiXHRWrapper);

root.KiiSCNQQ = (function(_super) {
  __extends(KiiSCNQQ, _super);

  function KiiSCNQQ() {
    this._unlinkFromCurrentUser = __bind(this._unlinkFromCurrentUser, this);
    this._linkWithCurrentUser = __bind(this._linkWithCurrentUser, this);
    this._logOut = __bind(this._logOut, this);
    this._logIn = __bind(this._logIn, this);
    this._getAccessToken = __bind(this._getAccessToken, this);
    this._createTokenObject = __bind(this._createTokenObject, this);
    this._setup = __bind(this._setup, this);
    KiiSCNQQ.__super__.constructor.call(this, root.KiiSocialNetworkName.QQ);
  }

  KiiSCNQQ.prototype._setup = function(_key, _secret, _extras) {
    this._key = _key;
    this._secret = _secret;
    this._extras = _extras;
    return KiiSCNQQ.__super__._setup.call(this, this._key, this._secret, this._extras);
  };

  KiiSCNQQ.prototype._createTokenObject = function(options, data) {
    var tokenObject;
    tokenObject = {
      "access_token": options.access_token,
      "openID": options.openID
    };
    if ((data != null) && (data.new_user_created != null)) {
      tokenObject["kii_new_user"] = data.new_user_created;
    }
    return tokenObject;
  };

  KiiSCNQQ.prototype._getAccessToken = function(options) {
    return options.access_token;
  };

  KiiSCNQQ.prototype._logIn = function(options, callbacks) {
    var requestData;
    root.Kii.logger("Checking options");
    root.Kii.logger(options);
    if ((options == null) || (!options.access_token && !options.openID)) {
      throw root.InvalidArgumentException('Both options.access_token and options.openID are required');
    } else if (!options.access_token) {
      throw root.InvalidArgumentException('options.access_token is required');
    } else if (!options.openID) {
      throw root.InvalidArgumentException('options.openID is required');
    }
    if (root.KiiUser.getCurrentUser() != null) {
      root.KiiUser.logOut();
    }
    requestData = {
      accessToken: options.access_token,
      openID: options.openID
    };
    return this._register("qq", "application/vnd.kii.AuthTokenQQRequest+json", requestData, options, callbacks);
  };

  KiiSCNQQ.prototype._logOut = function() {
    KiiSCNQQ.__super__._logOut.apply(this, arguments);
    return root.Kii.logger("Log out qq");
  };

  KiiSCNQQ.prototype._linkWithCurrentUser = function(options, callbacks) {
    var requestData;
    if (root.KiiUser.getCurrentUser() == null) {
      callbacks.failure(null, this._network, "No user logged in");
      return;
    }
    if ((options == null) || (!options.access_token && !options.openID)) {
      throw root.InvalidArgumentException('Both options.access_token and options.openID are required');
    } else if (!options.access_token) {
      throw root.InvalidArgumentException('options.access_token is required');
    } else if (!options.openID) {
      throw root.InvalidArgumentException('options.openID is required');
    }
    requestData = {
      accessToken: options.access_token,
      openID: options.openID
    };
    return this._link("qq", "application/vnd.kii.LinkQQRequest+json", requestData, options, callbacks);
  };

  KiiSCNQQ.prototype._unlinkFromCurrentUser = function(callbacks) {
    if (root.KiiUser.getCurrentUser() == null) {
      callbacks.failure(null, this._network, "No user logged in");
      return;
    }
    return this._unlink("qq", callbacks);
  };

  return KiiSCNQQ;

})(root.KiiSocialConnectNetwork);


/**
    @class Represents a server side code entry in KiiCloud.
 */

root.KiiServerCodeEntry = (function() {
  function KiiServerCodeEntry(entryName, version, environmentVersion) {
    this.entryName = entryName;
    this.version = version;
    this.environmentVersion = environmentVersion;
  }


  /**
   Execute this server code entry.<br>
   If argument is an empty object or not type of Object, callbacks.failure or reject callback of promise will be called.<br>
   @param {Object} argument pass to the entry of script in the cloud.
      If null is specified, no argument pass to the script.
   @param {Object} [callbacks] called on completion of execution.
   @param {Function} callbacks.success callback called when operation succeeded.
   <br>1st argument: the KiiServerCodeEntry instance which this method was called on
   <br>2nd argument: the passed argument object
   <br>3rd argument: a KiiServerCodeExecResult instance
   @param {Function} callbacks.failure callback called when operation failed.
   <br>1st argument: the KiiServerCodeEntry instance which this method was called on
   <br>2nd argument: the passed argument object
   <br>3rd argument: executed result, which is null
   <br>4th argument: error string
   @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is Array instance.
        <ul>
          <li>params[0] is the KiiServerCodeEntry instance which this method was called on.</li>
          <li>params[1] is the passed argument object.</li>
          <li>params[2] is a KiiServerCodeExecResult instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiServerCodeEntry instance which this method was called on.</li>
          <li>error.message</li>
          <li>error.argument is passed argument object. </li>
        </ul>
      </li>
    </ul>
   @example
  // example to use callbacks directly
  // Instantiate with the endpoint.
  var entry = Kii.serverCodeEntry("main");
  
  // Set the custom parameters.
  var arg = {"username":"name_of_my_friend", "password":"password_for_my_friend"};
  
  // Example of executing the Server Code
  entry.execute(arg, {
  
     success: function(entry, argument, execResult) {
         // do something now that the user is logged in
     },
  
     failure: function(entry, argument, execResult, anErrorString) {
         // do something with the error response
     }
  });
  
  // example to use Promise
  // Instantiate with the endpoint.
  var entry = Kii.serverCodeEntry("main");
  
  // Set the custom parameters.
  var arg = {"username":"name_of_my_friend", "password":"password_for_my_friend"};
  
  // Example of executing the Server Code
  entry.execute(arg).then(
      function(params) {
          var entry = params[0];
          var argument = params[1];
          var execResult = params[2];
         // do something
      },
      function(error) {
         // do something with the error response
      }
  );
   */

  KiiServerCodeEntry.prototype.execute = function(argument, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var executeCallbacks;
        executeCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            var error;
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            error = KiiUtilities._Error(arguments[3], _this);
            error.argument = arguments[1];
            return reject(error);
          }
        };
        return _this._executeUsingCallbacks(argument, executeCallbacks);
      };
    })(this));
  };

  KiiServerCodeEntry.prototype._executeUsingCallbacks = function(argument, callbacks) {
    var jsonBody, requestData, serverCodeExecutionCallBacks, url, versionName, wrapper, xhr, _ref;
    if (!(KiiUtilities._validateServerCodeEntryArgument(argument))) {
      return callbacks.failure(this, argument, null, root.InvalidArgumentException('arugment is invalid'));
    }
    requestData = argument != null ? argument : {};
    versionName = (_ref = this.version) != null ? _ref : "current";
    jsonBody = JSON.stringify(requestData);
    url = root.Kii.getBaseURL() + "/apps/" + root.Kii.getAppID() + ("/server-code/versions/" + versionName + "/" + this.entryName);
    if (this.environmentVersion) {
      url += "?environment-version=" + this.environmentVersion;
    }
    wrapper = KiiXHRWrapperFactory.createXHRWrapper("POST", url);
    xhr = wrapper.xhr;
    xhr.setRequestHeader("x-kii-appid", root.Kii.getAppID());
    xhr.setRequestHeader("x-kii-appkey", root.Kii.getAppKey());
    xhr.setRequestHeader("x-kii-sdk", root.KiiSDKClientInfo.getSDKClientInfo());
    xhr.setRequestHeader("Content-Type", "application/json");
    if (root.KiiUser.getCurrentUser() != null) {
      xhr.setRequestHeader("Authorization", "Bearer " + (root.KiiUser.getCurrentUser().getAccessToken()));
    }
    serverCodeExecutionCallBacks = {
      success: (function(_this) {
        return function() {
          var environmentVersion, errorString, execResult, returnObject, stepCount;
          stepCount = xhr.getResponseHeader("x-step-count");
          environmentVersion = xhr.getResponseHeader("x-environment-version");
          try {
            returnObject = JSON.parse(xhr.responseText);
            execResult = new root.KiiServerCodeExecResult(returnObject, stepCount, environmentVersion);
            if (callbacks != null) {
              return callbacks.success(_this, argument, execResult);
            }
          } catch (_error) {
            if (callbacks != null) {
              errorString = "fail to parse response. statusCode: " + xhr.status + " executedSteps: " + stepCount + " error code: failed_to_parse_response response: " + xhr.responseText;
              return callbacks.failure(_this, argument, null, errorString);
            }
          }
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errorMessage, errorString, json, stepCount;
          stepCount = xhr.getResponseHeader("x-step-count");
          errorMessage = {
            statusCode: xhr.status,
            executedSteps: stepCount
          };
          errorString = "fail to execute server code. statusCode: " + xhr.status + " executedSteps: " + stepCount;
          try {
            json = JSON.parse(xhr.responseText);
            if (json.errorCode != null) {
              errorString += " error code: " + json.errorCode;
            }
            if (json.message != null) {
              errorString += " message: " + json.message;
            }
            if ((json.details != null) && (json.details.message != null)) {
              return errorString += " detailMessage: " + json.details.message;
            }
          } catch (_error) {
            return errorString += " error code: failed_to_parse_response message: " + xhr.responseText;
          } finally {
            if (callbacks != null) {
              callbacks.failure(_this, argument, null, errorString);
            }
          }
        };
      })(this)
    };
    return wrapper.sendData(jsonBody, serverCodeExecutionCallBacks);
  };


  /**
      Get the entryName of this server code entry.
      @returns {String} entryName.
   */

  KiiServerCodeEntry.prototype.getEntryName = function() {
    return this.entryName;
  };

  return KiiServerCodeEntry;

})();


/**
    @class Represents a server side code execution result in KiiCloud.
 */

root.KiiServerCodeExecResult = (function() {
  function KiiServerCodeExecResult(returnObject, exeSteps, environmentVersion) {
    this.returnObject = returnObject;
    this.exeSteps = exeSteps;
    this.environmentVersion = environmentVersion;
  }


  /**
      Get calculated number of executed steps.
      @returns {Number} calculated number of executed steps
   */

  KiiServerCodeExecResult.prototype.getExecutedSteps = function() {
    return this.exeSteps;
  };


  /**
      Get the version of Node.js which the server code was executed.
      @returns {String} version of Node.js
   */

  KiiServerCodeExecResult.prototype.getEnvironmentVersion = function() {
    return this.environmentVersion;
  };


  /**
      Get Object returned by server code entry.
      @returns {Object} returned by server code entry.
   */

  KiiServerCodeExecResult.prototype.getReturnedValue = function() {
    return this.returnObject;
  };

  return KiiServerCodeExecResult;

})();


/**
@class Represents a Thing object
@note KiiThing does not support removal of fields from Server.
@property {Object} fields of this thing.
For details refer to {@link KiiThing.register}
@exports root.KiiThing as KiiThing
 */

root.KiiThing = (function() {
  function KiiThing(fields) {
    this.fields = fields;
    this._getSubscriberPath = __bind(this._getSubscriberPath, this);
    this._setAuthToken = __bind(this._setAuthToken, this);
    this._getHttpURI = __bind(this._getHttpURI, this);
    this.pushSubscription = __bind(this.pushSubscription, this);
    this._listTopicsUsingCallbacks = __bind(this._listTopicsUsingCallbacks, this);
    this.listTopics = __bind(this.listTopics, this);
    this.topicWithName = __bind(this.topicWithName, this);
    this.encryptedBucketWithName = __bind(this.encryptedBucketWithName, this);
    this.bucketWithName = __bind(this.bucketWithName, this);
    this.updatePassword = __bind(this.updatePassword, this);
    this._changeStatus = __bind(this._changeStatus, this);
    this.enable = __bind(this.enable, this);
    this.disable = __bind(this.disable, this);
    this.unregisterOwner = __bind(this.unregisterOwner, this);
    this._getOwnerURL = __bind(this._getOwnerURL, this);
    this.registerOwnerWithPassword = __bind(this.registerOwnerWithPassword, this);
    this.registerOwner = __bind(this.registerOwner, this);
    this.isOwner = __bind(this.isOwner, this);
    this.deleteThing = __bind(this.deleteThing, this);
    this.update = __bind(this.update, this);
    this._refresh = __bind(this._refresh, this);
    this.refresh = __bind(this.refresh, this);
    this.getOnlineStatusModifiedAt = __bind(this.getOnlineStatusModifiedAt, this);
    this.isOnline = __bind(this.isOnline, this);
    this.getDisabled = __bind(this.getDisabled, this);
    this.getCreated = __bind(this.getCreated, this);
    this.getAccessToken = __bind(this.getAccessToken, this);
    this.getVendorThingID = __bind(this.getVendorThingID, this);
    this.getThingID = __bind(this.getThingID, this);
    this._renewThingFields = __bind(this._renewThingFields, this);
    if (this.fields != null) {
      this._renewThingFields(this.fields);
    }
  }

  KiiThing.prototype._renewThingFields = function(respJson) {
    this._online = null;
    this._onlineStatusModifiedAt = null;
    this.fields = respJson;
    this._thingID = respJson._thingID;
    this._vendorThingID = respJson._vendorThingID;
    this._accessToken = respJson._accessToken;
    this._created = new Date(respJson._created);
    this._disabled = respJson._disabled;
    if (respJson._online != null) {
      this._online = respJson._online;
    }
    if (respJson._onlineStatusModifiedAt != null) {
      this._onlineStatusModifiedAt = new Date(respJson._onlineStatusModifiedAt);
    }
    delete this.fields._thingID;
    delete this.fields._vendorThingID;
    delete this.fields._accessToken;
    delete this.fields._created;
    return delete this.fields._disabled;
  };


  /** Get thing ID.
  @return {String} thing id
   */

  KiiThing.prototype.getThingID = function() {
    return this._thingID;
  };


  /** Get vendor thing ID.
  @return {String} vendor thing id
   */

  KiiThing.prototype.getVendorThingID = function() {
    return this._vendorThingID;
  };


  /** Get access token of this thing.
  @return {String} access token of this thing.
   */

  KiiThing.prototype.getAccessToken = function() {
    return this._accessToken;
  };


  /** Get created time of this thing.
  @return {Date} created time of this thing.
   */

  KiiThing.prototype.getCreated = function() {
    return this._created;
  };


  /** Get disabled status of this thing.
  @return {Boolean} true if thing is disabled, false otherwise.
   */

  KiiThing.prototype.getDisabled = function() {
    return this._disabled;
  };


  /** Get online status of the thing.
  @return {Boolean} true if the thing is online, false otherwise. The return value will be null initially until the thing is connected for the first time.
   */

  KiiThing.prototype.isOnline = function() {
    return this._online;
  };


  /** Get online status modified date of the thing.
  @return {Date} online status modified time of this thing. The date will be null initially until the thing is connected for the first time.
   */

  KiiThing.prototype.getOnlineStatusModifiedAt = function() {
    return this._onlineStatusModifiedAt;
  };


  /** Register thing in KiiCloud.<br>
  This API doesnt require users login Anonymous user can register thing.
  <br>
  Propertis started with '_' in the fields is reserved by Kii Cloud.<br>
  Those properties are indexed in Kii Cloud storage.<br>
  Properties not started with '_' is custom properties defined by developer.<br>
  Custom properties are not indexed in KiiCloud storage.<br>
  Following properties are readonly and ignored on creation/{@link #update} of thing.<br>
  '_thingID', '_created', '_accessToken' <br>
  Following properties are readonly after creation and will be ignored on {@link #update} of thing.<br>
  '_vendorThingID', '_password'<br>
  As Property prefixed with '_' is reserved by Kii Cloud,
  properties other than ones described in the parameter secion
  and '_layoutPosition' are ignored on creation/{@link #update} of thing.<br>
  Those ignored properties won't be removed from fields object passed as argument.
  However it won't be reflected to fields object property of created/updated Thing.
  @param {Object} fields of the thing to be registered.
  @param {String} fields._vendorThingID thing identifier given by thing vendor.
  @param {String} fields._password thing password given by thing vendor.
  @param {String} [fields._thingType] thing type given by thing vendor.
  @param {String} [fields._vendor] vendor identifier given by thing vendor.
  @param {String} [fields._firmwareVersion] firmware version given by thing vendor.
  @param {String} [fields._lot] lot identifier given by thing vendor.
  @param {String} [fields._productName] product name given by thing vendor.
  @param {String} [fields._stringField1] arbitrary string field.
  @param {String} [fields._stringField2] arbitrary string field.
  @param {String} [fields._stringField3] arbitrary string field.
  @param {String} [fields._stringField4] arbitrary string field.
  @param {String} [fields._stringField5] arbitrary string field.
  @param {Number} [fields._numberField1] arbitrary number field.
  @param {Number} [fields._numberField2] arbitrary number field.
  @param {Number} [fields._numberField3] arbitrary number field.
  @param {Number} [fields._numberField4] arbitrary number field.
  @param {Number} [fields._numberField5] arbitrary number field.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is registered thing.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is a KiiThing instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  KiiThing.register(
      {
          _vendorThingID: "thing-XXXX-YYYY-ZZZZZ",
          _password: "thing-password",
          _thingType: "thermometer",
          yourCustomObj: // Arbitrary key can be used.
          { // Object, Array, Number, String can be used. Should be compatible with JSON.
              yourCustomKey1: "value",
              yourCustomKey2: 100
          }
      },
      {
          success: function(thing) {
              // Register Thing succeeded.
          },
          failure: function(error) {
              // Handle error.
          }
      }
  );
  
  // example to use Promise
  KiiThing.register(
      {
          _vendorThingID: "thing-XXXX-YYYY-ZZZZZ",
          _password: "thing-password",
          _thingType: "thermometer",
          yourCustomObj: // Arbitrary key can be used.
          { // Object, Array, Number, String can be used. Should be compatible with JSON.
              yourCustomKey1: "value",
              yourCustomKey2: 100
          }
      }
  ).then(
      function(thing) {
          // Register Thing succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.register = function(fields, callbacks) {
    return new Promise(function(resolve, reject) {
      var sendCallbacks, wrapper;
      wrapper = KiiXHRWrapperFactory.createXHRWrapper('POST', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things");
      wrapper.setKiiHeaders();
      wrapper.setContentType("application/vnd.kii.ThingRegistrationAndAuthorizationRequest+json");
      sendCallbacks = {
        success: function() {
          var respJson, thing;
          respJson = JSON.parse(decodeURIComponent(wrapper.xhr.responseText));
          thing = new root.KiiThing(respJson);
          if (callbacks != null) {
            callbacks.success(thing);
          }
          return resolve(thing);
        },
        failure: function() {
          var errObj, errString;
          errString = wrapper.getErrorString("register thing");
          errObj = KiiUtilities._Error(errString);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        }
      };
      return wrapper.sendData(JSON.stringify(fields), sendCallbacks);
    });
  };


  /** Perform a query to get the owned things.
  
  <br><br>The query will be executed against the server, returning a result set.
  @param KiiThingQuery thingQuery thingQuery.
  @param Object callbacks An object with callback methods defined
  @param {Function} callbacks.success The callback method to call on a successful query request
  @param {Function} callbacks.failure The callback method to call on a failed query request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(result). result is KiiThingQueryResult instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
   */

  KiiThing.executeQuery = function(thingQuery, callbacks) {
    return new Promise(function(resolve, reject) {
      var errObj, sendCallbacks, wrapper;
      if (thingQuery == null) {
        errObj = KiiUtilities._Error("thingQuery is null");
        if (callbacks != null) {
          callbacks.failure(errObj);
        }
        reject(errObj);
        return;
      }
      wrapper = KiiXHRWrapperFactory.createXHRWrapper('POST', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/query");
      wrapper.setKiiHeaders();
      wrapper.setCurrentUserToken();
      wrapper.setContentType("application/vnd.kii.ThingQueryRequest+json");
      sendCallbacks = {
        success: function() {
          var queryResult, respJson, result, things, _i, _len, _ref;
          respJson = JSON.parse(decodeURIComponent(wrapper.xhr.responseText));
          things = [];
          _ref = respJson.results;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            result = _ref[_i];
            things.push(new root.KiiThing(result));
          }
          queryResult = new root.KiiThingQueryResult(thingQuery, things, respJson.nextPaginationKey);
          if (callbacks != null) {
            callbacks.success(queryResult);
          }
          return resolve(queryResult);
        },
        failure: function() {
          var errString;
          errString = wrapper.getErrorString("query thing");
          errObj = KiiUtilities._Error(errString);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        }
      };
      return wrapper.sendData(JSON.stringify(thingQuery._dictValue()), sendCallbacks);
    });
  };


  /**
  Retrieve the latest thing information from KiiCloud.
  <br>This API is authorized by owner of thing.
  <br>Need user login who owns this thing before execute this API.
  <br>To let users to own thing, please call {@link KiiThing#registerOwner}
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is refreshed thing.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is KiiThing instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing is already registered.
  thing.refresh({
      success: function(thing) {
          // Refresh succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing is already registered.
  thing.refresh().then(
      function(thing) {
          // Refresh succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.refresh = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var _refreshCallbacks;
        _refreshCallbacks = {
          success: function(respJson) {
            _this._renewThingFields(respJson);
            if (callbacks != null) {
              callbacks.success(_this);
            }
            return resolve(_this);
          },
          failure: function(errString) {
            var errObj;
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return _this._refresh(_refreshCallbacks);
      };
    })(this));
  };

  KiiThing.prototype._refresh = function(callbacks) {
    var qualifiedID, sendCallbacks, wrapper;
    if (this._thingID != null) {
      qualifiedID = this._thingID;
    } else {
      qualifiedID = "VENDOR_THING_ID:" + this._vendorThingID;
    }
    wrapper = KiiXHRWrapperFactory.createXHRWrapper('GET', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + qualifiedID);
    wrapper.setKiiHeaders();
    this._setAuthToken(wrapper);
    sendCallbacks = {
      success: (function(_this) {
        return function() {
          var respJson;
          respJson = JSON.parse(decodeURIComponent(wrapper.xhr.responseText));
          return callbacks.success(respJson);
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errString;
          errString = wrapper.getErrorString("refresh thing");
          return callbacks.failure(errString);
        };
      })(this)
    };
    return wrapper.send(sendCallbacks);
  };


  /**
  Update registered thing information in Kii Cloud
  <br>This API is authorized by owner of thing.
  <br>Need user login who owns this thing before execute this API.
  <br>To let users to own thing, please call {@link KiiThing#registerOwner}
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is updated thing.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is a KiiThing instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @see KiiThing.register
  @example
  // example to use callbacks directly
  // assume thing is already registered.
  thing.fields._stringField1 = "new string value";
  thing.fields.customObject = {
      "customField1" : "abcd",
      "customField2" : 123
  };
  thing.update({
      success: function(thing) {
          // Update succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing is already registered.
  thing.fields._stringField1 = "new string value";
  thing.fields.customObject = {
      "customField1" : "abcd",
      "customField2" : 123
  };
  thing.update().then(
      function(thing) {
          // Update succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.update = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var _refreshCallbacks;
        _refreshCallbacks = {
          success: function(respJson) {
            var k, sendCallbacks, v, wrapper, _ref;
            _ref = _this.fields;
            for (k in _ref) {
              v = _ref[k];
              respJson[k] = v;
            }
            _this.fields = respJson;
            wrapper = KiiXHRWrapperFactory.createXHRWrapper('PATCH', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + _this._thingID);
            wrapper.setKiiHeaders();
            wrapper.setContentType("application/vnd.kii.ThingUpdateRequest+json");
            _this._setAuthToken(wrapper);
            sendCallbacks = {
              success: function() {
                if (callbacks != null) {
                  callbacks.success(_this);
                }
                return resolve(_this);
              },
              failure: function() {
                var errObj, errString;
                errString = wrapper.getErrorString("update thing");
                errObj = KiiUtilities._Error(errString, _this);
                if (callbacks != null) {
                  callbacks.failure(errObj);
                }
                return reject(errObj);
              }
            };
            wrapper.sendData(JSON.stringify(_this.fields), sendCallbacks);
            return typeof _this._testOnUpdateRequest === "function" ? _this._testOnUpdateRequest() : void 0;
          },
          failure: function(errString) {
            var errObj;
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return _this._refresh(_refreshCallbacks);
      };
    })(this));
  };


  /**
  Delete registered thing in Kii Cloud.
  <br>This API is authorized by owner of thing.
  <br>Need user login who owns this thing before execute this API.
  <br>To let users to own thing, please call {@link KiiThing#registerOwner}
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  It will delete bucket, topic which belongs to this thing,
  entity belongs to the bucket/topic and all ownership information of thing.
  This operation can not be reverted. Please carefully use this.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is updated thing.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is a KiiThing instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing is already registered.
  thing.deleteThing({
      success: function(thing) {
          // Delete succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing is already registered.
  thing.deleteThing().then(
      function(thing) {
          // Delete succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.deleteThing = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var sendCallbacks, wrapper;
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('DELETE', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + _this._thingID);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this);
            }
            return resolve(_this);
          },
          failure: function() {
            var errObj, errString;
            errString = wrapper.getErrorString("delete thing");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };


  /**
  Check if user/ group is owner of the thing.
  <br>This API is authorized by owner of thing.
  <br>Need user login before execute this API.
  <br>To let users to own Thing, please call {@link KiiThing#registerOwner}
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {KiiUser or KiiGroup} owner whether the instance is owner of thing or not.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: thing object.
  <br>2nd argument: user/group object.
  <br>3rd argument: result whether the user/group owns this thing.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is the KiiThing instance which this method was called on.</li>
          <li>params[1] is a KiiUser/KiiGroup instance.</li>
          <li>params[2] is Boolean value, true is the user/group is owner of the thing, otherwise false.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing/user is already registered.
  var user = KiiUser.userWithURI("kiicloud://users/xxxyyyy");
  thing.isOwner(user, {
      success: function(thing, user, isOwner) {
          if (isOwner) {
              // user is owner of the thing.
          } else {
              // user is not owner of the thing.
          }
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/user is already registered.
  var user = KiiUser.userWithURI("kiicloud://users/xxxyyyy");
  thing.isOwner(user).then(
      function(params) {
          var thing = params[0];
          var user = params[1];
          var isOwner = params[2];
          if (isOwner) {
              // user is owner of the thing.
          } else {
              // user is not owner of the thing.
          }
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.isOwner = function(owner, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, message, ownerUrl, sendCallbacks, wrapper;
        try {
          ownerUrl = _this._getOwnerURL(_this._thingID, owner);
        } catch (_error) {
          message = _error;
          errObj = KiiUtilities._Error(message, _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
          return;
        }
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('HEAD', ownerUrl);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this, owner, true);
            }
            return resolve([_this, owner, true]);
          },
          failure: function() {
            var errString;
            if (wrapper.xhr.status === 404) {
              if (callbacks != null) {
                callbacks.success(_this, owner, false);
              }
              resolve([_this, owner, false]);
              return;
            }
            errString = wrapper.getErrorString("register owner");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };


  /**
  Register user/group as owner of this thing.
  <br>Need user login before execute this API.
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {KiiUser or KiiGroup} owner to be registered as owner.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: thing object.
  <br>2nd argument: user/group object registered as owner.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is the KiiThing instance which this method was called on.</li>
          <li>params[1] is a KiiUser/KiiGroup instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @deprecated Use {@link KiiThing.registerOwnerWithPassword} instead.
  @example
  // example to use callbacks directly
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  thing.registerOwner(group, {
      success: function(thing, group) {
          // Register owner succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  thing.registerOwner(group).then(
      function(params) {
          // Register owner succeeded.
          var thing = params[0];
          var group = params[1];
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.registerOwner = function(owner, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, message, ownerUrl, sendCallbacks, wrapper;
        try {
          ownerUrl = _this._getOwnerURL(_this._thingID, owner);
        } catch (_error) {
          message = _error;
          errObj = KiiUtilities._Error(message, _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
          return;
        }
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('PUT', ownerUrl);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this, owner);
            }
            return resolve([_this, owner]);
          },
          failure: function() {
            var errString;
            errString = wrapper.getErrorString("register owner");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };


  /**
  Register user/group as owner of this thing.
  <br>Need user login before execute this API.
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {KiiUser or KiiGroup} owner to be registered as owner.
  @param {String} [password] the thing password
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: thing object.
  <br>2nd argument: user/group object registered as owner.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is the KiiThing instance which this method was called on.</li>
          <li>params[1] is a KiiUser/KiiGroup instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  thing.registerOwnerWithPassword(group, "Thing password", {
      success: function(thing, group) {
          // Register owner succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  thing.registerOwnerWithPassword(group, "Thing password").then(
      function(params) {
          // Register owner succeeded.
          var thing = params[0];
          var group = params[1];
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.registerOwnerWithPassword = function(owner, password, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var registerCallbacks;
        registerCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this, owner);
            }
            return resolve([_this, owner]);
          },
          failure: function(error) {
            if (callbacks != null) {
              callbacks.failure(error);
            }
            return reject(error);
          }
        };
        return root.KiiThing._registerOwnerWithIdentifierAndPassword(_this._thingID, owner, password, registerCallbacks);
      };
    })(this));
  };


  /**
  Register user/group as owner of specified thing.
  <br>Need user login before execute this API.
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {String} thingID The ID of thing
  @param {KiiUser or KiiGroup} owner instance of KiiUser/KiiGroup to be registered as owner.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: user/group object registered as owner.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is a KiiUser/KiiGroup instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @deprecated Use {@link KiiThing.registerOwnerWithThingIDAndPassword} instead.
  @example
  // example to use callbacks directly
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  KiiThing.registerOwnerWithThingID("th.xxxx-yyyy-zzzz", group, {
      success: function(group) {
          // Register owner succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  KiiThing.registerOwnerWithThingID("th.xxxx-yyyy-zzzz", group).then(
      function(params) {
          // Register owner succeeded.
          var group = params[0];
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.registerOwnerWithThingID = function(thingID, owner, callbacks) {
    return root.KiiThing._registerOwnerWithIdentifier(thingID, owner, callbacks);
  };


  /**
  Register user/group as owner of specified thing.
  <br>Need user login before execute this API.
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {String} thingID The ID of thing
  @param {KiiUser or KiiGroup} owner instance of KiiUser/KiiGroup to be registered as owner.
  @param {String} [password] the thing password
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: user/group object registered as owner.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(owner).
        <ul>
          <li>owner is a KiiUser/KiiGroup instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  KiiThing.registerOwnerWithThingIDAndPassword("th.xxxx-yyyy-zzzz", group, "Thing password", {
      success: function(owner) {
          // Register owner succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  KiiThing.registerOwnerWithThingIDAndPassword("th.xxxx-yyyy-zzzz", group, "Thing password").then(
      function(owner) {
          // Register owner succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.registerOwnerWithThingIDAndPassword = function(thingID, owner, password, callbacks) {
    return root.KiiThing._registerOwnerWithIdentifierAndPassword(thingID, owner, password, callbacks);
  };


  /**
  Register user/group as owner of specified thing.
  <br>Need user login before execute this API.
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {String} vendorThingID The vendor thing ID of thing
  @param {KiiUser or KiiGroup} owner instance of KiiUser/KiiGroup to be registered as owner.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: user/group object registered as owner.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is a KiiUser/KiiGroup instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @deprecated Use {@link KiiThing.registerOwnerWithVendorThingIDAndPassword} instead.
  @example
  // example to use callbacks directly
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  KiiThing.registerOwnerWithVendorThingID("xxxx-yyyy-zzzz", group, {
      success: function(group) {
          // Register owner succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  KiiThing.registerOwnerWithVendorThingID("xxxx-yyyy-zzzz", group).then(
      function(group) {
          // Register owner succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.registerOwnerWithVendorThingID = function(vendorThingID, owner, callbacks) {
    if (!KiiUtilities._isNonEmptyString(vendorThingID)) {
      return root.KiiThing._registerOwnerWithIdentifier(null, owner, callbacks);
    }
    return root.KiiThing._registerOwnerWithIdentifier("VENDOR_THING_ID:" + vendorThingID, owner, callbacks);
  };


  /**
  Register user/group as owner of specified thing.
  <br>Need user login before execute this API.
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {String} vendorThingID The vendor thing ID of thing
  @param {KiiUser or KiiGroup} owner instance of KiiUser/KiiGroup to be registered as owner.
  @param {String} [password] the thing password
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: user/group object registered as owner.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(owner).
        <ul>
          <li>owner is a KiiUser/KiiGroup instance.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  KiiThing.registerOwnerWithVendorThingIDAndPassword("xxxx-yyyy-zzzz", group, "Thing password", {
      success: function(owner) {
          // Register owner succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  KiiThing.registerOwnerWithVendorThingIDAndPassword("xxxx-yyyy-zzzz", group, "Thing password").then(
      function(owner) {
          // Register owner succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.registerOwnerWithVendorThingIDAndPassword = function(vendorThingID, owner, password, callbacks) {
    if (!KiiUtilities._isNonEmptyString(vendorThingID)) {
      return root.KiiThing._registerOwnerWithIdentifierAndPassword(null, owner, password, callbacks);
    }
    return root.KiiThing._registerOwnerWithIdentifierAndPassword("VENDOR_THING_ID:" + vendorThingID, owner, password, callbacks);
  };

  KiiThing._registerOwnerWithIdentifier = function(identifier, owner, callbacks) {
    return new Promise(function(resolve, reject) {
      var errObj, message, ownerUrl, sendCallbacks, wrapper;
      if (!KiiUtilities._isNonEmptyString(identifier)) {
        errObj = KiiUtilities._Error("identifier is null or empty");
        if (callbacks != null) {
          callbacks.failure(errObj);
        }
        reject(errObj);
        return;
      }
      if (owner == null) {
        errObj = KiiUtilities._Error("owner is null");
        if (callbacks != null) {
          callbacks.failure(errObj);
        }
        reject(errObj);
        return;
      }
      try {
        ownerUrl = root.KiiThing.prototype._getOwnerURL(identifier, owner);
      } catch (_error) {
        message = _error;
        errObj = KiiUtilities._Error(message);
        if (callbacks != null) {
          callbacks.failure(errObj);
        }
        reject(errObj);
        return;
      }
      wrapper = KiiXHRWrapperFactory.createXHRWrapper('PUT', ownerUrl);
      wrapper.setKiiHeaders();
      root.KiiThing.prototype._setAuthToken(wrapper);
      sendCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success(owner);
          }
          return resolve([owner]);
        },
        failure: function() {
          var errString;
          errString = wrapper.getErrorString("register owner");
          errObj = KiiUtilities._Error(errString);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        }
      };
      return wrapper.send(sendCallbacks);
    });
  };

  KiiThing._registerOwnerWithIdentifierAndPassword = function(identifier, owner, password, callbacks) {
    return new Promise(function(resolve, reject) {
      var errObj, requestBody, sendCallbacks, url, wrapper;
      if (!KiiUtilities._isNonEmptyString(identifier)) {
        errObj = KiiUtilities._Error("identifier is null or empty");
        if (callbacks != null) {
          callbacks.failure(errObj);
        }
        reject(errObj);
        return;
      }
      if (owner == null) {
        errObj = KiiUtilities._Error("owner is null");
        if (callbacks != null) {
          callbacks.failure(errObj);
        }
        reject(errObj);
        return;
      }
      if (!KiiUtilities._isNonEmptyString(password)) {
        errObj = KiiUtilities._Error("password is null or empty");
        if (callbacks != null) {
          callbacks.failure(errObj);
        }
        reject(errObj);
        return;
      }
      url = "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + identifier + "/ownership";
      wrapper = KiiXHRWrapperFactory.createXHRWrapper('POST', url);
      wrapper.setKiiHeaders();
      wrapper.setContentType("application/vnd.kii.ThingOwnershipRequest+json");
      root.KiiThing.prototype._setAuthToken(wrapper);
      requestBody = {
        thingPassword: password
      };
      if (owner instanceof root.KiiUser) {
        requestBody.userID = owner.getID();
      } else if (owner instanceof root.KiiGroup) {
        requestBody.groupID = owner.getID();
      } else {
        errObj = KiiUtilities._Error("owner should be instance of KiiUser or KiiGroup");
        if (callbacks != null) {
          callbacks.failure(errObj);
        }
        reject(errObj);
        return;
      }
      sendCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success(owner);
          }
          return resolve(owner);
        },
        failure: function() {
          var errString;
          errString = wrapper.getErrorString("register owner");
          errObj = KiiUtilities._Error(errString);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        }
      };
      return wrapper.sendData(JSON.stringify(requestBody), sendCallbacks);
    });
  };

  KiiThing.prototype._getOwnerURL = function(identifier, owner) {
    var oid, type;
    if (owner instanceof root.KiiUser) {
      oid = owner.getID();
      type = 'user';
    } else if (owner instanceof root.KiiGroup) {
      oid = owner.getID();
      type = 'group';
    } else {
      throw 'owner should be instance of user or group';
    }
    if (oid == null) {
      throw 'owner instance does not have id';
    }
    return "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + identifier + "/ownership/" + type + ":" + oid;
  };


  /**
  Remove ownership of thing from specified user/group.
  <br>This API is authorized by owner of thing.
  <br>Need user login who owns this thing before execute this API.
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {KiiUser or KiiGroup} owner to be unregistered.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: thing object
  <br>2nd argument: unregistered owner
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is the KiiThing instance which this method was called on.</li>
          <li>params[1] is a KiiUser/KiiGroup instance which had ownership of the thing removed.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  thing.unregisterOwner(group, {
      success: function(thing, group) {
          // Unregister owner succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing/group is already registered.
  var group = KiiGroup.groupWithURI("kiicloud://groups/xxxyyyy");
  thing.unregisterOwner(group).then(
      function(params) {
          // Unregister owner succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.unregisterOwner = function(owner, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, message, ownerUrl, sendCallbacks, wrapper;
        try {
          ownerUrl = _this._getOwnerURL(_this._thingID, owner);
        } catch (_error) {
          message = _error;
          errObj = KiiUtilities._Error(message, _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
          return;
        }
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('DELETE', ownerUrl);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this, owner);
            }
            return resolve([_this, owner]);
          },
          failure: function() {
            var errString;
            errString = wrapper.getErrorString("unregister owner");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };


  /**
  Disable the thing.
  <br>This API is authorized by owner of thing.
  <br>Need user login who owns this thing before execute this API.
  <br>To let users to own Thing, please call {@link KiiThing#registerOwner}
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  After succeeded, access token published for thing is disabled.
  In a result, only the app administrator and owners of thing can access the thing.
  Used when user lost the thing and avoid using by unknown users.
  It doesn't throw error when the thing is already disabled.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is disabled thing
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is a KiiThing instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing is already registered.
  thing.disable({
      success: function(thing) {
          // Disable succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing is already registered.
  thing.disable().then(
      function(thing) {
          // Disable succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.disable = function(callbacks) {
    return this._changeStatus(true, callbacks);
  };


  /**
  Enable the thing.
  <br>This API is authorized by owner of thing.
  <br>Need user login who owns this thing before execute this API.
  <br>To let users to own Thing, please call {@link KiiThing#registerOwner}
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  After succeeded, If thing is registered with "persistentToken" option,
  token should be recovered (Access token which is used before disabling can be available).
  Otherwise, it does not recovered.
  It doesn't throw error when the thing is already enabled.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is enabled thing
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is a KiiThing instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing is already registered.
  thing.enable({
      success: function(thing) {
          // Enable succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume thing is already registered.
  thing.enable().then(
      function(thing) {
          // Disable succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.enable = function(callbacks) {
    return this._changeStatus(false, callbacks);
  };

  KiiThing.prototype._changeStatus = function(disable, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var data, sendCallbacks, wrapper;
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('PUT', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + _this._thingID + "/status");
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        wrapper.setContentType('application/vnd.kii.ThingStatusUpdateRequest+json');
        sendCallbacks = {
          success: function() {
            _this._disabled = disable;
            if (callbacks != null) {
              callbacks.success(_this);
            }
            return resolve(_this);
          },
          failure: function() {
            var errObj, errString;
            errString = wrapper.getErrorString("disable thing " + disable);
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        data = {
          disabled: disable
        };
        return wrapper.sendData(JSON.stringify(data), sendCallbacks);
      };
    })(this));
  };


  /** Updates thing password. This method can be used only by app admin.
  
  <br>
  @param {String} newPassword new password
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is this thing.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is a KiiThing instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume thing is already registered and you had an adminContext.
  adminContext.thingWithID(thing.getThingID()).updatePassword("new password", {
    success: function(thing) {
      // Update succeeded.
    },
    failure: function(error) {
      // Handle error.
    }
  });
  // example to use Promise
  // assume thing is already registered and you had an adminContext.
  adminContext.thingWithID(thing.getThingID()).updatePassword("new password").then(
      function(thing) {
          // Update succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.prototype.updatePassword = function(newPassword, callbacks) {
    var errObj;
    errObj = KiiUtilities._Error("updatePassword can be used only by app admin.");
    if (callbacks != null) {
      callbacks.failure(errObj);
    }
    return Promise.reject(errObj);
  };


  /**
  Load thing with given vendor thing id.
  <br>This API is authorized by owner of thing.
  <br>Need user login who owns this thing before execute this API.
  <br>To let users to own Thing, please call {@link KiiThing#registerOwner}
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  @param {String} vendorThingID registered vendor thing id.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  @param {Function} callbacks.failure callback called when operation failed.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is a KiiThing instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  KiiThing.loadWithVendorThingID("thing-xxxx-yyyy",{
      success: function(thing) {
          // Load succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  KiiThing.loadWithVendorThingID("thing-xxxx-yyyy").then(
      function(thing) {
          // Load succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.loadWithVendorThingID = function(vendorThingID, callbacks) {
    var qualifiedID;
    qualifiedID = "VENDOR_THING_ID:" + vendorThingID;
    return root.KiiThing._load(qualifiedID, callbacks);
  };


  /**
  Load thing with thing id given by Kii Cloud.
  <br>This API is authorized by owner of thing.
  <br>Need user login who owns this thing before execute this API.
  <br>To let users to own Thing, please call {@link KiiThing#registerOwner}
  <br>Note: if you obtain thing instance from {@link KiiAppAdminContext},
  API is authorized by app admin.<br>
  
  thing id can be obtained by {@link thingID}
  @param {String} thingID registered thing id.
  @param {Object} [callbacks] object holds callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is loaded thing.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(thing). thing is a KiiThing instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  KiiThing.loadWithThingID("thing-xxxx-yyyy",{
      success: function(thing) {
          // Load succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  KiiThing.loadWithVendorThingID("thing-xxxx-yyyy").then(
      function(thing) {
          // Load succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiThing.loadWithThingID = function(thingID, callbacks) {
    return root.KiiThing._load(thingID, callbacks);
  };

  KiiThing._load = function(qualifiedID, callbacks) {
    return new Promise(function(resolve, reject) {
      var sendCallbacks, wrapper;
      wrapper = KiiXHRWrapperFactory.createXHRWrapper('GET', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + qualifiedID);
      wrapper.setKiiHeaders();
      root.KiiThing.prototype._setAuthToken(wrapper);
      sendCallbacks = {
        success: function() {
          var respJson, thing;
          respJson = JSON.parse(decodeURIComponent(wrapper.xhr.responseText));
          thing = new root.KiiThing(respJson);
          if (callbacks != null) {
            callbacks.success(thing);
          }
          return resolve(thing);
        },
        failure: function() {
          var errObj, errString;
          errString = wrapper.getErrorString("load thing");
          errObj = KiiUtilities._Error(errString);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        }
      };
      return wrapper.send(sendCallbacks);
    });
  };


  /**
  Instantiate bucket belongs to this thing.
  @param {String} bucketName name of the bucket.
  @return {KiiBucket} bucket instance.
   */

  KiiThing.prototype.bucketWithName = function(bucketName) {
    return new root.KiiBucket._bucketWithName(bucketName, this);
  };


  /** Creates a reference to a encrypted bucket for this thing
  
  <br><br>The bucket will be created/accessed within this thing's scope
  @param {String} bucketName The name of the bucket the user should create/access
  @returns {KiiEncryptedBucket} A working KiiEncryptedBucket object
  @example
  var thing = . . .; // a KiiThing
  var bucket = thing.encryptedBucketWithName("myBucket");
   */

  KiiThing.prototype.encryptedBucketWithName = function(bucketName) {
    return new root.KiiEncryptedBucket(bucketName, this);
  };


  /**
  Instantiate topic belongs to this thing.
  @param {String} topicName name of the topic. Must be a not empty string.
  @return {KiiTopic} topic instance.
   */

  KiiThing.prototype.topicWithName = function(topicName) {
    if (typeof topicName !== "string" || topicName === "") {
      throw new root.InvalidArgumentException('topicName should not null or empty');
    }
    return new root.KiiTopic(this._getHttpURI(), topicName);
  };


  /** Gets a list of topics in this thing scope
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful list request
  @param {Method} callbacks.failure The callback method to call on a failed list request
  @param {String} [paginationKey] You can specify the pagination key with the nextPaginationKey passed by callbacks.success. If empty string or no string object is provided, this API regards no paginationKey specified.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(params). params is Array instance.
          <ul>
            <li>params[0] is array of KiiTopic instances.</li>
            <li>params[1] is string of nextPaginationKey.</li>
          </ul>
        </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.target is the KiiThing instance which this method was called on. </li>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  var thing = . . .; // a KiiThing
  thing.listTopics({
      success: function(topicList, nextPaginationKey) {
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              thing.listTopics({
                  success: function(topicList, nextPaginationKey) {...},
                  failure: function(anErrorString) {...}
              }, nextPaginationKey);
          }
      },
      failure: function(anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use promise
  var thing = . . .; // a KiiThing
  thing.listTopics().then(
      function(params) {
          var topicList = params[0];
          var nextPaginationKey = params[1];
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              thing.listTopics(null, nextPaginationKey).then(
                  function(params) {...},
                  function(error) {...}
              );
          }
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiThing.prototype.listTopics = function(callbacks, paginationKey) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var listTopicsCallbacks;
        listTopicsCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success.apply(callbacks, arguments);
            }
            return resolve(arguments);
          },
          failure: function() {
            if (callbacks != null) {
              callbacks.failure.apply(callbacks, arguments);
            }
            return reject(arguments[0]);
          }
        };
        return _this._listTopicsUsingCallbacks(listTopicsCallbacks, paginationKey);
      };
    })(this));
  };

  KiiThing.prototype._listTopicsUsingCallbacks = function(callbacks, paginationKey) {
    var listCallbacks, uri, wrapper;
    uri = "" + (this._getHttpURI()) + "/topics";
    if (typeof paginationKey === "string" && paginationKey !== "") {
      uri = uri + "?paginationKey=" + encodeURIComponent(paginationKey);
    }
    wrapper = KiiXHRWrapperFactory.createXHRWrapper('GET', uri);
    wrapper.setKiiHeaders();
    this._setAuthToken(wrapper);
    listCallbacks = {
      success: (function(_this) {
        return function() {
          var json, topic, topics, _i, _len, _ref;
          json = JSON.parse(wrapper.xhr.responseText);
          topics = [];
          _ref = json.topics;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            topic = _ref[_i];
            topics.push(_this.topicWithName(topic.topicID));
          }
          return callbacks != null ? callbacks.success(topics, (json.paginationKey === void 0 ? null : json.paginationKey)) : void 0;
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errObj, errString;
          errString = wrapper.getErrorString("list topics");
          errObj = KiiUtilities._Error(errString, _this);
          return callbacks != null ? callbacks.failure(errObj) : void 0;
        };
      })(this)
    };
    return wrapper.send(listCallbacks);
  };


  /** Instantiate push subscription for this thing.
  @return {KiiPushSubscription} push subscription object.
   */

  KiiThing.prototype.pushSubscription = function() {
    return new root.KiiPushSubscription(this);
  };

  KiiThing.prototype._getHttpURI = function() {
    return "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + (this.getThingID());
  };

  KiiThing.thingWithID = function(thingID) {
    var thing;
    if ((thingID == null) || thingID === "") {
      throw new root.InvalidArgumentException('thingID should not null or empty');
    }
    thing = new root.KiiThing();
    thing._thingID = thingID;
    return thing;
  };

  KiiThing.prototype._setAuthToken = function(wrapper) {
    return wrapper.setCurrentUserToken();
  };

  KiiThing.prototype._getSubscriberPath = function() {
    return "things/" + (this.getThingID());
  };

  return KiiThing;

})();


/**
@class Represents a Topic object.
@exports root.KiiTopic as KiiTopic
 */

root.KiiTopic = (function() {
  function KiiTopic(parentUri, topicName) {
    this._getHttpUri = __bind(this._getHttpUri, this);
    this._setAuthToken = __bind(this._setAuthToken, this);
    this.acl = __bind(this.acl, this);
    this.deleteTopic = __bind(this.deleteTopic, this);
    this.sendMessage = __bind(this.sendMessage, this);
    this.save = __bind(this.save, this);
    this.exists = __bind(this.exists, this);
    this.getName = __bind(this.getName, this);
    this._uri = "" + parentUri + "/topics/" + topicName;
    this._name = topicName;
  }


  /** get name of this topic
  @return {String} name of this topic.
   */

  KiiTopic.prototype.getName = function() {
    return this._name;
  };


  /** Checks whether the topic already exists or not.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success callback called when operation succeeded.
  <br>argument is boolean.
  @param {Method} callbacks.failure callback called when operation failed.
  <br>argument is error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(existed). true if the topic exists.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiTopic instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume topic is already instantiated.
  topic.exists({
      success: function(existed) {
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume topic is already instantiated.
  topic.exists().then(
      function(existed){
      },
      function(error){
          // Handle error.
      });
   */

  KiiTopic.prototype.exists = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var existsCallbacks, wrapper;
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('HEAD', _this._uri);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        existsCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(true);
            }
            return resolve(true);
          },
          failure: function() {
            var errObj, errString;
            if (wrapper.xhr.status === 404) {
              if (callbacks != null) {
                callbacks.success(false);
              }
              resolve(false);
              return;
            }
            errString = wrapper.getErrorString("check topic");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(existsCallbacks);
      };
    })(this));
  };


  /** Save this topic on Kii Cloud.
  Note that only app admin can save application scope topic.
  @param {Object} [callbacks] callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is saved topic.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theSavedTopic). theSavedTopic is a KiiTopic instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiTopic instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume topic is already instantiated.
  topic.save({
      success: function(topic) {
          // Save topic succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume topic is already instantiated.
  topic.save().then(
      function(topic) {
          // Save topic succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiTopic.prototype.save = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var sendCallbacks, wrapper;
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('PUT', _this._uri);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this);
            }
            return resolve(_this);
          },
          failure: function() {
            var errObj, errString;
            errString = wrapper.getErrorString("save topic");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };


  /** Send message to the topic.
  @param {Object} message to be sent.
  @param {Object} [callbacks] callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: topic object.
  <br>2nd argument: message object.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is the KiiTopic instance which this method was called on.</li>
          <li>params[1] is the message object to send.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiTopic instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume topic is already instantiated.
  var contents = {
      message : "hello push!"
  };
  var message = new KiiPushMessageBuilder(contents).build();
  topic.sendMessage(message, {
      success: function(topic, message) {
          // Send message succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume topic is already instantiated.
  var contents = {
      message : "hello push!"
  };
  var message = new KiiPushMessageBuilder(contents).build();
  topic.sendMessage(message).then(
      function(params) {
          // Send message succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiTopic.prototype.sendMessage = function(message, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var sendCallbacks, wrapper;
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('POST', "" + _this._uri + "/push/messages");
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        wrapper.setContentType("application/vnd.kii.SendPushMessageRequest+json");
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this, message);
            }
            return resolve([_this, message]);
          },
          failure: function() {
            var errObj, errString;
            errString = wrapper.getErrorString("send messages");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.sendData(JSON.stringify(message), sendCallbacks);
      };
    })(this));
  };


  /** Delete the topic.
  @param {Object} [callbacks] callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>argument is topic object.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(theDeletedTopic). theDeletedTopic is a KiiTopic instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiTopic instance which this method was called on.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  // assume topic is already instantiated.
  topic.deleteTopic({
      success: function(topic) {
          // Delete topic succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  // assume topic is already instantiated.
  topic.deleteTopic().then(
      function(topic) {
          // Delete topic succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiTopic.prototype.deleteTopic = function(callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var sendCallbacks, wrapper;
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('DELETE', _this._uri);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this);
            }
            return resolve(_this);
          },
          failure: function() {
            var errObj, errString;
            errString = wrapper.getErrorString("delete topic");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };


  /** Get ACL object of this topic.
  Access to topic can be configured by adding/removing KiiACLEntry
  to/from obtained acl object.
  @return {KiiACL} acl object of this topic.
   */

  KiiTopic.prototype.acl = function() {
    return root.KiiACL.aclWithParent(this);
  };

  KiiTopic.prototype._setAuthToken = function(wrapper) {
    return wrapper.setCurrentUserToken();
  };

  KiiTopic.prototype._getHttpUri = function() {
    return this._uri;
  };

  return KiiTopic;

})();


/**
@class Builder of push message
@exports root.KiiPushMessageBuilder as KiiPushMessageBuilder
 */

root.KiiPushMessageBuilder = (function() {

  /** instantiate builder with push message data.
  By default all push channels (gcm, apns, jpush, mqtt) is enabled.
  All other properties configured by method of this class won't be set and default
  value would be applied.<br>
  Details of properties of message and its default value, please refer to
  http://documentation.kii.com/rest/#notification_management-leverage__push_to_users__notification-group_scope-send_messages-send_a_push_message_to_the_current_topic
  @param {Object} data sent to all push channels (gcm, apns, jpush, mqtt).
   */
  function KiiPushMessageBuilder(data) {
    this.data = data;
    this.mqttData = __bind(this.mqttData, this);
    this.jpushData = __bind(this.jpushData, this);
    this.apnsMutableContent = __bind(this.apnsMutableContent, this);
    this.apnsCategory = __bind(this.apnsCategory, this);
    this.apnsContentAvailable = __bind(this.apnsContentAvailable, this);
    this.apnsBadge = __bind(this.apnsBadge, this);
    this.apnsSound = __bind(this.apnsSound, this);
    this.apnsAlert = __bind(this.apnsAlert, this);
    this.apnsData = __bind(this.apnsData, this);
    this.gcmRestrictedPackageName = __bind(this.gcmRestrictedPackageName, this);
    this.gcmTimeToLive = __bind(this.gcmTimeToLive, this);
    this.gcmDelayWhileIdle = __bind(this.gcmDelayWhileIdle, this);
    this.gcmCollapseKey = __bind(this.gcmCollapseKey, this);
    this.gcmData = __bind(this.gcmData, this);
    this.enableMqtt = __bind(this.enableMqtt, this);
    this.enableJpush = __bind(this.enableJpush, this);
    this.enableApns = __bind(this.enableApns, this);
    this.enableGcm = __bind(this.enableGcm, this);
    this.setSendToProduction = __bind(this.setSendToProduction, this);
    this.setSendToDevelopment = __bind(this.setSendToDevelopment, this);
    this.build = __bind(this.build, this);
    this.gcm = {};
    this.apns = {};
    this.jpush = {};
    this.mqtt = {};
    this.gcm.enabled = true;
    this.apns.enabled = true;
    this.jpush.enabled = true;
    this.mqtt.enabled = true;
  }


  /** build push message.
  @return {Object} push message object. Can be used in {@link KiiTopic#sendMessage()}
   */

  KiiPushMessageBuilder.prototype.build = function() {
    var ret;
    ret = {};
    ret.data = this.data;
    ret.gcm = this.gcm;
    ret.apns = this.apns;
    ret.jpush = this.jpush;
    ret.mqtt = this.mqtt;
    if (this.sendToDevelopment != null) {
      ret.sendToDevelopment = this.sendToDevelopment;
    }
    if (this.sendToProduction != null) {
      ret.sendToProduction = this.sendToProduction;
    }
    return ret;
  };


  /** Indicate whether send this message to development environment.
  If this method is not called, true will be applied as default.
  @param {boolean} flag indicate whether send this message to development env.
  @return builder instance.
   */

  KiiPushMessageBuilder.prototype.setSendToDevelopment = function(flag) {
    this.sendToDevelopment = flag;
    return this;
  };


  /** Indicate whether send this message to production environment.
  If this method is not called, true will be applied as default.
  @param {boolean} flag indicate whether send this message to production env.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.setSendToProduction = function(flag) {
    this.sendToProduction = flag;
    return this;
  };


  /** Enable/ Disable message distribution via GCM.
  If this method is not called, true will be applied as default.
  @param {boolean} enable flag indicate whether distribute this message to GCM subscribers.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.enableGcm = function(enable) {
    this.gcm.enabled = enable;
    return this;
  };


  /** Enable/ Disable message distribution via APNS.
  If this method is not called, true will be applied as default.
  @param {boolean} enable flag indicate whether distribute this message to APNS subscribers.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.enableApns = function(enable) {
    this.apns.enabled = enable;
    return this;
  };


  /** Enable/ Disable message distribution via JPush.
  If this method is not called, true will be applied as default.
  @param {boolean} enable flag indicate whether distribute this message to JPush subscribers.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.enableJpush = function(enable) {
    this.jpush.enabled = enable;
    return this;
  };


  /** Enable/ Disable message distribution via MQTT.
  If this method is not called, true will be applied as default.
  @param {boolean} enable flag indicate whether distribute this message to MQTT subscribers.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.enableMqtt = function(enable) {
    this.mqtt.enabled = enable;
    return this;
  };


  /** Set specific data for GCM subscribers.
  If this method is not called, no specific data is not applied
  and data passed to the constructor would be sent to subscribers.
  @param {Object} data specific data applied to only GCM subscribers.
  Contents should be JSON Object with only one-level of nesting,
  and only strings in values
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.gcmData = function(data) {
    this.gcm.data = data;
    return this;
  };


  /** Set collapse_key for GCM subscribers.
  If this method is not called, no collapse_key is applied.
  For details please refer to GCM document of collapse_key.
  @param {String} collapseKey
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.gcmCollapseKey = function(collapseKey) {
    this.gcm.collapseKey = collapseKey;
    return this;
  };


  /** Set delay_while_idle for GCM subscribers.
  If this method is not called, no delay_while_idle is applied.
  For details please refer to GCM document of delay_while_idle.
  @param {boolean} delayWhileIdle
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.gcmDelayWhileIdle = function(delayWhileIdle) {
    this.gcm.delayWhileIdle = delayWhileIdle;
    return this;
  };


  /** Set time_to_live for GCM subscribers.
  If this method is not called, no time_to_live is applied.
  For details please refer to GCM document of time_to_live.
  @param {Number} timeToLive
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.gcmTimeToLive = function(timeToLive) {
    this.gcm.timeToLive = timeToLive;
    return this;
  };


  /** Set restricted_package_name for GCM subscribers.
  If this method is not called, no restricted_package_name is applied.
  For details please refer to GCM document of restricted_package_name.
  @param {String} restrictedPackageName.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.gcmRestrictedPackageName = function(restrictedPackageName) {
    this.gcm.restrictedPackageName = restrictedPackageName;
    return this;
  };


  /** Set specific data for APNS subscribers.
  If this method is not called, no specific data is not applied
  and data passed to the constructor would be sent to subscribers.
  @param {Object} data specific data applied to only APNS subscribers.
  Contents should be JSON Object with only one-level of nesting,
  and only strings, integers, booleans or doubles in the values.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.apnsData = function(data) {
    this.apns.data = data;
    return this;
  };


  /** Set alert for APNS subscribers.
  If this method is not called, no alert is applied.
  For details please refer to APNS document of alert.
  @param {Object} alert alert object
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.apnsAlert = function(alert) {
    this.apns.alert = alert;
    return this;
  };


  /** Set sound for APNS subscribers.
  If this method is not called, no sound is applied.
  For details please refer to APNS document of sound.
  @param {String} sound
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.apnsSound = function(sound) {
    this.apns.sound = sound;
    return this;
  };


  /** Set badge for APNS subscribers.
  If this method is not called, no badge is applied.
  For details please refer to APNS document of badge.
  @param {Number} badge
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.apnsBadge = function(badge) {
    this.apns.badge = badge;
    return this;
  };


  /** Set content-available for APNS subscribers.
  If this method is not called, no content-available is applied.
  @param {Number} contentAvailable If eqaul or less than 0
  or this method is not invoked,
  content-available payload is not delivered.
  Otherwise, content-available=1 payload is delivered.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.apnsContentAvailable = function(contentAvailable) {
    if (contentAvailable > 0) {
      this.apns.contentAvailable = true;
    } else {
      delete this.apns.contentAvailable;
    }
    return this;
  };


  /** Set category for APNS subscribers.
  If this method is not called, no category is applied.
  For details please refer to APNS document of category.
  @param {String} category
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.apnsCategory = function(category) {
    this.apns.category = category;
    return this;
  };


  /** Set mutable-content for APNS subscribers.
  If this method is not called, no mutable-content is applied.
  @param {Number} mutableContent If equal or less than 0
  or this method is not invoked,
  mutable-content payload is not delivered.
  Otherwise, mutable-content=1 payload is delivered.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.apnsMutableContent = function(mutableContent) {
    if (mutableContent > 0) {
      this.apns.mutableContent = true;
    } else {
      delete this.apns.mutableContent;
    }
    return this;
  };


  /** Set specific data for JPush subscribers.
  If this method is not called, no specific data is not applied
  and data passed to the constructor would be sent to subscribers.
  @param {Object} data specific data applied to only JPush subscribers.
  Contents should be JSON Object with only one-level of nesting,
  and only strings, integers, booleans or doubles in the values.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.jpushData = function(data) {
    this.jpush.data = data;
    return this;
  };


  /** Set specific data for MQTT subscribers.
  If this method is not called, no specific data is not applied
  and data passed to the constructor would be sent to subscribers.
  @param {Object} data specific data applied to only MQTT subscribers.
  Contents should be JSON Object with only one-level of nesting,
  and only strings in the values.
  @return {Object} builder instance.
   */

  KiiPushMessageBuilder.prototype.mqttData = function(data) {
    this.mqtt.data = data;
    return this;
  };

  return KiiPushMessageBuilder;

})();


/**
@class Represents a KiiPushSubscription.
@exports root.KiiPushSubscription as KiiPushSubscription
 */

root.KiiPushSubscription = (function() {
  KiiPushSubscription.prototype.getSubscriber = function() {
    return this._subscriber;
  };

  function KiiPushSubscription(_subscriber) {
    this._subscriber = _subscriber;
    this._setAuthToken = __bind(this._setAuthToken, this);
    this._getRequestHTTPURI = __bind(this._getRequestHTTPURI, this);
    this._validateTarget = __bind(this._validateTarget, this);
    this.isSubscribed = __bind(this.isSubscribed, this);
    this.unsubscribe = __bind(this.unsubscribe, this);
    this.subscribe = __bind(this.subscribe, this);
  }


  /** Subscribe to bucket or topic.
  @param {Object} target to be subscribed. KiiBucket or KiiTopic instance.
  @param {Object} [callbacks] object contains callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: KiiPushSubscription object
  <br>2nd argument: target object
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is a KiiPushSubscription instance.</li>
          <li>params[1] is the KiiTopic instance to subscribe.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiPushSubscription instance.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var topic = Kii.topicWithName("myAppTopic");
  var user = KiiUser.getCurrentUser();
  user.pushSubscription().subscribe(topic, {
      success: function(subscription, topic) {
          // Succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  var topic = Kii.topicWithName("myAppTopic");
  var user = KiiUser.getCurrentUser();
  user.pushSubscription().subscribe(topic).then(
      function(params) {
          var subscription = params[0];
          var topic = params[1];
          // Succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiPushSubscription.prototype.subscribe = function(target, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var requestUri, sendCallbacks, wrapper;
        if (!_this._validateTarget(target)) {
          if (callbacks != null) {
            callbacks.failure(root.InvalidArgumentException("target is invalid"));
          }
          reject(KiiUtilities._Error(root.InvalidArgumentException("target is invalid"), _this));
          return;
        }
        requestUri = _this._getRequestHTTPURI(target);
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('PUT', requestUri);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this, target);
            }
            return resolve([_this, target]);
          },
          failure: function() {
            var errObj, errString;
            errString = wrapper.getErrorString("subscribe");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };


  /** Unsubscribe to bucket or topic.
  @param {Object} target to be unsubscribed. KiiBucket or KiiTopic instance.
  @param {Object} [callbacks] object contains callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: KiiPushSubscription object
  <br>2nd argument: target object
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is a KiiPushSubscription instance.</li>
          <li>params[1] is the KiiTopic instance to unsubscribe.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiPushSubscription instance.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var topic = Kii.topicWithName("myAppTopic");
  var user = KiiUser.getCurrentUser();
  user.pushSubscription().unsubscribe(topic, {
      success: function(subscription, topic) {
          // Succeeded.
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  var topic = Kii.topicWithName("myAppTopic");
  var user = KiiUser.getCurrentUser();
  user.pushSubscription().unsubscribe(topic).then(
      function(params) {
          var subscription = params[0];
          var topic = params[1];
          // Succeeded.
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiPushSubscription.prototype.unsubscribe = function(target, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var requestUri, sendCallbacks, wrapper;
        if (!_this._validateTarget(target)) {
          if (callbacks != null) {
            callbacks.failure(root.InvalidArgumentException("target is invalid"));
          }
          reject(KiiUtilities._Error(root.InvalidArgumentException("target is invalid"), _this));
          return;
        }
        requestUri = _this._getRequestHTTPURI(target);
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('DELETE', requestUri);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this, target);
            }
            return resolve([_this, target]);
          },
          failure: function() {
            var errObj, errString;
            errString = wrapper.getErrorString("unsubscribe");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };


  /** Check subscription of bucket, topic.
  @param {Object} target to check subscription. KiiBucket or KiiTopic instance.
  @param {Object} [callbacks] object contains callback functions.
  @param {Function} callbacks.success callback called when operation succeeded.
  <br>1st argument: KiiPushSubscription object
  <br>2nd argument: target object
  <br>3rd argument: flag indicate whether the target object is subscirbed.
  @param {Function} callbacks.failure callback called when operation failed.
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(params). params is an Array instance.
        <ul>
          <li>params[0] is a KiiPushSubscription instance.</li>
          <li>params[1] is the KiiTopic instance to subscribe.</li>
          <li>params[2] is Boolean value. true if subscirbed, otherwise false.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is a KiiPushSubscription instance.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
  // example to use callbacks directly
  var topic = Kii.topicWithName("myAppTopic");
  var user = KiiUser.getCurrentUser();
  user.pushSubscription().isSubscribed(topic, {
      success: function(subscription, topic, isSubscribed) {
          // Succeeded.
          if (isSubscribed) {
              // The topic is subscribed by current user.
          } else {
              // The topic is not subscribed by current user.
          }
      },
      failure: function(error) {
          // Handle error.
      }
  });
  
  // example to use Promise
  var topic = Kii.topicWithName("myAppTopic");
  var user = KiiUser.getCurrentUser();
  user.pushSubscription().isSubscribed(topic).then(
      function(params) {
          // Succeeded.
          var subscription = params[0];
          var topic = params[1];
          var isSubscribed = params[2];
          if (isSubscribed) {
              // The topic is subscribed by current user.
          } else {
              // The topic is not subscribed by current user.
          }
      },
      function(error) {
          // Handle error.
      }
  );
   */

  KiiPushSubscription.prototype.isSubscribed = function(target, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var requestUri, sendCallbacks, wrapper;
        if (!_this._validateTarget(target)) {
          if (callbacks != null) {
            callbacks.failure(root.InvalidArgumentException("target is invalid"));
          }
          reject(KiiUtilities._Error(root.InvalidArgumentException("target is invalid"), _this));
          return;
        }
        requestUri = _this._getRequestHTTPURI(target);
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('GET', requestUri);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this, target, true);
            }
            return resolve([_this, target, true]);
          },
          failure: function() {
            var errObj, errString, errorCode;
            errorCode = wrapper.getErrorCode();
            if (errorCode === "FILTER_NOT_FOUND" || errorCode === "PUSH_SUBSCRIPTION_NOT_FOUND") {
              if (callbacks != null) {
                callbacks.success(_this, target, false);
              }
              return resolve([_this, target, false]);
            } else {
              errString = wrapper.getErrorString("Check is subscribed");
              errObj = KiiUtilities._Error(errString, _this);
              if (callbacks != null) {
                callbacks.failure(errObj);
              }
              return reject(errObj);
            }
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };

  KiiPushSubscription.prototype._validateTarget = function(target) {
    return (target != null) && (target instanceof root.KiiBucket || target instanceof root.KiiTopic);
  };

  KiiPushSubscription.prototype._getRequestHTTPURI = function(target) {
    var requestUri;
    if (target instanceof root.KiiBucket) {
      return requestUri = "" + (target._getHttpUri()) + "/filters/all/push/subscriptions/" + (this._subscriber._getSubscriberPath());
    } else if (target instanceof root.KiiTopic) {
      return requestUri = "" + (target._getHttpUri()) + "/push/subscriptions/" + (this._subscriber._getSubscriberPath());
    }
  };

  KiiPushSubscription.prototype._setAuthToken = function(wrapper) {
    return wrapper.setCurrentUserToken();
  };

  return KiiPushSubscription;

})();

root.KiiThingWithToken = (function(_super) {
  __extends(KiiThingWithToken, _super);

  function KiiThingWithToken(fields, thingID, vendorThingID, _adminToken) {
    this._adminToken = _adminToken;
    this._getIdentifier = __bind(this._getIdentifier, this);
    this.updatePassword = __bind(this.updatePassword, this);
    this.topicWithName = __bind(this.topicWithName, this);
    this.bucketWithName = __bind(this.bucketWithName, this);
    this.pushSubscription = __bind(this.pushSubscription, this);
    this._setAuthToken = __bind(this._setAuthToken, this);
    KiiThingWithToken.__super__.constructor.call(this, fields);
    if (thingID != null) {
      this._thingID = thingID;
    }
    if (vendorThingID != null) {
      this._vendorThingID = vendorThingID;
    }
  }

  KiiThingWithToken.register = function(fields, callbacks, accessToken) {
    return new Promise(function(resolve, reject) {
      var sendCallbacks, wrapper;
      wrapper = KiiXHRWrapperFactory.createXHRWrapper('POST', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things");
      wrapper.setKiiHeaders();
      wrapper.setContentType("application/vnd.kii.ThingRegistrationAndAuthorizationRequest+json");
      wrapper.setAuthToken(accessToken);
      sendCallbacks = {
        success: function() {
          var respJson, thing;
          respJson = JSON.parse(decodeURIComponent(wrapper.xhr.responseText));
          thing = new root.KiiThingWithToken(respJson, null, null, accessToken);
          if (callbacks != null) {
            callbacks.success(thing);
          }
          return resolve(thing);
        },
        failure: function() {
          var errObj, errString;
          errString = wrapper.getErrorString("register thing");
          errObj = KiiUtilities._Error(errString);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        }
      };
      return wrapper.sendData(JSON.stringify(fields), sendCallbacks);
    });
  };

  KiiThingWithToken.registerOwnerWithThingID = function(thingID, owner, callbacks, accessToken) {
    return root.KiiThingWithToken._registerOwnerWithIdentifier(thingID, owner, callbacks, accessToken);
  };

  KiiThingWithToken.registerOwnerWithVendorThingID = function(vendorThingID, owner, callbacks, accessToken) {
    return root.KiiThingWithToken._registerOwnerWithIdentifier("VENDOR_THING_ID:" + vendorThingID, owner, callbacks, accessToken);
  };

  KiiThingWithToken._registerOwnerWithIdentifier = function(identifier, owner, callbacks, accessToken) {
    return new Promise(function(resolve, reject) {
      var oid, sendCallbacks, type, wrapper;
      if (owner instanceof root.KiiUser) {
        oid = owner.getID();
        type = 'user';
      } else if (owner instanceof root.KiiGroup) {
        oid = owner.getID();
        type = 'group';
      } else {
        throw 'owner should be instance of user or group';
      }
      if (oid == null) {
        throw 'owner instance does not have id';
      }
      wrapper = KiiXHRWrapperFactory.createXHRWrapper('PUT', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + identifier + "/ownership/" + type + ":" + oid);
      wrapper.setKiiHeaders();
      wrapper.setAuthToken(accessToken);
      sendCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success(owner);
          }
          return resolve([owner]);
        },
        failure: function() {
          var errObj, errString;
          errString = wrapper.getErrorString("register owner");
          errObj = KiiUtilities._Error(errString);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        }
      };
      return wrapper.send(sendCallbacks);
    });
  };

  KiiThingWithToken.loadWithVendorThingID = function(vendorThingID, callbacks, adminToken) {
    var thingAdmin;
    thingAdmin = new root.KiiThingWithToken(null, null, vendorThingID, adminToken);
    return thingAdmin.refresh(callbacks);
  };

  KiiThingWithToken.loadWithThingID = function(thingID, callbacks, adminToken) {
    var thingAdmin;
    thingAdmin = new root.KiiThingWithToken(null, thingID, null, adminToken);
    return thingAdmin.refresh(callbacks);
  };

  KiiThingWithToken.prototype._setAuthToken = function(wrapper) {
    return wrapper.setAuthToken(this._adminToken);
  };

  KiiThingWithToken.prototype.pushSubscription = function() {
    return new root.KiiPushSubscriptionWithToken(this, this._adminToken);
  };

  KiiThingWithToken.prototype.bucketWithName = function(bucketName) {
    return new root.KiiBucketWithToken(bucketName, this, this._adminToken);
  };

  KiiThingWithToken.prototype.encryptedBucketWithName = function(bucketName) {
    return new root.KiiEncryptedBucketWithToken(bucketName, this, this._adminToken);
  };

  KiiThingWithToken.prototype.topicWithName = function(topicName) {
    if (typeof topicName !== "string" || topicName === "") {
      throw new root.InvalidArgumentException('topicName should not null or empty');
    }
    return new root.KiiTopicWithToken(this._getHttpURI(), topicName, this._adminToken);
  };

  KiiThingWithToken.prototype.updatePassword = function(newPassword, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, requestBody, sendCallbacks, wrapper;
        if (!KiiUtilities._isNonEmptyString(newPassword)) {
          errObj = KiiUtilities._Error("newPassword is null or empty");
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
          return;
        }
        requestBody = {
          newPassword: newPassword
        };
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('PUT', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/things/" + (_this._getIdentifier()) + "/password");
        wrapper.setKiiHeaders();
        wrapper.setAuthToken(_this._adminToken);
        wrapper.setContentType("application/vnd.kii.ChangeThingPasswordRequest+json");
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success(_this);
            }
            return resolve(_this);
          },
          failure: function() {
            var errString;
            errString = wrapper.getErrorString("changing thing password");
            errObj = KiiUtilities._Error(errString);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.sendData(JSON.stringify(requestBody), sendCallbacks);
      };
    })(this));
  };

  KiiThingWithToken.prototype._getIdentifier = function() {
    if (this._thingID != null) {
      return this._thingID;
    }
    if (this._vendorThingID != null) {
      return "VENDOR_THING_ID:" + this._vendorThingID;
    }
    return null;
  };

  KiiThingWithToken.thingWithID = function(thingID, adminToken) {
    var thingAdmin;
    thingAdmin = new root.KiiThingWithToken(null, thingID, null, adminToken);
    return thingAdmin;
  };

  return KiiThingWithToken;

})(root.KiiThing);

root.KiiTopicWithToken = (function(_super) {
  __extends(KiiTopicWithToken, _super);

  function KiiTopicWithToken(parentUri, topicName, _authToken) {
    this._authToken = _authToken;
    this.acl = __bind(this.acl, this);
    this._setAuthToken = __bind(this._setAuthToken, this);
    KiiTopicWithToken.__super__.constructor.call(this, parentUri, topicName);
  }

  KiiTopicWithToken.prototype._setAuthToken = function(wrapper) {
    return wrapper.setAuthToken(this._authToken);
  };

  KiiTopicWithToken.prototype.acl = function() {
    return new root.KiiACLWithToken(this, this._authToken);
  };

  return KiiTopicWithToken;

})(root.KiiTopic);

root.KiiPushSubscriptionWithToken = (function(_super) {
  __extends(KiiPushSubscriptionWithToken, _super);

  function KiiPushSubscriptionWithToken(subscriber, _authToken) {
    this._authToken = _authToken;
    this._setAuthToken = __bind(this._setAuthToken, this);
    KiiPushSubscriptionWithToken.__super__.constructor.call(this, subscriber);
  }

  KiiPushSubscriptionWithToken.prototype._setAuthToken = function(wrapper) {
    return wrapper.setAuthToken(this._authToken);
  };

  return KiiPushSubscriptionWithToken;

})(root.KiiPushSubscription);

root.KiiAnalyticsSite = {
  US: "https://api.kii.com/api",
  JP: "https://api-jp.kii.com/api",
  CN: "https://api-cn2.kii.com/api",
  SG: "https://api-sg.kii.com/api",
  CN3: "https://api-cn3.kii.com/api"
};


/**
    @class The main SDK class
    @exports root.KiiAnalytics as KiiAnalytics

    This class must be initialized before any KiiAnalytics SDK functions are performed. This class also allows the application to make some high-level user calls and access some application-wide data at any time using static methods.
 */

root.KiiAnalytics = (function() {
  var _instance;

  function KiiAnalytics() {}

  _instance = null;

  KiiAnalytics.getBaseURL = function() {
    return _instance._baseURL;
  };


  /**
      Retrieve the current app ID
      @returns {String} The current app ID
   */

  KiiAnalytics.getAppID = function() {
    return _instance._appID;
  };


  /**
      Retrieve the current app key
      @returns {String} The current app key
   */

  KiiAnalytics.getAppKey = function() {
    return _instance._appKey;
  };

  KiiAnalytics.getAppKey = function() {
    return _instance._appKey;
  };


  /**
      Get the deviceId. If deviceId has not specified while initialization, it returns SDK generated deviceId.It is recommended to retrieve the deviceId and store it to identify the device properly.
      @returns {String} deviceId.
   */

  KiiAnalytics.getDeviceId = function() {
    return _instance._deviceId;
  };


  /**
      Is the SDK printing logs to the console?
      @returns {Boolean} True if printing logs, false otherwise
   */

  KiiAnalytics.isLogging = function() {
    return _instance._logging;
  };


  /**
      Set the logging status of the SDK
  
      Helpful for development - we strongly advice you turn off logging for any production code.
      @param Boolean True if logs should be printed, false otherwise
      @example
      KiiAnalytics.setLogging(true);
   */

  KiiAnalytics.setLogging = function(logging) {
    root.KiiAnalytics.logger("Setting logging: " + logging);
    return _instance._logging = logging;
  };


  /** @deprecated Use {@link Kii.initializeWithSite} instead. Initialize the Kii SDK with a specific URL
  
  Should be the first Kii SDK action your application makes
  @param String appID The application ID found in your Kii developer console
  @param String appKey The application key found in your Kii developer console
  @param KiiAnalyticsSite site Can be one of the constants KiiAnalyticsSite.US, KiiAnalyticsSite.JP, KiiAnalyticsSite.CN, KiiAnalyticsSite.CN3 or KiiAnalyticsSite.SG depending on your location.
  @param deviceid If deviceId is not provided, SDK generates a new deviceId and use it when upload events.deviceId can be retrieved by {@link KiiAnalytics.getDeviceId()}.It is recommended to retrieve the deviceId and store it to identify the device properly.
  @example
  // initialize without deviceId
  Kii.initializeWithSite("my-app-id", "my-app-key", KiiAnalyticsSite.JP);
  // initialize with deviceId
  Kii.initializeWithSite("my-app-id", "my-app-key", KiiAnalyticsSite.JP, "my-device-id");
   */

  KiiAnalytics.initializeWithSite = function(appID, appKey, site, deviceId) {
    return root.KiiAnalytics._initializeWithSite(appID, appKey, site, deviceId);
  };


  /** @deprecated Use {@link Kii.initialize} instead. Initialize the KiiAnalytics SDK
  
  Should be the first KiiAnalytics SDK action your application makes
  @param String appID The application ID found in your Kii developer console
  @param String appKey The application key found in your Kii developer console
  @param deviceid If deviceId is not provided, SDK generates a new deviceId and use it when upload events. deviceId can be retrieved by {@link KiiAnalytics.getDeviceId()}.It is recommended to retrieve the deviceId and store it to identify the device properly.
  @example
  // initialize without deviceId
  Kii.initializeWithSite("my-app-id", "my-app-key", KiiAnalyticsSite.JP);
  // initialize with deviceId
  Kii.initializeWithSite("my-app-id", "my-app-key", KiiAnalyticsSite.JP, "my-device-id");
   */

  KiiAnalytics.initialize = function(appID, appKey, deviceId) {
    return root.KiiAnalytics._initializeWithSite(appID, appKey, root.KiiAnalyticsSite.US, deviceId);
  };

  KiiAnalytics._initializeWithSite = function(appID, appKey, site, deviceId) {
    _instance = new _KiiAnalytics(appID, appKey, site, deviceId);
    if ((deviceId != null ? deviceId.length : void 0) > 0 && _instance._deviceId !== deviceId) {
      _instance._deviceId = deviceId;
    }
    return root.KiiAnalytics.logger("Initialized " + appID + ", " + appKey + ", " + site);
  };

  KiiAnalytics.error = function(message) {
    return console.log("KiiAnalytics SDK Error => " + message);
  };


  /**
      Utilize the KiiAnalytics logger to track SDK-specific actions
  
      Helpful for development - we strongly advice you turn off logging for any production code.
      @param String message The message to print to console.log in your browser
      @example
      KiiAnalytics.logger("My message");
   */

  KiiAnalytics.logger = function(message) {
    if (_instance._logging) {
      return console.log("KiiAnalytics => " + message);
    }
  };


  /** Log a single event to be uploaded to KiiAnalytics
  
  Use this method if you'd like to track an event by name only. If you'd like to track other attributes/dimensions, please use KiiAnalytics.trackEventWithExtras(eventName, parameters)
  @param {String} eventName A string representing the event name for later tracking
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(). No parameters. </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
   */

  KiiAnalytics.trackEvent = function(eventName) {
    return root.KiiAnalytics.trackEventWithExtras(eventName, null);
  };


  /** Log a single event to be uploaded to KiiAnalytics
  
  Use this method if you'd like to track an event by name and add extra information to the event.
  @param {String} eventName A string representing the event name for later tracking
  @param {Object} extras A dictionary of JSON-encodable key/value pairs to be attached to the event.
  Key must follow the pattern "^[a-zA-Z][a-zA-Z0-9_]{0,63}$".Supported value type is string, number, boolean and array.
  Empty string or empty array will be considered as invalid.Type of array elements must be string, number or boolean.
  If any key/value pair is invalid, it will be ignored and not sent to the KiiCloud.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(). No parameters. </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
   */

  KiiAnalytics.trackEventWithExtras = function(eventName, extras) {
    return root.KiiAnalytics.trackEventWithExtrasAndCallbacks(eventName, extras, null);
  };


  /** Log a single event to be uploaded to KiiAnalytics
  
  Use this method if you'd like to track an event asynchronously by name and add extra information to the event.
  
  @param {String} eventName A string representing the event name for later tracking
  @param {Object} extras A dictionary of JSON-encodable key/value pairs to be attached to the event.
  Key must follow the pattern "^[a-zA-Z][a-zA-Z0-9_]{0,63}$".Supported value type is string, number, boolean and array.
  Empty string or empty array will be considered as invalid.Type of array elements must be string, number or boolean.
  If any key/value pair is invalid, it will be ignored and not sent to the KiiCloud.
  @param {Object} callbacks An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful log request
  @param {Method} callbacks.failure The callback method to call on a failed log request
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(). No parameters. </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
   */

  KiiAnalytics.trackEventWithExtrasAndCallbacks = function(eventName, extras, callbacks) {
    return new Promise(function(resolve, reject) {
      var trackEventCallbacks;
      trackEventCallbacks = {
        success: function() {
          if (callbacks != null) {
            callbacks.success();
          }
          return resolve();
        },
        failure: function() {
          if (callbacks != null) {
            callbacks.failure.apply(callbacks, arguments);
          }
          return reject(KiiUtilities._Error(arguments[0]));
        }
      };
      return KiiAnalytics._trackEventWithExtrasAndCallbacks(eventName, extras, trackEventCallbacks);
    });
  };

  KiiAnalytics._trackEventWithExtrasAndCallbacks = function(eventName, extras, callbacks) {
    var isValidArrayContents, isValidKey, isValidValue, key, keyPattern, now, payload, trackingCallbacks, uri, value, wrapper;
    now = Math.round((new Date()).getTime());
    keyPattern = '^[a-zA-Z][a-zA-Z0-9_]{0,63}$';
    root.KiiAnalytics.logger("deviceId = " + _instance._deviceId);
    payload = {
      _triggeredAt: now,
      _uploadedAt: now,
      _deviceID: _instance._deviceId,
      _type: eventName
    };
    isValidKey = function(key) {
      return (key != null) && (key.match(keyPattern) != null);
    };
    isValidArrayContents = function(array) {
      var type, val, _i, _len;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        val = array[_i];
        type = typeof val;
        if (type !== 'string' && type !== 'boolean' && type !== 'number') {
          return false;
        }
        if (type === 'string') {
          if (val.length <= 0) {
            return false;
          }
        } else if (type === 'number') {
          if (!((isFinite(val)) && (!isNaN(val)))) {
            return false;
          }
        }
      }
      return true;
    };
    isValidValue = function(value) {
      var type;
      type = typeof value;
      if (type === 'string') {
        return value.length > 0;
      } else if (type === 'number') {
        return (isFinite(value)) && (!isNaN(value));
      } else if (type === 'object') {
        return value instanceof Array && value.length > 0 && isValidArrayContents(value);
      } else if (type === 'boolean') {
        return true;
      } else {
        return false;
      }
    };
    for (key in extras) {
      value = extras[key];
      if (isValidKey(key) && isValidValue(value)) {
        payload[key] = value;
      } else {
        root.KiiAnalytics.logger("ignoring invalid key/value pair, key:" + key + " value:" + value);
      }
    }
    uri = "" + (KiiAnalytics.getBaseURL()) + "/apps/" + (KiiAnalytics.getAppID()) + "/event";
    wrapper = KiiAnalyticsXHRWrapperFactory.createXHRWrapper('POST', uri);
    wrapper.setKiiHeaders();
    wrapper.setContentType("application/vnd.kii.Event+json");
    trackingCallbacks = {
      success: function() {
        return callbacks != null ? callbacks.success() : void 0;
      },
      failure: function() {
        var errorString;
        errorString = wrapper.getErrorString("track event");
        return callbacks != null ? callbacks.failure(errorString, wrapper.xhr.status) : void 0;
      }
    };
    return wrapper.sendData(JSON.stringify(payload), trackingCallbacks);
  };


  /** @deprecated
      Set a custom API endpoint URL
      @param String url A string containing the desired endpoint
   */

  KiiAnalytics.setBaseURL = function(url) {
    root.KiiAnalytics.logger("Setting base URL: " + url);
    return _instance._baseURL = url;
  };


  /** @deprecated Use {@link Kii.getSDKVersion} instead. Kii Analytics SDK Version Number
      @returns {String} current version number of the SDK
   */

  KiiAnalytics.getSDKVersion = function() {
    return root.Kii.getSDKVersion();
  };

  KiiAnalytics._setHttpRequestType = function(requestType) {
    root.KiiAnalytics.logger("Set http request as " + requestType);
    return _instance._httpRequestType = requestType;
  };

  KiiAnalytics._getHttpRequestType = function() {
    return _instance._httpRequestType;
  };

  return KiiAnalytics;

})();

_KiiAnalytics = (function() {
  _KiiAnalytics.prototype._httpRequestType = null;

  function _KiiAnalytics(appID, appKey, site, deviceId) {
    if (site == null) {
      site = root.KiiAnalyticsSite.US;
    }
    if (!!!deviceId) {
      deviceId = _KiiAnalytics.generateDeviceId();
    }
    this._appKey = appKey;
    this._appID = appID;
    this._baseURL = site;
    this._deviceId = deviceId;
  }

  _KiiAnalytics.generateDeviceId = function() {
    var _p8;
    _p8 = function(s) {
      var p;
      p = (Math.random().toString(16) + "000000000").substr(2, 8);
      if (s) {
        return "-" + p.substr(0, 4) + "-" + p.substr(4, 4);
      } else {
        return p;
      }
    };
    return _p8() + _p8(true) + _p8(true) + _p8();
  };

  return _KiiAnalytics;

})();

KiiAnalyticsXHRWrapper = (function(_super) {
  __extends(KiiAnalyticsXHRWrapper, _super);

  function KiiAnalyticsXHRWrapper() {
    return KiiAnalyticsXHRWrapper.__super__.constructor.apply(this, arguments);
  }

  KiiAnalyticsXHRWrapper.prototype.getAppID = function() {
    return root.KiiAnalytics.getAppID();
  };

  KiiAnalyticsXHRWrapper.prototype.getAppKey = function() {
    return root.KiiAnalytics.getAppKey();
  };

  KiiAnalyticsXHRWrapper.prototype.getLogger = function() {
    return root.KiiAnalytics.logger();
  };

  KiiAnalyticsXHRWrapper.prototype.getCurrentUser = function() {
    return null;
  };

  return KiiAnalyticsXHRWrapper;

})(KiiXHRWrapper);

KiiAnalyticsJQXHRWrapper = (function(_super) {
  __extends(KiiAnalyticsJQXHRWrapper, _super);

  function KiiAnalyticsJQXHRWrapper() {
    return KiiAnalyticsJQXHRWrapper.__super__.constructor.apply(this, arguments);
  }

  KiiAnalyticsJQXHRWrapper.prototype.getAppID = function() {
    return root.KiiAnalytics.getAppID();
  };

  KiiAnalyticsJQXHRWrapper.prototype.getAppKey = function() {
    return root.KiiAnalytics.getAppKey();
  };

  KiiAnalyticsJQXHRWrapper.prototype.getLogger = function() {
    return root.KiiAnalytics.logger();
  };

  KiiAnalyticsJQXHRWrapper.prototype.getCurrentUser = function() {
    return null;
  };

  return KiiAnalyticsJQXHRWrapper;

})(KiiJQXHRWrapper);

KiiAnalyticsTiXHRWrapper = (function(_super) {
  __extends(KiiAnalyticsTiXHRWrapper, _super);

  function KiiAnalyticsTiXHRWrapper() {
    return KiiAnalyticsTiXHRWrapper.__super__.constructor.apply(this, arguments);
  }

  KiiAnalyticsTiXHRWrapper.prototype.getAppID = function() {
    return root.KiiAnalytics.getAppID();
  };

  KiiAnalyticsTiXHRWrapper.prototype.getAppKey = function() {
    return root.KiiAnalytics.getAppKey();
  };

  KiiAnalyticsTiXHRWrapper.prototype.getLogger = function() {
    return root.KiiAnalytics.logger();
  };

  KiiAnalyticsTiXHRWrapper.prototype.getCurrentUser = function() {
    return null;
  };

  return KiiAnalyticsTiXHRWrapper;

})(KiiTiXHRWrapper);

KiiAnalyticsXHRWrapperFactory = (function() {
  function KiiAnalyticsXHRWrapperFactory() {}

  KiiAnalyticsXHRWrapperFactory.createXHRWrapper = function(method, url) {
    var wrapper;
    wrapper = null;
    if (root.KiiAnalytics._getHttpRequestType() === null) {
      if (typeof jQuery !== 'undefined') {
        root.KiiAnalytics.logger("Use jQuery");
        wrapper = new KiiAnalyticsJQXHRWrapper(method, url);
      } else if (typeof XMLHttpRequest !== 'undefined') {
        root.KiiAnalytics.logger("Use XMLHttpRequest");
        wrapper = new KiiAnalyticsXHRWrapper(method, url);
      } else if (typeof Titanium !== 'undefined') {
        root.KiiAnalytics.logger("Use Titanium");
        wrapper = new KiiAnalyticsTiXHRWrapper(method, url);
      }
    } else {
      root.KiiAnalytics.logger("Use http request backdoor");
      if (root.KiiAnalytics._getHttpRequestType() === root._KiiHttpRequestType.jQuery) {
        root.KiiAnalytics.logger("Use jQuery");
        wrapper = new KiiAnalyticsJQXHRWrapper(method, url);
      } else if (root.KiiAnalytics._getHttpRequestType() === root._KiiHttpRequestType.XMLHttpRequest) {
        root.Kii.logger("Use XMLHttpRequest");
        wrapper = new KiiAnalyticsXHRWrapper(method, url);
      } else if (root.KiiAnalytics._getHttpRequestType() === root._KiiHttpRequestType.Titanium) {
        root.Kii.logger("Use Titanium");
        wrapper = new KiiAnalyticsTiXHRWrapper(method, url);
      }
    }
    return wrapper;
  };

  return KiiAnalyticsXHRWrapperFactory;

})();

root.KiiSCNGoogle = (function(_super) {
  __extends(KiiSCNGoogle, _super);

  function KiiSCNGoogle() {
    this._unlinkFromCurrentUser = __bind(this._unlinkFromCurrentUser, this);
    this._linkWithCurrentUser = __bind(this._linkWithCurrentUser, this);
    this._logOut = __bind(this._logOut, this);
    this._logIn = __bind(this._logIn, this);
    this._getAccessToken = __bind(this._getAccessToken, this);
    this._createTokenObject = __bind(this._createTokenObject, this);
    this._setup = __bind(this._setup, this);
    KiiSCNGoogle.__super__.constructor.call(this, root.KiiSocialNetworkName.GOOGLEPLUS);
  }

  KiiSCNGoogle.prototype._setup = function(_key, _secret, _extras) {
    this._key = _key;
    this._secret = _secret;
    this._extras = _extras;
    return KiiSCNGoogle.__super__._setup.call(this, this._key, this._secret, this._extras);
  };

  KiiSCNGoogle.prototype._createTokenObject = function(options, data) {
    var tokenObject;
    tokenObject = {
      "access_token": options.access_token
    };
    if ((data != null) && (data.new_user_created != null)) {
      tokenObject["kii_new_user"] = data.new_user_created;
    }
    return tokenObject;
  };

  KiiSCNGoogle.prototype._getAccessToken = function(options) {
    return options.access_token;
  };

  KiiSCNGoogle.prototype._logIn = function(options, callbacks) {
    var requestData;
    root.Kii.logger("should auth google");
    root.Kii.logger("Checking options");
    if ((options == null) || !options.access_token) {
      throw root.InvalidArgumentException('options.access_token is required');
    }
    if (root.KiiUser.getCurrentUser() != null) {
      root.KiiUser.logOut();
    }
    requestData = {
      "accessToken": options.access_token
    };
    return this._register("google", "application/vnd.kii.AuthTokenGoogleRequest+json", requestData, options, callbacks);
  };

  KiiSCNGoogle.prototype._logOut = function() {
    KiiSCNGoogle.__super__._logOut.apply(this, arguments);
    return root.Kii.logger("Log out google");
  };

  KiiSCNGoogle.prototype._linkWithCurrentUser = function(options, callbacks) {
    var requestData;
    if (root.KiiUser.getCurrentUser() != null) {
      if ((options == null) || !options.access_token) {
        throw root.InvalidArgumentException('options.access_token is required');
      }
      requestData = {
        "accessToken": options.access_token
      };
      return this._link("google", "application/vnd.kii.LinkGoogleRequest+json", requestData, options, callbacks);
    } else if (callbacks != null) {
      return callbacks.failure(null, this._network, "A KiiUser must be logged in before linking to Google");
    }
  };

  KiiSCNGoogle.prototype._unlinkFromCurrentUser = function(callbacks) {
    if (root.KiiUser.getCurrentUser() != null) {
      return this._unlink("google", callbacks);
    } else if (callbacks != null) {
      return callbacks.failure("A KiiUser must be logged in before unlinking from Google");
    }
  };

  return KiiSCNGoogle;

})(root.KiiSocialConnectNetwork);

root.KiiSCNRenRen = (function(_super) {
  __extends(KiiSCNRenRen, _super);

  function KiiSCNRenRen() {
    this._unlinkFromCurrentUser = __bind(this._unlinkFromCurrentUser, this);
    this._linkWithCurrentUser = __bind(this._linkWithCurrentUser, this);
    this._logOut = __bind(this._logOut, this);
    this._logIn = __bind(this._logIn, this);
    this._getAccessToken = __bind(this._getAccessToken, this);
    this._createTokenObject = __bind(this._createTokenObject, this);
    this._setup = __bind(this._setup, this);
    KiiSCNRenRen.__super__.constructor.call(this, root.KiiSocialNetworkName.RENREN);
  }

  KiiSCNRenRen.prototype._setup = function(_key, _secret, _extras) {
    this._key = _key;
    this._secret = _secret;
    this._extras = _extras;
    return KiiSCNRenRen.__super__._setup.call(this, this._key, this._secret, this._extras);
  };

  KiiSCNRenRen.prototype._createTokenObject = function(options, data) {
    var tokenObject;
    tokenObject = {
      "access_token": options.access_token
    };
    if ((data != null) && (data.new_user_created != null)) {
      tokenObject["kii_new_user"] = data.new_user_created;
    }
    return tokenObject;
  };

  KiiSCNRenRen.prototype._getAccessToken = function(options) {
    return options.access_token;
  };

  KiiSCNRenRen.prototype._logIn = function(options, callbacks) {
    var requestData;
    root.Kii.logger("should auth renren");
    root.Kii.logger("Checking options");
    if ((options == null) || !options.access_token) {
      throw root.InvalidArgumentException('options.access_token is required');
    }
    if (root.KiiUser.getCurrentUser() != null) {
      root.KiiUser.logOut();
    }
    requestData = {
      "accessToken": options.access_token
    };
    return this._register("renren", "application/vnd.kii.AuthTokenRenRenRequest+json", requestData, options, callbacks);
  };

  KiiSCNRenRen.prototype._logOut = function() {
    KiiSCNRenRen.__super__._logOut.apply(this, arguments);
    return root.Kii.logger("Log out renren");
  };

  KiiSCNRenRen.prototype._linkWithCurrentUser = function(options, callbacks) {
    var requestData;
    if (root.KiiUser.getCurrentUser() != null) {
      if ((options == null) || !options.access_token) {
        throw root.InvalidArgumentException('options.access_token is required');
      }
      requestData = {
        "accessToken": options.access_token
      };
      return this._link("renren", "application/vnd.kii.LinkRenRenRequest+json", requestData, options, callbacks);
    } else if (callbacks != null) {
      return callbacks.failure(null, this._network, "A KiiUser must be logged in before linking to RenRen");
    }
  };

  KiiSCNRenRen.prototype._unlinkFromCurrentUser = function(callbacks) {
    if (root.KiiUser.getCurrentUser() != null) {
      return this._unlink("renren", callbacks);
    } else if (callbacks != null) {
      return callbacks.failure("A KiiUser must be logged in before unlinking from RenRen");
    }
  };

  return KiiSCNRenRen;

})(root.KiiSocialConnectNetwork);


/**
    @class represents a KiiThingContext object
    @exports root.KiiThingContext as KiiThingContext
 */

root.KiiThingContext = (function() {
  function KiiThingContext(spec) {
    this._objectWithURI = __bind(this._objectWithURI, this);
    this._getToken = __bind(this._getToken, this);
    this.pushInstallation = __bind(this.pushInstallation, this);
    this.getAuthenticatedThing = __bind(this.getAuthenticatedThing, this);
    this.listTopics = __bind(this.listTopics, this);
    this.topicWithName = __bind(this.topicWithName, this);
    this._token = spec.token;
    this._thingId = spec.thingId;
    if (spec.vendorThingID != null) {
      this._vendorThingID = spec.vendorThingID;
    }
  }


  /**
      Creates a reference to a bucket in App scope operated by thing.
      @param String bucketName The name of the bucket the app should create/access
      @returns {KiiBucket} A working KiiBucket object
      @example
      Kii.authenticateAsThing("vendorThingID", "password", {
          success: function(thingAuthContext) {
              var bucket = thingAuthContext.bucketWithName("myAppBucket");
          },
          failure: function(errorString, errorCode) {
              // auth failed.
          }
      });
   */

  KiiThingContext.prototype.bucketWithName = function(bucketName) {
    var adminBucket;
    adminBucket = new root.KiiBucketWithToken(bucketName, null, this._token);
    return adminBucket;
  };


  /**
      Creates a reference to a encrypted bucket in App scope operated by thing.
      <br><br>The bucket will be created/accessed within this app's scope
      @param String bucketName The name of the bucket the app should create/access
      @returns {KiiBucket} A working KiiBucket object
      @example
      Kii.authenticateAsThing("vendorThingID", "password", {
          success: function(thingAuthContext) {
              var bucket = thingAuthContext.encryptedBucketWithName("myAppBucket");
          },
          failure: function(errorString, errorCode) {
              // auth failed.
          }
      });
   */

  KiiThingContext.prototype.encryptedBucketWithName = function(bucketName) {
    var bucket;
    bucket = new root.KiiEncryptedBucketWithToken(bucketName, null, this._token);
    return bucket;
  };


  /**
      Creates a reference to an object operated by thing using object`s URI.
      @param String object URI.
      @returns {KiiObject} A working KiiObject instance
      @throws {InvalidURIException} If the URI is null, empty or does not have correct format.
   */

  KiiThingContext.prototype.objectWithURI = function(objectURI) {
    var object;
    object = this._objectWithURI(objectURI);
    return object;
  };


  /**
  Creates a reference to a topic in App scope operated by thing.
  <br><br>The Topic will be created/accessed within this app's scope
  @param {String} topicName name of the topic. Must be a not empty string.
  @return {KiiTopic} topic instance.
   */

  KiiThingContext.prototype.topicWithName = function(topicName) {
    if (typeof topicName !== "string" || topicName === "") {
      throw new root.InvalidArgumentException('topicName should not null or empty');
    }
    return new root.KiiTopicWithToken("" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()), topicName, this._token);
  };


  /** Gets a list of topics in app scope
  @param {Object} callbacks An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful list request
  @param {Method} callbacks.failure The callback method to call on a failed list request
  @param {String} paginationKey You can specify the pagination key with the nextPaginationKey passed by callbacks.success. If empty string or no string object is provided, this API regards no paginationKey specified.
  @return {Promise} return promise object.
      <ul>
        <li>fulfill callback function: function(params). params is Array instance.
          <ul>
            <li>params[0] is array of KiiTopic instances.</li>
            <li>params[1] is string of nextPaginationKey.</li>
          </ul>
        </li>
        <li>reject callback function: function(error). error is an Error instance.
          <ul>
            <li>error.target is a KiiAppAdminContext instance which this method was called on.</li>
            <li>error.message</li>
          </ul>
        </li>
      </ul>
  @example
  // example to use callbacks directly
  // Assume you already have thingAuthContext instance.
  thingAuthContext.listTopics({
      success: function(topicList, nextPaginationKey) {
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              thingAuthContext.listTopics({
                  success: function(topicList, nextPaginationKey) {...},
                  failure: function(anErrorString) {...}
              }, nextPaginationKey);
          }
      },
      failure: function(anErrorString) {
          // do something with the error response
      }
  });
  
  // example to use Promise
  // Assume you already have thingAuthContext instance.
  thingAuthContext.listTopics().then(
      function(params) {
          var topicList = params[0];
          var nextPaginationKey = params[1];
          // do something with the result
          for(var i=0; i&lt;topicList.length; i++){
              var topic = topicList[i];
          }
          if (nextPaginationKey != null) {
              thingAuthContext.listTopics(null, nextPaginationKey).then(
                  function(params) {...},
                  function(error) {...}
              );
          }
      },
      function(error) {
          // do something with the error response
      }
  );
   */

  KiiThingContext.prototype.listTopics = function(callbacks, paginationKey) {
    return root.Kii._listTopics(callbacks, paginationKey, this);
  };


  /** Gets authenticated KiiThing instance.
  <br>Returned thing instance only have thingID, vendorThingID and accessToken.
  (vendorThingID is not included when you used
  {@link Kii.authenticateAsThingWithToken()} to obtain KiiThingContext.)
  <br>Please execute {@link KiiThing#refresh()} to obtain other properties.
  @return {KiiThing} return authenticated KiiThing instance.
   */

  KiiThingContext.prototype.getAuthenticatedThing = function() {
    var thingContext;
    thingContext = root.KiiThingWithToken.thingWithID(this._thingId, this._token);
    thingContext._accessToken = this._token;
    thingContext._vendorThingID = this._vendorThingID;
    return thingContext;
  };


  /** Instantiate push installation for this thing.
  @return {KiiPushInstallation} push installation object.
   */

  KiiThingContext.prototype.pushInstallation = function() {
    return new root.KiiPushInstallationWithToken(this._token);
  };

  KiiThingContext.prototype._getToken = function() {
    return this._token;
  };

  KiiThingContext.prototype._objectWithURI = function(objectUri) {
    var bucket, bucketIndex, bucketName, compLength, components, newURI, obj, subject, valid;
    if (!objectUri) {
      throw new root.InvalidURIException;
    }
    valid = (objectUri.indexOf("kiicloud://")) === 0;
    newURI = objectUri.substr("kiicloud://".length);
    components = newURI.split("/");
    compLength = components.length;
    if (compLength >= 4 && valid) {
      bucketIndex = compLength === 4 ? 1 : 3;
      bucketName = components[bucketIndex];
      subject = null;
      if (components[0] === "groups" && compLength === 6) {
        subject = new root.KiiGroupWithToken._groupWithID(components[1], this._token);
      } else if (components[0] === "users" && compLength === 6) {
        subject = root.KiiUserWithToken._userWithID(components[1], this._token);
      } else if (components[0] === "things" && compLength === 6) {
        subject = root.KiiThingWithToken.thingWithID(components[1], this._token);
      } else if (compLength !== 4) {
        throw new root.InvalidURIException;
      }
      bucket = new root.KiiBucketWithToken(bucketName, subject, this._token);
      obj = bucket.createObject();
      obj._setUUID(components[compLength - 1]);
    } else {
      throw new root.InvalidURIException;
    }
    return obj;
  };

  return KiiThingContext;

})();


/**
    @class Represents a KiiUser builder
    @exports root.KiiUserBuilder as KiiUserBuilder
 */

root.KiiUserBuilder = (function() {
  function KiiUserBuilder() {
    this._password = null;
    this._username = null;
    this._emailAddress = null;
    this._phoneNumber = null;
    this._country = null;
  }


  /** Create a KiiUser builder with identifier.
  
  <br><br>Create a KiiUser builder. This constructor is received
  identifier. The identifier is one of user name, email address or
  phone number. This constructor automatically identity What is
  identifier and build proper KiiUser object on build method.
  
  <br><br> Some strings can be accepted as both user name and phone
  number. If such string is passed to this constructor as
  identifier, then phone number is prior to user name. String of
  email address is in different class against user name and phone
  number. So Email address is always identified correctly.
  
  @param {String} identifier The user's user name, email address or phone
  number. Must be string. Must not be null or undefined.
  @param {String} password for the user. Must be string. Must not be null or
  undefined.
  @returns {KiiUserBuilder} KiiUser object builder.
  @throws {InvalidArgumentException} If Identifier is not user name,
  email address or phone number.
  @throws {InvalidPasswordException} If the password is not in the
  proper format
   */

  KiiUserBuilder.builderWithIdentifier = function(identifier, password) {
    var builder, trimmed;
    if (identifier == null) {
      throw new root.InvalidArgumentException("Identifier must not be null or undefined");
    }
    if (!KiiUtilities._validatePassword(password)) {
      throw new root.InvalidPasswordException;
    }
    builder = new root.KiiUserBuilder();
    builder._password = password;
    if (KiiUtilities._validatePhoneNumber(identifier)) {
      builder._phoneNumber = identifier;
    } else {
      trimmed = KiiUtilities._trim(identifier);
      if (KiiUtilities._validateEmail(trimmed)) {
        builder._emailAddress = trimmed;
      } else if (KiiUtilities._validateUsername(trimmed)) {
        builder._username = trimmed;
      } else {
        throw new root.InvalidArgumentException;
      }
    }
    return builder;
  };


  /** Create KiiUser builder with email address
  
  <br><br>Create a KiiUser builder with email address.
  
  @param {String} emailAddress email address.
  @param {String} password for the user. Must be string. Must not be null or
  undefined.
  @returns {KiiUserBuilder} KiiUser object builder.
  @throws {InvalidEmailException} If the email address is not in the proper format
  @throws {InvalidPasswordException} If the password is not in the
  proper format
   */

  KiiUserBuilder.builderWithEmailAddress = function(emailAddress, password) {
    var builder;
    if (!KiiUtilities._validateEmail(emailAddress)) {
      throw new root.InvalidEmailException;
    }
    if (!KiiUtilities._validatePassword(password)) {
      throw new root.InvalidPasswordException;
    }
    builder = new root.KiiUserBuilder();
    builder._emailAddress = KiiUtilities._trim(emailAddress);
    builder._password = password;
    return builder;
  };


  /** Create KiiUser builder with global phone number
  
  <br><br>Create a KiiUser builder with global phone number.
  
  @param {String} phoneNumber global phone number.
  @returns {KiiUserBuilder} KiiUser object builder.
  @throws {InvalidPhoneNumberException} If the phone number is not in the proper format
   */

  KiiUserBuilder.builderWithGlobalPhoneNumber = function(phoneNumber, password) {
    var builder;
    if (!KiiUtilities._validatePhoneNumber(phoneNumber)) {
      throw new root.InvalidPhoneNumberException;
    }
    if (!KiiUtilities._isGlobalPhoneNumber(phoneNumber)) {
      throw new root.InvalidPhoneNumberException;
    }
    if (!KiiUtilities._validatePassword(password)) {
      throw new root.InvalidPasswordException;
    }
    builder = new root.KiiUserBuilder();
    builder._phoneNumber = phoneNumber;
    builder._password = password;
    return builder;
  };


  /** Create KiiUser builder with local phone number
  
  <br><br>Create a KiiUser builder with local phone number.
  
  @param {String} phoneNumber local phone number.
  @param {String} country country code
  @param {String} password for the user. Must be string. Must not be null or
  undefined.
  @returns {KiiUserBuilder} KiiUser object builder.
  @throws {InvalidPhoneNumberException} If the phone number is not in the proper format
  @throws {InvalidCountryException} If the country code is not a valid format
  @throws {InvalidPasswordException} If the password is not in the
  proper format
   */

  KiiUserBuilder.builderWithLocalPhoneNumber = function(phoneNumber, country, password) {
    var builder;
    if (!KiiUtilities._validateLocalPhone(phoneNumber)) {
      throw new root.InvalidPhoneNumberException;
    }
    if (!KiiUtilities._validateCountryCode(country)) {
      throw new root.InvalidCountryException;
    }
    if (!KiiUtilities._validatePassword(password)) {
      throw new root.InvalidPasswordException;
    }
    builder = new root.KiiUserBuilder();
    builder._phoneNumber = phoneNumber;
    builder._country = country;
    builder._password = password;
    return builder;
  };


  /** Create KiiUser builder with user name
  
  <br><br>Create a KiiUser builder with user name.
  
  @param {String} username user name.
  @param {String} password for the user. Must be string. Must not be null or
  undefined.
  @returns {KiiUserBuilder} KiiUser object builder.
  @throws {InvalidUsernameException} If the username is not in the proper format
  @throws {InvalidPasswordException} If the password is not in the
  proper format
   */

  KiiUserBuilder.builderWithUsername = function(username, password) {
    var builder, trimmed;
    trimmed = KiiUtilities._trim(username);
    if (!KiiUtilities._validateUsername(trimmed)) {
      throw new root.InvalidUsernameException;
    }
    if (!KiiUtilities._validatePassword(password)) {
      throw new root.InvalidPasswordException;
    }
    builder = new root.KiiUserBuilder();
    builder._username = trimmed;
    builder._password = password;
    return builder;
  };


  /** Set user name.
  
  <br><br>Set user name. If null or undefined is passed. It is
  ignored. Previous user name is remained.
  @param {String} username user name.
  @returns {KiiUserBuilder} this builder object.
  @throws {InvalidUsernameException} If the username is not in the
  proper format
   */

  KiiUserBuilder.prototype.setUsername = function(username) {
    var trimmed;
    if (username != null) {
      trimmed = KiiUtilities._trim(username);
      if (KiiUtilities._validateUsername(trimmed)) {
        this._username = trimmed;
      } else {
        throw new root.InvalidUsernameException;
      }
    }
    return this;
  };


  /** Set email address.
  
  <br><br>Set email address. If null or undefined is passed. It is
  ignored. Previous email address is remained.
  @param {String} emailAddress email address.
  @returns {KiiUserBuilder} this builder object.
  @throws {InvalidEmailException} If the email address is not in the
  proper format
   */

  KiiUserBuilder.prototype.setEmailAddress = function(emailAddress) {
    var trimmed;
    if (emailAddress != null) {
      trimmed = KiiUtilities._trim(emailAddress);
      if (KiiUtilities._validateEmail(trimmed)) {
        this._emailAddress = trimmed;
      } else {
        throw new root.InvalidEmailException;
      }
    }
    return this;
  };


  /** Set global phone number.
  
  <br><br>Set global phone number. If null or undefined is
  passed. It is ignored. Previous phone number is remained.
  @param {String} phoneNumber global phone number.
  @returns {KiiUserBuilder} this builder object.
  @throws {InvalidPhoneNumberException} If the phone number is not
  in the proper format
   */

  KiiUserBuilder.prototype.setGlobalPhoneNumber = function(phoneNumber) {
    if (phoneNumber != null) {
      if (KiiUtilities._validatePhoneNumber(phoneNumber)) {
        this._phoneNumber = phoneNumber;
        this._country = null;
      } else {
        throw new root.InvalidPhoneNumberException;
      }
    }
    return this;
  };


  /** Set local phone number.
  
  <br><br>Set local phone number. If null or undefined is
  passed. It is ignored. Previous phone number is remained.
  @param {String} phoneNumber local phone number.
  @param {String} country country code
  @returns {KiiUserBuilder} this builder object.
  @throws {InvalidPhoneNumberException} If the phone number is not
  in the proper format
  @throws {InvalidCountryException} If the country code is not a valid format
   */

  KiiUserBuilder.prototype.setLocalPhoneNumber = function(phoneNumber, country) {
    if ((phoneNumber != null) && !KiiUtilities._validateLocalPhone(phoneNumber)) {
      throw new root.InvalidPhoneNumberException;
    }
    if ((country != null) && !KiiUtilities._validateCountryCode(country)) {
      throw new root.InvalidCountryException;
    }
    if (phoneNumber != null) {
      this._phoneNumber = phoneNumber;
    }
    if (country != null) {
      this._country = country;
    }
    return this;
  };


  /** Build KiiUser object.
  
  <br><br> Build KiiUser object. This method verify set values.
  @returns {KiiUser} a working KiiUser object.
   */

  KiiUserBuilder.prototype.build = function() {
    var kiiUser;
    kiiUser = new root.KiiUser;
    if (this._username != null) {
      kiiUser._setUsername(this._username);
    }
    if (this._emailAddress != null) {
      kiiUser._setEmailAddress(this._emailAddress);
    }
    if (this._country != null) {
      kiiUser._setLocalPhone(this._phoneNumber, this._country);
    } else if (this._phoneNumber != null) {
      kiiUser._setPhoneNumber(this._phoneNumber);
    }
    kiiUser._setPassword(this._password);
    return kiiUser;
  };

  return KiiUserBuilder;

})();


/**
    @class Represents a KiiPushInstallation object
    @exports root.KiiPushInstallation as KiiPushInstallation
 */

root.KiiPushInstallation = (function() {
  function KiiPushInstallation(user) {
    this._setAuthToken = __bind(this._setAuthToken, this);
    this.uninstallByInstallationID = __bind(this.uninstallByInstallationID, this);
    this.uninstall = __bind(this.uninstall, this);
    this._getMqttEndpoint = __bind(this._getMqttEndpoint, this);
    this.getMqttEndpoint = __bind(this.getMqttEndpoint, this);
    this._install = __bind(this._install, this);
    this.installMqtt = __bind(this.installMqtt, this);
    this.installApns = __bind(this.installApns, this);
    this.installGcm = __bind(this.installGcm, this);
    this._user = user;
  }


  /** Register the id issued by GCM to the Kii cloud for current logged in user.
  @param {String} installationRegistrationID The ID of registration that identifies the installation externally.
  @param {Boolean} development Indicates if the installation is for development or production environment.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  <br>argument is response object. response.installationID is ID of the installation in the platform.
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(response).
        <ul>
          <li>response.installationID is ID of the installation in the platform.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
   */

  KiiPushInstallation.prototype.installGcm = function(installationRegistrationID, development, callbacks) {
    if (!KiiUtilities._isNonEmptyString(installationRegistrationID)) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var errObj;
          errObj = KiiUtilities._Error("installationRegistrationID must not be null or empty.", _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        };
      })(this));
    }
    return this._install(installationRegistrationID, "ANDROID", development, callbacks);
  };


  /** Register the id issued by APNS to the Kii cloud for current logged in user.
  @param {String} deviceToken The ID of registration that identifies the installation externally.
  @param {Boolean} development Indicates if the installation is for development or production environment.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  <br>argument is response object. response.installationID is ID of the installation in the platform.
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(response).
        <ul>
          <li>response.installationID is ID of the installation in the platform.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
   */

  KiiPushInstallation.prototype.installApns = function(deviceToken, development, callbacks) {
    if (!KiiUtilities._isNonEmptyString(deviceToken)) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var errObj;
          errObj = KiiUtilities._Error("deviceToken must not be null or empty.", _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        };
      })(this));
    }
    return this._install(deviceToken, "IOS", development, callbacks);
  };


  /** Register a MQTT installation to the Kii cloud for current logged in user.
  @param {Boolean} development Indicates if the installation is for development or production environment.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  <br>argument is response object. response.installationID is ID of the installation in the platform.
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(response).
        <ul>
          <li>response.installationID is ID of the installation in the platform.</li>
          <li>response.installationRegistrationID is ID of registration that identifies the installation externally.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
   */

  KiiPushInstallation.prototype.installMqtt = function(development, callbacks) {
    return this._install(null, "MQTT", development, callbacks);
  };

  KiiPushInstallation.prototype._install = function(installationRegistrationID, deviceType, development, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, requestBody, sendCallbacks, wrapper;
        if (typeof development !== 'boolean') {
          errObj = KiiUtilities._Error("type of development must be boolean.", _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
        }
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('POST', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/installations");
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        wrapper.setContentType("application/vnd.kii.InstallationCreationRequest+json");
        requestBody = {
          "deviceType": deviceType,
          "development": development
        };
        if (installationRegistrationID != null) {
          requestBody["installationRegistrationID"] = installationRegistrationID;
        }
        sendCallbacks = {
          success: function() {
            var respJson;
            respJson = JSON.parse(decodeURIComponent(wrapper.xhr.responseText));
            if (callbacks != null) {
              callbacks.success(respJson);
            }
            return resolve(respJson);
          },
          failure: function() {
            var errString;
            errString = wrapper.getErrorString("install push");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.sendData(JSON.stringify(requestBody), sendCallbacks);
      };
    })(this));
  };


  /** Get MQTT endpoint.
  If the MQTT endpoint is not ready, this method retries request up to three times.
  <br><br>
  Note that only MQTT over tls is supported currently.<br>
  Don't use portSSL, portWS or portWSS until we support it.
  @param {String} installationID The ID of the installation in the platform.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  <br>argument is response object. response.installationID is ID of the installation in the platform.
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(response).
        <ul>
          <li>response.installationID is ID of the installation in the platform.</li>
          <li>response.username is username to use for connecting to the MQTT broker.</li>
          <li>response.password is assword to use for connecting to the MQTT broker.</li>
          <li>response.mqttTopic is topic to subscribe in the MQTT broker.</li>
          <li>response.host is hostname of the MQTT broker.</li>
          <li>response.X-MQTT-TTL is the amount of time in seconds that specifies how long the mqttTopic will be valid, after that the client needs to request new MQTT endpoint info.</li>
          <li>response.portTCP is port to connect using plain TCP.</li>
          <li>response.portSSL is port to connect using SSL/TLS.</li>
          <li>response.portWS is port to connect using plain Websocket.</li>
          <li>response.portWSS is port to connect using SSL/TLS Websocket.</li>
        </ul>
      </li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
   */

  KiiPushInstallation.prototype.getMqttEndpoint = function(installationID, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, getMqttEndpointCallback;
        if (!KiiUtilities._isNonEmptyString(installationID)) {
          errObj = KiiUtilities._Error("installationID must not be null or empty.", _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
        }
        getMqttEndpointCallback = {
          success: function(respJson) {
            if (callbacks != null) {
              callbacks.success(respJson);
            }
            return resolve(respJson);
          },
          failure: function(err) {
            if (callbacks != null) {
              callbacks.failure(err);
            }
            return reject(err);
          }
        };
        return _this._getMqttEndpoint(installationID, 3, getMqttEndpointCallback);
      };
    })(this));
  };

  KiiPushInstallation.prototype._getMqttEndpoint = function(installationID, retry, callbacks) {
    var instance, requestCallback, wrapper;
    instance = this;
    wrapper = KiiXHRWrapperFactory.createXHRWrapper('GET', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/installations/" + installationID + "/mqtt-endpoint");
    wrapper.setKiiHeaders();
    this._setAuthToken(wrapper);
    requestCallback = {
      success: (function(_this) {
        return function() {
          var respJson;
          respJson = JSON.parse(decodeURIComponent(wrapper.xhr.responseText));
          return callbacks.success(respJson);
        };
      })(this),
      failure: (function(_this) {
        return function() {
          var errObj, errString;
          if (wrapper.xhr.status === 503) {
            retry--;
            if (retry <= 0) {
              errString = wrapper.getErrorString("get mqtt endpoint");
              errObj = KiiUtilities._Error(errString, instance);
              return callbacks.failure(errObj);
            } else {
              return setTimeout(function() {
                return instance._getMqttEndpoint(installationID, retry, callbacks);
              }, 1000);
            }
          } else {
            errString = wrapper.getErrorString("get mqtt endpoint");
            errObj = KiiUtilities._Error(errString, instance);
            return callbacks.failure(errObj);
          }
        };
      })(this)
    };
    return wrapper.send(requestCallback);
  };


  /** Unregister the push settings by the id(issued by push provider) that is used for installation.
  @param {String} installationRegistrationID The ID of registration that identifies the installation externally.
  @param {String} deviceType The type of the installation. Supported types are "ANDROID", "IOS" and "MQTT".
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function().</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
   */

  KiiPushInstallation.prototype.uninstall = function(installationRegistrationID, deviceType, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, sendCallbacks, wrapper;
        if (!KiiUtilities._isNonEmptyString(installationRegistrationID)) {
          errObj = KiiUtilities._Error("installationRegistrationID must not be null or empty.", _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
        }
        if (!root.KiiPushInstallation._validateDeviceType(deviceType)) {
          errObj = KiiUtilities._Error("Unsupported deviceType " + deviceType, _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
        }
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('DELETE', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/installations/" + deviceType + ":" + installationRegistrationID);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success();
            }
            return resolve();
          },
          failure: function() {
            var errString;
            errString = wrapper.getErrorString("uninstall push");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };


  /** Unregister the push settings by the id(issued by KiiCloud) that is used for installation.
  @param {String} installationID The ID of the installation issued by KiiCloud.
  @param {Object} [callbacks] An object with callback methods defined
  @param {Method} callbacks.success The callback method to call on a successful resend request
  @param {Method} callbacks.failure The callback method to call on a failed resend request
  <br>argument is Error object.
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function().</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
  @example
   */

  KiiPushInstallation.prototype.uninstallByInstallationID = function(installationID, callbacks) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var errObj, sendCallbacks, wrapper;
        if (!KiiUtilities._isNonEmptyString(installationID)) {
          errObj = KiiUtilities._Error("installationID must not be null or empty.", _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          reject(errObj);
        }
        wrapper = KiiXHRWrapperFactory.createXHRWrapper('DELETE', "" + (root.Kii.getBaseURL()) + "/apps/" + (root.Kii.getAppID()) + "/installations/" + installationID);
        wrapper.setKiiHeaders();
        _this._setAuthToken(wrapper);
        sendCallbacks = {
          success: function() {
            if (callbacks != null) {
              callbacks.success();
            }
            return resolve();
          },
          failure: function() {
            var errString;
            errString = wrapper.getErrorString("uninstall push");
            errObj = KiiUtilities._Error(errString, _this);
            if (callbacks != null) {
              callbacks.failure(errObj);
            }
            return reject(errObj);
          }
        };
        return wrapper.send(sendCallbacks);
      };
    })(this));
  };

  KiiPushInstallation._validateDeviceType = function(deviceType) {
    return deviceType === "ANDROID" || deviceType === "MQTT" || deviceType === "IOS";
  };

  KiiPushInstallation.prototype._setAuthToken = function(wrapper) {
    return wrapper.setCurrentUserToken();
  };

  return KiiPushInstallation;

})();

root.KiiPushInstallationWithToken = (function(_super) {
  __extends(KiiPushInstallationWithToken, _super);

  function KiiPushInstallationWithToken(_authToken) {
    this._authToken = _authToken;
    this._setAuthToken = __bind(this._setAuthToken, this);
  }

  KiiPushInstallationWithToken.prototype._setAuthToken = function(wrapper) {
    return wrapper.setAuthToken(this._authToken);
  };

  return KiiPushInstallationWithToken;

})(root.KiiPushInstallation);


/**
    @class A Parser for error string or error object returned by SDK.
    @exports root.KiiErrorParser as KiiErrorParser
 */

root.KiiErrorParser = (function() {
  var REG_NETWORK_ERROR, REG_SERVER_ERROR_KII_REQUEST, REG_SERVER_ERROR_KII_SERVER_CODE, REG_SERVER_ERROR_KII_SERVER_CODE_VERSION_NOT_FOUND, REG_SERVER_ERROR_KII_USER_OR_OBJECT, REG_SERVER_ERROR_KII_XHR_WRAPPER, SERVER_ERROR_CODES;

  function KiiErrorParser() {}

  SERVER_ERROR_CODES = {
    APP_NOT_FOUND: 404,
    APP_DISABLED: 403,
    UNAUTHORIZED: 401,
    USER_NOT_FOUND: 404,
    THING_NOT_FOUND: 404,
    THING_DISABLED: 401,
    THING_ALREADY_EXISTS: 409,
    THING_TYPE_NOT_FOUND: 404,
    FIRMWARE_VERSION_NOT_FOUND: 404,
    WRONG_TOKEN: 403,
    WRONG_REFRESH_TOKEN: 403,
    INVALID_BUCKET: 400,
    OPERATION_NOT_ALLOWED: 409,
    OPERATION_NOT_SUPPORTED: 403,
    AUTHENTICATION_FAILED: 401,
    USER_DISABLED: 401,
    INVALID_DATA_TYPE: 400,
    INVALID_INPUT_DATA: 400,
    INVALID_JSON: 400,
    INVALID_JSON_SCHEMA: 400,
    MISSING_DATA: 400,
    RESOURCE_TEMPORARILY_UNAVAILABLE: 503,
    WRONG_PASSWORD: 401,
    OAUTH2_ERROR: 400,
    THING_END_NODE_DOES_NOT_BELONG_TO_GATEWAY: 404,
    THING_END_NODE_ALREADY_BELONGS_TO_GATEWAY: 409,
    UNDEFINED_ERROR: 500,
    OPERATION_NOT_IMPLEMENTED: 501,
    LOCK_FAILED: 503,
    QUERY_NOT_SUPPORTED: 400,
    QUERY_TIMEOUT: 503,
    TEMPORARY_UNAVAILABLE_ERROR: 503,
    APP_ALREADY_EXISTS: 409,
    BUCKET_ALREADY_EXISTS: 409,
    BUCKET_NOT_FOUND: 404,
    FILTER_NOT_FOUND: 404,
    INVALID_ACCOUNT_STATUS: 400,
    INVALID_OBJECT_ID: 400,
    INVALID_VERIFICATION_CODE: 403,
    OBJECT_NOT_FOUND: 404,
    OBJECT_VERSION_IS_STALE: 409,
    OBJECT_ALREADY_EXISTS: 409,
    OBJECT_CONFLICT: 409,
    PUBLICATION_NOT_FOUND: 404,
    PUBLICATION_EXPIRED: 410,
    USER_ALREADY_EXISTS: 409,
    USER_ADDRESS_NOT_FOUND: 404,
    VERIFICATION_CODE_NOT_FOUND: 404,
    ACCOUNT_TYPE_NOT_SUPPORTED: 400,
    OBJECT_BODY_NOT_FOUND: 404,
    OBJECT_BODY_RANGE_NOT_SATISFIABLE: 416,
    OBJECT_BODY_INTEGRITY_NOT_ASSURED: 412,
    OBJECT_BODY_UPLOAD_NOT_FOUND: 404,
    OBJECT_BODY_UPLOAD_ALREADY_EXISTS: 409,
    BUCKET_TYPE_NOT_SUPPORTED: 400,
    GROUP_NOT_FOUND: 404,
    GROUP_ALREADY_EXISTS: 409,
    INSTALLATION_NOT_FOUND: 404,
    INSTALLATION_ALREADY_EXISTS: 409,
    ACL_NOT_FOUND: 404,
    ACL_ALREADY_EXISTS: 409,
    VERSIONED_UPDATES_NOT_SUPPORTED: 400,
    NO_ACCOUNT_PROVIDED: 400,
    FACEBOOK_USER_ALREADY_LINKED: 409,
    QQ_USER_ALREADY_LINKED: 409,
    GOOGLE_USER_ALREADY_LINKED: 409,
    USER_ALREADY_LINKED: 409,
    USER_NOT_LINKED: 409,
    UNIQUE_CONSTRAINT_VIOLATED: 409,
    GCMKEY_ALREADY_EXISTS: 409,
    GCMKEY_NOT_FOUND: 404,
    APNSKEY_NOT_FOUND: 404,
    JSON_WEB_KEY_NOT_FOUND: 404,
    JPUSHKEY_NOT_FOUND: 404,
    PUSH_SUBSCRIPTION_ALREADY_EXISTS: 409,
    PUSH_SUBSCRIPTION_NOT_FOUND: 404,
    TOPIC_ALREADY_EXISTS: 409,
    TOPIC_NOT_FOUND: 404,
    USER_LOCALE_NOT_FOUND: 404,
    TEMPLATE_NOT_FOUND: 404,
    USER_COUNTRY_NOT_FOUND: 404,
    USER_DISPLAY_NAME_NOT_FOUND: 404,
    SERVER_CODE_VERSION_NOT_FOUND: 404,
    SERVER_CODE_HOOK_VERSION_NOT_FOUND: 404,
    SCHEDULE_EXECUTION_NOT_FOUND: 404,
    ENDPOINT_INVOCATION_ERROR: 400,
    SERVER_CODE_VERIFICATION_ERROR: 400,
    PAYLOAD_ID_NOT_FOUND: 404,
    REPLACEMENT_SQL_QUERY_NOT_FOUND: 404,
    APP_CONFIG_PARAMETER_NOT_FOUND: 404,
    TRANSACTION_ID_NOT_FOUND: 404,
    TRANSACTION_ID_ALREADY_EXISTS: 409,
    CLIENT_CREDENTIALS_NOT_FOUND: 404,
    ACCESS_CODE_NOT_FOUND: 404,
    THING_OWNERSHIP_NOT_FOUND: 404,
    THING_OWNERSHIP_ALREADY_EXISTS: 409,
    INVALID_THING_OWNERSHIP_CODE: 409,
    MQTT_ENDPOINT_NOT_FOUND: 404,
    TASK_NOT_FOUND: 404,
    TASK_NOT_RECURRENT: 400,
    INVALID_STATUS: 409,
    PHONE_NUMBER_VERIFICATION_CODE_EXPIRED: 410,
    PIN_CODE_EXPIRED: 410,
    ADDRESS_VERIFICATION_CODE_NOT_FOUND: 404,
    MQTT_ENDPOINT_NOT_READY: 503,
    INDEX_FAILED: 500
  };

  REG_SERVER_ERROR_KII_REQUEST = new RegExp("(^[A-Z_]+): (.*)");

  REG_SERVER_ERROR_KII_XHR_WRAPPER = new RegExp(" statusCode: (\\d{3}) error code: ([A-Z_]+) message: (.*)$");

  REG_SERVER_ERROR_KII_USER_OR_OBJECT = new RegExp(" statusCode: (\\d{3}) error code: ([A-Z_]+) error message: (.*)$");

  REG_SERVER_ERROR_KII_SERVER_CODE = new RegExp(" statusCode: (\\d{3}) executedSteps: \\d+ error code: ([A-Z_]+) message: (.*) detailMessage: (.*)$");

  REG_SERVER_ERROR_KII_SERVER_CODE_VERSION_NOT_FOUND = new RegExp(" statusCode: (\\d{3}) executedSteps: null error code: ([A-Z_]+) message: (.*)$");

  REG_NETWORK_ERROR = new RegExp("statusCode: (\\d{1,3})$");


  /** Parse an error string or error object returned by SDK.
  @param {Object} error An error string or error object
  @return {Object} return parsed error object.
  @example
  var err = KiiErrorParser.parse(errorString);
  var httpStatus = err.status;
  if (httpStatus == 0) {
      // NetworkError
  } else if (httpStatus == -1) {
      // Error is not related the http error. eg. argument error, illegal state error, etc.
  } else if (httpStatus == -2) {
      // Unknown error is detected.
      // Please confirm that you are using the latest version of SDK.
  } else if (httpStatus >= 400 && httpStatus < 600) {
      // Http error
  }
  var errorCode = err.code;
  var errorMessage = err.message;
   */

  KiiErrorParser.parse = function(error) {
    var arr, code, errorString, message, regex, status, _i, _len, _ref;
    if ((typeof error).toLowerCase() === "string") {
      errorString = error;
    } else {
      errorString = error.message;
    }
    if (!errorString) {
      return null;
    }
    if (errorString.indexOf('0 : http') === 0) {
      return {
        status: 0,
        code: null,
        message: "Network Error"
      };
    } else if (errorString.indexOf('429 : http') === 0) {
      return {
        status: 429,
        code: "TOO_MANY_REQUESTS",
        message: "Number of requests exceeds the limit."
      };
    } else if (errorString.indexOf('fail to execute server code. statusCode: 0') === 0) {
      return {
        status: 0,
        code: null,
        message: "Network Error"
      };
    } else {
      arr = REG_NETWORK_ERROR.exec(errorString);
      if (arr) {
        status = Number(arr[1]);
        if (status === 429) {
          return {
            status: 429,
            code: "TOO_MANY_REQUESTS",
            message: "Number of requests exceeds the limit."
          };
        } else {
          return {
            status: 0,
            code: null,
            message: "Network Error"
          };
        }
      }
      arr = REG_SERVER_ERROR_KII_REQUEST.exec(errorString);
      if (arr) {
        code = arr[1];
        message = arr[2];
        status = SERVER_ERROR_CODES[code];
        if (!status) {
          status = -2;
        }
        return {
          status: status,
          code: code,
          message: message
        };
      }
      _ref = [REG_SERVER_ERROR_KII_XHR_WRAPPER, REG_SERVER_ERROR_KII_USER_OR_OBJECT, REG_SERVER_ERROR_KII_SERVER_CODE, REG_SERVER_ERROR_KII_SERVER_CODE_VERSION_NOT_FOUND];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        regex = _ref[_i];
        arr = regex.exec(errorString);
        if (arr) {
          status = Number(arr[1]);
          code = arr[2];
          message = arr[3];
          return {
            status: status,
            code: code,
            message: message
          };
        }
      }
    }
    return {
      status: -1,
      code: null,
      message: errorString
    };
  };

  return KiiErrorParser;

})();


/**
    @class Represents a KiiThingQuery object
    @exports root.KiiThingQuery as KiiThingQuery
 */

root.KiiThingQuery = (function() {
  function KiiThingQuery(owner, groups) {
    this._dictValue = __bind(this._dictValue, this);
    this.clone = __bind(this.clone, this);
    this.getPaginationKey = __bind(this.getPaginationKey, this);
    this.setPaginationKey = __bind(this.setPaginationKey, this);
    this.getThingType = __bind(this.getThingType, this);
    this.setThingType = __bind(this.setThingType, this);
    this.getLimit = __bind(this.getLimit, this);
    this.setLimit = __bind(this.setLimit, this);
    if ((owner == null) && ((groups == null) || groups.length === 0)) {
      throw root.InvalidArgumentException('Both the owner and groups parameter are optional, but at least one of them must be supplied.');
    }
    this._owner = owner;
    this._groups = groups;
    this._limit = 0;
  }


  /** Construct KiiThingQuery.<br>
  Both an owner and groups parameters are optional,
  but at least one of them must be supplied.
  @param {KiiUser} [owner] of the thing. The user must be same as 
  Login user or causes unauthorized error.
  @param {KiiGroup[]} [groups] owns the thing. Login user must belongs
  to all groups or causes unauthorized error.
  @throws {InvalidArgumentException}
  neither an owner nor groups parameters are supplied.
   */

  KiiThingQuery.thingQuery = function(owner, groups) {
    return new root.KiiThingQuery(owner, groups);
  };


  /** Set the limit of the given query
  @param limit The maximum number of items obtained in one request.<br>
  If specified limit is <= 0, 0 will be applied.
  This limit behaves in a best effort way. Actual number of returned result
  can be smaller than the requested number.<br>
  If the specified limit is greater than the limit of the server or limit is
  set to 0, limit defined in server will be applied.
   */

  KiiThingQuery.prototype.setLimit = function(limit) {
    if (limit > 0) {
      return this._limit = limit;
    } else {
      return this._limit = 0;
    }
  };


  /** Get the limit of the current query
  @returns {Number}
   */

  KiiThingQuery.prototype.getLimit = function() {
    return this._limit;
  };


  /** Set the thing type to filter the results.
  @param thingType Thing type
   */

  KiiThingQuery.prototype.setThingType = function(thingType) {
    return this._thingType = thingType;
  };


  /** Get the thing type
  @returns {String}
   */

  KiiThingQuery.prototype.getThingType = function() {
    return this._thingType;
  };


  /** Set the pagination key.
  @param paginationKey Pagination key
   */

  KiiThingQuery.prototype.setPaginationKey = function(paginationKey) {
    return this._paginationKey = paginationKey;
  };


  /** Get the pagination key.
  @returns {String}
   */

  KiiThingQuery.prototype.getPaginationKey = function() {
    return this._paginationKey;
  };

  KiiThingQuery.prototype.clone = function() {
    var clone;
    clone = new root.KiiThingQuery(root.KiiThingQuery._clone(this._owner), root.KiiThingQuery._clone(this._groups));
    clone._limit = this._limit;
    clone._thingType = this._thingType;
    clone._paginationKey = this._paginationKey;
    return clone;
  };

  KiiThingQuery._clone = function(obj) {
    var key, newInstance;
    if ((obj == null) || typeof obj !== 'object') {
      return obj;
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = KiiThingQuery._clone(obj[key]);
    }
    return newInstance;
  };

  KiiThingQuery.prototype._dictValue = function() {
    var groupOwner, groupOwnerClause, ownerClause, ownerClauses, query, thingQuery, userOwnerClause, _i, _len, _ref;
    query = {};
    if ((this._limit != null) && this._limit > 0) {
      query.bestEffortLimit = this._limit;
    }
    if (this._paginationKey != null) {
      query.paginationKey = this._paginationKey;
    }
    ownerClauses = [];
    if (this._owner != null) {
      userOwnerClause = {
        "type": "contains",
        "field": "userOwners",
        "value": this._owner.getID()
      };
      ownerClauses.push(userOwnerClause);
    }
    if ((this._groups != null) && this._groups.length > 0) {
      _ref = this._groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        groupOwner = _ref[_i];
        groupOwnerClause = {
          "type": "contains",
          "field": "groupOwners",
          "value": groupOwner.getID()
        };
        ownerClauses.push(groupOwnerClause);
      }
    }
    if (ownerClauses.length === 0) {
      throw root.InvalidArgumentException("Query clause must include the 'contains' clause.");
    } else if (ownerClauses.length === 1) {
      ownerClause = ownerClauses[0];
    } else {
      ownerClause = {
        "type": "or",
        "clauses": ownerClauses
      };
    }
    if (this._thingType != null) {
      thingQuery = {
        "clause": {
          "type": "and",
          "clauses": [
            {
              "type": "eq",
              "field": "_thingType",
              "value": this._thingType
            }, ownerClause
          ]
        }
      };
    } else {
      thingQuery = {
        "clause": ownerClause
      };
    }
    query.thingQuery = thingQuery;
    return query;
  };

  return KiiThingQuery;

})();


/**
    @class Represents a KiiThingQueryResult object
    @exports root.KiiThingQueryResult as KiiThingQueryResult
 */

root.KiiThingQueryResult = (function() {
  function KiiThingQueryResult(query, results, paginationKey) {
    this.getNextResult = __bind(this.getNextResult, this);
    this.getNextKiiThingQuery = __bind(this.getNextKiiThingQuery, this);
    this.hasNext = __bind(this.hasNext, this);
    this.getResult = __bind(this.getResult, this);
    this._query = query;
    this._results = results;
    this._paginationKey = paginationKey;
  }


  /** Get the list of KiiThing that matches the query
  @returns {Array} An array of KiiThing objects
   */

  KiiThingQueryResult.prototype.getResult = function() {
    return this._results;
  };


  /** When there are many result of query or data in result is large, Query result would be divided into several pages.
  @returns {Boolean} true if there are pending result of the Query to be retrieved.
   */

  KiiThingQueryResult.prototype.hasNext = function() {
    return this._paginationKey != null;
  };


  /** Get the KiiThingQuery to get next page of the result.
  @returns {KiiThingQuery} KiiThingQuery to get next page of the query. null when this result is the last part of the query.
   */

  KiiThingQueryResult.prototype.getNextKiiThingQuery = function() {
    var nextQuery;
    if (!this.hasNext()) {
      return null;
    }
    nextQuery = this._query.clone();
    nextQuery.setPaginationKey(this._paginationKey);
    return nextQuery;
  };


  /** Fetch the query result of next page.
  
  <br><br>The query will be executed against the server, returning a result set.
  When the state that #hasNext() is false,
  method execution is failed and Promise returned by the method is rejected
  and failure callback is called if the callback is given.
  @param Object callbacks An object with callback methods defined
  @param {Function} callbacks.success The callback method to call on a successful query request
  @param {Function} callbacks.failure The callback method to call on a failed query request
  @return {Promise} return promise object.
    <ul>
      <li>fulfill callback function: function(result). result is KiiThingQueryResult instance.</li>
      <li>reject callback function: function(error). error is an Error instance.
        <ul>
          <li>error.target is the KiiThing instance.</li>
          <li>error.message</li>
        </ul>
      </li>
    </ul>
   */

  KiiThingQueryResult.prototype.getNextResult = function(callbacks) {
    if (!this.hasNext()) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var errObj, message;
          message = "No more pages to fetch";
          errObj = KiiUtilities._Error(message, _this);
          if (callbacks != null) {
            callbacks.failure(errObj);
          }
          return reject(errObj);
        };
      })(this));
    } else {
      return root.KiiThing.executeQuery(this.getNextKiiThingQuery(), callbacks);
    }
  };

  return KiiThingQueryResult;

})();


return root;
});  // generated by build.sh for running on Node.js

// Following code was generated by build.sh for running on Node.js
(function() {
var b = ((typeof module) !== "undefined") && (module !== null);
if (b && module.exports) {
  module.exports = {
    exportedClasses: ['ForTest', 'Kii', 'KiiACL', 'KiiACLEntry', 'KiiACLWithToken', 'KiiAnalytics', 'KiiAnonymousUser', 'KiiAnyAuthenticatedUser', 'KiiAppAdminContext', 'KiiBucket', 'KiiBucketWithToken', 'KiiClause', 'KiiEncryptedBucket', 'KiiEncryptedBucketWithToken', 'KiiErrorParser', 'KiiGeoPoint', 'KiiGroup', 'KiiGroupWithToken', 'KiiObject', 'KiiObjectWithToken', 'KiiPushInstallation', 'KiiPushInstallationWithToken', 'KiiPushSubscription', 'KiiPushSubscriptionWithToken', 'KiiQuery', 'KiiSCNFacebook', 'KiiSCNGoogle', 'KiiSCNQQ', 'KiiSCNRenRen', 'KiiSCNTwitter', 'KiiSDKClientInfo', 'KiiServerCodeEntry', 'KiiServerCodeExecResult', 'KiiSocialConnect', 'KiiSocialConnectNetwork', 'KiiThing', 'KiiThingContext', 'KiiThingQuery', 'KiiThingQueryResult', 'KiiThingWithToken', 'KiiTopic', 'KiiPushMessageBuilder', 'KiiTopicWithToken', 'KiiUser', 'KiiUserBuilder', 'KiiUserWithToken', 'KiiSocialNetworkName', 'KiiSite', 'KiiServerCodeEnvironmentVersion', '_KiiHttpRequestType', 'KiiACLAction', 'KiiAnalyticsSite', 'InvalidDisplayNameException', 'InvalidPasswordException', 'InvalidUsernameException', 'InvalidUserIdentifierException', 'InvalidEmailException', 'InvalidPhoneNumberException', 'InvalidLocalPhoneNumberException', 'InvalidCountryException', 'InvalidURIException', 'InvalidACLAction', 'InvalidACLSubject', 'InvalidACLGrant', 'InvalidLimitException', 'InvalidArgumentException', 'IllegalStateException', 'ArithmeticException', 'UnsupportedOperationException'],
    create: function() {
      return ctor.call(this);
    }
  };
} else {
  ctor();
}
})();
})();
